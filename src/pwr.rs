// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Power control" ]
# [ repr ( C ) ]
pub struct Pwr {
    # [ doc = "0x00 - power control register" ]
    pub cr1: volatile::ReadWrite<Cr1>,
    # [ doc = "0x04 - power control/status register" ]
    pub csr1: volatile::ReadWrite<Csr1>,
    # [ doc = "0x08 - power control register" ]
    pub cr2: volatile::ReadWrite<Cr2>,
    # [ doc = "0x0c - power control/status register" ]
    pub csr2: volatile::ReadWrite<Csr2>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr1 {
    bits: u32,
}

impl Cr1 {
    # [ doc = "Bit 0 - Low-power deep sleep" ]
    pub fn lpds(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Power down deepsleep" ]
    pub fn pdds(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 3 - Clear standby flag" ]
    pub fn csbf(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Power voltage detector enable" ]
    pub fn pvde(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bits 5:7 - PVD level selection" ]
    pub fn pls(&self) -> u8 {
        self.bits.get_range(5u8..8u8) as u8
    }
    # [ doc = "Bit 8 - Disable backup domain write protection" ]
    pub fn dbp(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Flash power down in Stop mode" ]
    pub fn fpds(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Low-power regulator in deepsleep under-drive mode" ]
    pub fn lpuds(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Main regulator in deepsleep under-drive mode" ]
    pub fn mruds(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 13 - ADCDC1" ]
    pub fn adcdc1(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bits 14:15 - Regulator voltage scaling output selection" ]
    pub fn vos(&self) -> u8 {
        self.bits.get_range(14u8..16u8) as u8
    }
    # [ doc = "Bit 16 - Over-drive enable" ]
    pub fn oden(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Over-drive switching enabled" ]
    pub fn odswen(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bits 18:19 - Under-drive enable in stop mode" ]
    pub fn uden(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
}

impl Default for Cr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr1 { bits: 49152u32 }
    }
}

impl Cr1 {
    # [ doc = "Bit 0 - Low-power deep sleep" ]
    pub fn set_lpds(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Power down deepsleep" ]
    pub fn set_pdds(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 3 - Clear standby flag" ]
    pub fn set_csbf(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Power voltage detector enable" ]
    pub fn set_pvde(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bits 5:7 - PVD level selection" ]
    pub fn set_pls(&mut self, value: u8) {
        self.bits.set_range(5u8..8u8, value as u32);
    }
    # [ doc = "Bit 8 - Disable backup domain write protection" ]
    pub fn set_dbp(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Flash power down in Stop mode" ]
    pub fn set_fpds(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Low-power regulator in deepsleep under-drive mode" ]
    pub fn set_lpuds(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Main regulator in deepsleep under-drive mode" ]
    pub fn set_mruds(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 13 - ADCDC1" ]
    pub fn set_adcdc1(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bits 14:15 - Regulator voltage scaling output selection" ]
    pub fn set_vos(&mut self, value: u8) {
        self.bits.set_range(14u8..16u8, value as u32);
    }
    # [ doc = "Bit 16 - Over-drive enable" ]
    pub fn set_oden(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Over-drive switching enabled" ]
    pub fn set_odswen(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bits 18:19 - Under-drive enable in stop mode" ]
    pub fn set_uden(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr1 {
    bits: u32,
}

impl Csr1 {
    # [ doc = "Bit 0 - Wakeup internal flag" ]
    pub fn wuif(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Standby flag" ]
    pub fn sbf(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - PVD output" ]
    pub fn pvdo(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Backup regulator ready" ]
    pub fn brr(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 9 - Backup regulator enable" ]
    pub fn bre(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 14 - Regulator voltage scaling output selection ready bit" ]
    pub fn vosrdy(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 16 - Over-drive mode ready" ]
    pub fn odrdy(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Over-drive mode switching ready" ]
    pub fn odswrdy(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bits 18:19 - Under-drive ready flag" ]
    pub fn udrdy(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
}

impl Default for Csr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr1 { bits: 0u32 }
    }
}

impl Csr1 {
    # [ doc = "Bit 9 - Backup regulator enable" ]
    pub fn set_bre(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 14 - Regulator voltage scaling output selection ready bit" ]
    pub fn set_vosrdy(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 16 - Over-drive mode ready" ]
    pub fn set_odrdy(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Over-drive mode switching ready" ]
    pub fn set_odswrdy(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bits 18:19 - Under-drive ready flag" ]
    pub fn set_udrdy(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr2 {
    bits: u32,
}

impl Cr2 {
    # [ doc = "Bit 0 - Clear Wakeup Pin flag for PA0" ]
    pub fn cwupf1(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Clear Wakeup Pin flag for PA2" ]
    pub fn cwupf2(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Clear Wakeup Pin flag for PC1" ]
    pub fn cwupf3(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Clear Wakeup Pin flag for PC13" ]
    pub fn cwupf4(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Clear Wakeup Pin flag for PI8" ]
    pub fn cwupf5(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Clear Wakeup Pin flag for PI11" ]
    pub fn cwupf6(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 8 - Wakeup pin polarity bit for PA0" ]
    pub fn wupp1(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Wakeup pin polarity bit for PA2" ]
    pub fn wupp2(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Wakeup pin polarity bit for PC1" ]
    pub fn wupp3(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Wakeup pin polarity bit for PC13" ]
    pub fn wupp4(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Wakeup pin polarity bit for PI8" ]
    pub fn wupp5(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Wakeup pin polarity bit for PI11" ]
    pub fn wupp6(&self) -> bool {
        self.bits.get_bit(13u8)
    }
}

impl Default for Cr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr2 { bits: 0u32 }
    }
}

impl Cr2 {
    # [ doc = "Bit 8 - Wakeup pin polarity bit for PA0" ]
    pub fn set_wupp1(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Wakeup pin polarity bit for PA2" ]
    pub fn set_wupp2(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Wakeup pin polarity bit for PC1" ]
    pub fn set_wupp3(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Wakeup pin polarity bit for PC13" ]
    pub fn set_wupp4(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Wakeup pin polarity bit for PI8" ]
    pub fn set_wupp5(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Wakeup pin polarity bit for PI11" ]
    pub fn set_wupp6(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr2 {
    bits: u32,
}

impl Csr2 {
    # [ doc = "Bit 0 - Wakeup Pin flag for PA0" ]
    pub fn wupf1(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Wakeup Pin flag for PA2" ]
    pub fn wupf2(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Wakeup Pin flag for PC1" ]
    pub fn wupf3(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Wakeup Pin flag for PC13" ]
    pub fn wupf4(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Wakeup Pin flag for PI8" ]
    pub fn wupf5(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Wakeup Pin flag for PI11" ]
    pub fn wupf6(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 8 - Enable Wakeup pin for PA0" ]
    pub fn ewup1(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Enable Wakeup pin for PA2" ]
    pub fn ewup2(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Enable Wakeup pin for PC1" ]
    pub fn ewup3(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Enable Wakeup pin for PC13" ]
    pub fn ewup4(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Enable Wakeup pin for PI8" ]
    pub fn ewup5(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Enable Wakeup pin for PI11" ]
    pub fn ewup6(&self) -> bool {
        self.bits.get_bit(13u8)
    }
}

impl Default for Csr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr2 { bits: 0u32 }
    }
}

impl Csr2 {
    # [ doc = "Bit 8 - Enable Wakeup pin for PA0" ]
    pub fn set_ewup1(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Enable Wakeup pin for PA2" ]
    pub fn set_ewup2(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Enable Wakeup pin for PC1" ]
    pub fn set_ewup3(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Enable Wakeup pin for PC13" ]
    pub fn set_ewup4(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Enable Wakeup pin for PI8" ]
    pub fn set_ewup5(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Enable Wakeup pin for PI11" ]
    pub fn set_ewup6(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
}
