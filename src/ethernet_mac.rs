// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Ethernet: media access control (MAC)" ]
# [ repr ( C ) ]
pub struct EthernetMac {
    # [ doc = "0x00 - Ethernet MAC configuration register" ]
    pub maccr: volatile::ReadWrite<Maccr>,
    # [ doc = "0x04 - Ethernet MAC frame filter register" ]
    pub macffr: volatile::ReadWrite<Macffr>,
    # [ doc = "0x08 - Ethernet MAC hash table high register" ]
    pub machthr: volatile::ReadWrite<Machthr>,
    # [ doc = "0x0c - Ethernet MAC hash table low register" ]
    pub machtlr: volatile::ReadWrite<Machtlr>,
    # [ doc = "0x10 - Ethernet MAC MII address register" ]
    pub macmiiar: volatile::ReadWrite<Macmiiar>,
    # [ doc = "0x14 - Ethernet MAC MII data register" ]
    pub macmiidr: volatile::ReadWrite<Macmiidr>,
    # [ doc = "0x18 - Ethernet MAC flow control register" ]
    pub macfcr: volatile::ReadWrite<Macfcr>,
    # [ doc = "0x1c - Ethernet MAC VLAN tag register" ]
    pub macvlantr: volatile::ReadWrite<Macvlantr>,
    _reserved0: [u8; 12usize],
    # [ doc = "0x2c - Ethernet MAC PMT control and status register" ]
    pub macpmtcsr: volatile::ReadWrite<Macpmtcsr>,
    _reserved1: [u8; 4usize],
    # [ doc = "0x34 - Ethernet MAC debug register" ]
    pub macdbgr: volatile::ReadOnly<Macdbgr>,
    # [ doc = "0x38 - Ethernet MAC interrupt status register" ]
    pub macsr: volatile::ReadWrite<Macsr>,
    # [ doc = "0x3c - Ethernet MAC interrupt mask register" ]
    pub macimr: volatile::ReadWrite<Macimr>,
    # [ doc = "0x40 - Ethernet MAC address 0 high register" ]
    pub maca0hr: volatile::ReadWrite<Maca0hr>,
    # [ doc = "0x44 - Ethernet MAC address 0 low register" ]
    pub maca0lr: volatile::ReadWrite<Maca0lr>,
    # [ doc = "0x48 - Ethernet MAC address 1 high register" ]
    pub maca1hr: volatile::ReadWrite<Maca1hr>,
    # [ doc = "0x4c - Ethernet MAC address1 low register" ]
    pub maca1lr: volatile::ReadWrite<Maca1lr>,
    # [ doc = "0x50 - Ethernet MAC address 2 high register" ]
    pub maca2hr: volatile::ReadWrite<Maca2hr>,
    # [ doc = "0x54 - Ethernet MAC address 2 low register" ]
    pub maca2lr: volatile::ReadWrite<Maca2lr>,
    # [ doc = "0x58 - Ethernet MAC address 3 high register" ]
    pub maca3hr: volatile::ReadWrite<Maca3hr>,
    # [ doc = "0x5c - Ethernet MAC address 3 low register" ]
    pub maca3lr: volatile::ReadWrite<Maca3lr>,
    # [ doc = "0x60 - Ethernet MAC remote wakeup frame filter register" ]
    pub macrwuffer: volatile::ReadWrite<Macrwuffer>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maccr {
    bits: u32,
}

impl Maccr {
    # [ doc = "Bit 2 - RE" ]
    pub fn re(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - TE" ]
    pub fn te(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - DC" ]
    pub fn dc(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bits 5:6 - BL" ]
    pub fn bl(&self) -> u8 {
        self.bits.get_range(5u8..7u8) as u8
    }
    # [ doc = "Bit 7 - APCS" ]
    pub fn apcs(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 9 - RD" ]
    pub fn rd(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - IPCO" ]
    pub fn ipco(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - DM" ]
    pub fn dm(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - LM" ]
    pub fn lm(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - ROD" ]
    pub fn rod(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - FES" ]
    pub fn fes(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 16 - CSD" ]
    pub fn csd(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bits 17:19 - IFG" ]
    pub fn ifg(&self) -> u8 {
        self.bits.get_range(17u8..20u8) as u8
    }
    # [ doc = "Bit 22 - JD" ]
    pub fn jd(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - WD" ]
    pub fn wd(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 25 - CSTF" ]
    pub fn cstf(&self) -> bool {
        self.bits.get_bit(25u8)
    }
}

impl Default for Maccr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maccr { bits: 32768u32 }
    }
}

impl Maccr {
    # [ doc = "Bit 2 - RE" ]
    pub fn set_re(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - TE" ]
    pub fn set_te(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - DC" ]
    pub fn set_dc(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bits 5:6 - BL" ]
    pub fn set_bl(&mut self, value: u8) {
        self.bits.set_range(5u8..7u8, value as u32);
    }
    # [ doc = "Bit 7 - APCS" ]
    pub fn set_apcs(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 9 - RD" ]
    pub fn set_rd(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - IPCO" ]
    pub fn set_ipco(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - DM" ]
    pub fn set_dm(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - LM" ]
    pub fn set_lm(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - ROD" ]
    pub fn set_rod(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - FES" ]
    pub fn set_fes(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 16 - CSD" ]
    pub fn set_csd(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bits 17:19 - IFG" ]
    pub fn set_ifg(&mut self, value: u8) {
        self.bits.set_range(17u8..20u8, value as u32);
    }
    # [ doc = "Bit 22 - JD" ]
    pub fn set_jd(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - WD" ]
    pub fn set_wd(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 25 - CSTF" ]
    pub fn set_cstf(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macffr {
    bits: u32,
}

impl Macffr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn pm(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn hu(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn hm(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn daif(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn ram(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn bfd(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn pcf(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn saif(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn saf(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn hpf(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn ra(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Macffr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macffr { bits: 0u32 }
    }
}

impl Macffr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_pm(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_hu(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn set_hm(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn set_daif(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn set_ram(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn set_bfd(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn set_pcf(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn set_saif(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn set_saf(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_hpf(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn set_ra(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Machthr {
    bits: u32,
}

impl Machthr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn hth(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Machthr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Machthr { bits: 0u32 }
    }
}

impl Machthr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_hth(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Machtlr {
    bits: u32,
}

impl Machtlr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn htl(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Machtlr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Machtlr { bits: 0u32 }
    }
}

impl Machtlr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_htl(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macmiiar {
    bits: u32,
}

impl Macmiiar {
    # [ doc = "Bit 0 - no description available" ]
    pub fn mb(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn mw(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bits 2:4 - no description available" ]
    pub fn cr(&self) -> u8 {
        self.bits.get_range(2u8..5u8) as u8
    }
    # [ doc = "Bits 6:10 - no description available" ]
    pub fn mr(&self) -> u8 {
        self.bits.get_range(6u8..11u8) as u8
    }
    # [ doc = "Bits 11:15 - no description available" ]
    pub fn pa(&self) -> u8 {
        self.bits.get_range(11u8..16u8) as u8
    }
}

impl Default for Macmiiar {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macmiiar { bits: 0u32 }
    }
}

impl Macmiiar {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_mb(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_mw(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bits 2:4 - no description available" ]
    pub fn set_cr(&mut self, value: u8) {
        self.bits.set_range(2u8..5u8, value as u32);
    }
    # [ doc = "Bits 6:10 - no description available" ]
    pub fn set_mr(&mut self, value: u8) {
        self.bits.set_range(6u8..11u8, value as u32);
    }
    # [ doc = "Bits 11:15 - no description available" ]
    pub fn set_pa(&mut self, value: u8) {
        self.bits.set_range(11u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macmiidr {
    bits: u32,
}

impl Macmiidr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn td(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for Macmiidr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macmiidr { bits: 0u32 }
    }
}

impl Macmiidr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_td(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macfcr {
    bits: u32,
}

impl Macfcr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn fcb(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn tfce(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn rfce(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn upfd(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 4:5 - no description available" ]
    pub fn plt(&self) -> u8 {
        self.bits.get_range(4u8..6u8) as u8
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn zqpd(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bits 16:31 - no description available" ]
    pub fn pt(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
}

impl Default for Macfcr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macfcr { bits: 0u32 }
    }
}

impl Macfcr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_fcb(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_tfce(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn set_rfce(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn set_upfd(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bits 4:5 - no description available" ]
    pub fn set_plt(&mut self, value: u8) {
        self.bits.set_range(4u8..6u8, value as u32);
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn set_zqpd(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bits 16:31 - no description available" ]
    pub fn set_pt(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macvlantr {
    bits: u32,
}

impl Macvlantr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn vlanti(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn vlantc(&self) -> bool {
        self.bits.get_bit(16u8)
    }
}

impl Default for Macvlantr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macvlantr { bits: 0u32 }
    }
}

impl Macvlantr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_vlanti(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn set_vlantc(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macpmtcsr {
    bits: u32,
}

impl Macpmtcsr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn pd(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn mpe(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn wfe(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn mpr(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn wfr(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn gu(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn wffrpr(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Macpmtcsr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macpmtcsr { bits: 0u32 }
    }
}

impl Macpmtcsr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_pd(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_mpe(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn set_wfe(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn set_mpr(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn set_wfr(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_gu(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn set_wffrpr(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macdbgr {
    bits: u32,
}

impl Macdbgr {
    # [ doc = "Bit 0 - CR" ]
    pub fn cr(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - CSR" ]
    pub fn csr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - ROR" ]
    pub fn ror(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - MCF" ]
    pub fn mcf(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - MCP" ]
    pub fn mcp(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - MCFHP" ]
    pub fn mcfhp(&self) -> bool {
        self.bits.get_bit(5u8)
    }
}

impl Default for Macdbgr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macdbgr { bits: 0u32 }
    }
}

impl Macdbgr {
    # [ doc = "Bit 0 - CR" ]
    pub fn set_cr(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - CSR" ]
    pub fn set_csr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - ROR" ]
    pub fn set_ror(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - MCF" ]
    pub fn set_mcf(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - MCP" ]
    pub fn set_mcp(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - MCFHP" ]
    pub fn set_mcfhp(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macsr {
    bits: u32,
}

impl Macsr {
    # [ doc = "Bit 3 - no description available" ]
    pub fn pmts(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn mmcs(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn mmcrs(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn mmcts(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn tsts(&self) -> bool {
        self.bits.get_bit(9u8)
    }
}

impl Default for Macsr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macsr { bits: 0u32 }
    }
}

impl Macsr {
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_tsts(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macimr {
    bits: u32,
}

impl Macimr {
    # [ doc = "Bit 3 - no description available" ]
    pub fn pmtim(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn tstim(&self) -> bool {
        self.bits.get_bit(9u8)
    }
}

impl Default for Macimr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macimr { bits: 0u32 }
    }
}

impl Macimr {
    # [ doc = "Bit 3 - no description available" ]
    pub fn set_pmtim(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_tstim(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca0hr {
    bits: u32,
}

impl Maca0hr {
    # [ doc = "Bits 0:15 - MAC address0 high" ]
    pub fn maca0h(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bit 31 - Always 1" ]
    pub fn mo(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Maca0hr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca0hr { bits: 1114111u32 }
    }
}

impl Maca0hr {
    # [ doc = "Bits 0:15 - MAC address0 high" ]
    pub fn set_maca0h(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca0lr {
    bits: u32,
}

impl Maca0lr {
    # [ doc = "Bits 0:31 - 0" ]
    pub fn maca0l(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Maca0lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca0lr { bits: 4294967295u32 }
    }
}

impl Maca0lr {
    # [ doc = "Bits 0:31 - 0" ]
    pub fn set_maca0l(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca1hr {
    bits: u32,
}

impl Maca1hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn maca1h(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn mbc(&self) -> u8 {
        self.bits.get_range(24u8..30u8) as u8
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn sa(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn ae(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Maca1hr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca1hr { bits: 65535u32 }
    }
}

impl Maca1hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_maca1h(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn set_mbc(&mut self, value: u8) {
        self.bits.set_range(24u8..30u8, value as u32);
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn set_sa(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn set_ae(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca1lr {
    bits: u32,
}

impl Maca1lr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn maca1lr(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Maca1lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca1lr { bits: 4294967295u32 }
    }
}

impl Maca1lr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_maca1lr(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca2hr {
    bits: u32,
}

impl Maca2hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn mac2ah(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn mbc(&self) -> u8 {
        self.bits.get_range(24u8..30u8) as u8
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn sa(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn ae(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Maca2hr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca2hr { bits: 65535u32 }
    }
}

impl Maca2hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_mac2ah(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn set_mbc(&mut self, value: u8) {
        self.bits.set_range(24u8..30u8, value as u32);
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn set_sa(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn set_ae(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca2lr {
    bits: u32,
}

impl Maca2lr {
    # [ doc = "Bits 0:30 - no description available" ]
    pub fn maca2l(&self) -> u32 {
        self.bits.get_range(0u8..31u8) as u32
    }
}

impl Default for Maca2lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca2lr { bits: 4294967295u32 }
    }
}

impl Maca2lr {
    # [ doc = "Bits 0:30 - no description available" ]
    pub fn set_maca2l(&mut self, value: u32) {
        self.bits.set_range(0u8..31u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca3hr {
    bits: u32,
}

impl Maca3hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn maca3h(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn mbc(&self) -> u8 {
        self.bits.get_range(24u8..30u8) as u8
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn sa(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn ae(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Maca3hr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca3hr { bits: 65535u32 }
    }
}

impl Maca3hr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_maca3h(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bits 24:29 - no description available" ]
    pub fn set_mbc(&mut self, value: u8) {
        self.bits.set_range(24u8..30u8, value as u32);
    }
    # [ doc = "Bit 30 - no description available" ]
    pub fn set_sa(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - no description available" ]
    pub fn set_ae(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Maca3lr {
    bits: u32,
}

impl Maca3lr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn mbca3l(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Maca3lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Maca3lr { bits: 4294967295u32 }
    }
}

impl Maca3lr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_mbca3l(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Macrwuffer {
    bits: u32,
}

impl Macrwuffer {}

impl Default for Macrwuffer {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Macrwuffer { bits: 4294967295u32 }
    }
}

impl Macrwuffer {}
