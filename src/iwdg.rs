// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Independent watchdog" ]
# [ repr ( C ) ]
pub struct Iwdg {
    # [ doc = "0x00 - Key register" ]
    pub kr: volatile::WriteOnly<Kr>,
    # [ doc = "0x04 - Prescaler register" ]
    pub pr: volatile::ReadWrite<Pr>,
    # [ doc = "0x08 - Reload register" ]
    pub rlr: volatile::ReadWrite<Rlr>,
    # [ doc = "0x0c - Status register" ]
    pub sr: volatile::ReadOnly<Sr>,
    # [ doc = "0x10 - Window register" ]
    pub winr: volatile::ReadWrite<Winr>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Kr {
    bits: u32,
}

impl Kr {
    # [ doc = "Bits 0:15 - Key value (write only, read 0000h)" ]
    pub fn key(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for Kr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Kr { bits: 0u32 }
    }
}

impl Kr {
    # [ doc = "Bits 0:15 - Key value (write only, read 0000h)" ]
    pub fn set_key(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Pr {
    bits: u32,
}

impl Pr {
    # [ doc = "Bits 0:2 - Prescaler divider" ]
    pub fn pr(&self) -> u8 {
        self.bits.get_range(0u8..3u8) as u8
    }
}

impl Default for Pr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Pr { bits: 0u32 }
    }
}

impl Pr {
    # [ doc = "Bits 0:2 - Prescaler divider" ]
    pub fn set_pr(&mut self, value: u8) {
        self.bits.set_range(0u8..3u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rlr {
    bits: u32,
}

impl Rlr {
    # [ doc = "Bits 0:11 - Watchdog counter reload value" ]
    pub fn rl(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Rlr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rlr { bits: 4095u32 }
    }
}

impl Rlr {
    # [ doc = "Bits 0:11 - Watchdog counter reload value" ]
    pub fn set_rl(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Sr {
    bits: u32,
}

impl Sr {
    # [ doc = "Bit 1 - Watchdog counter reload value update" ]
    pub fn rvu(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Watchdog prescaler value update" ]
    pub fn pvu(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Sr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Sr { bits: 0u32 }
    }
}

impl Sr {
    # [ doc = "Bit 1 - Watchdog counter reload value update" ]
    pub fn set_rvu(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Watchdog prescaler value update" ]
    pub fn set_pvu(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Winr {
    bits: u32,
}

impl Winr {
    # [ doc = "Bits 0:11 - Watchdog counter window value" ]
    pub fn win(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Winr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Winr { bits: 0u32 }
    }
}

impl Winr {
    # [ doc = "Bits 0:11 - Watchdog counter window value" ]
    pub fn set_win(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}
