// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Controller area network" ]
# [ repr ( C ) ]
pub struct Can {
    # [ doc = "0x00 - master control register" ]
    pub mcr: volatile::ReadWrite<Mcr>,
    # [ doc = "0x04 - master status register" ]
    pub msr: volatile::ReadWrite<Msr>,
    # [ doc = "0x08 - transmit status register" ]
    pub tsr: volatile::ReadWrite<Tsr>,
    # [ doc = "0x0c - receive FIFO 0 register" ]
    pub rf0r: volatile::ReadWrite<Rf0r>,
    # [ doc = "0x10 - receive FIFO 1 register" ]
    pub rf1r: volatile::ReadWrite<Rf1r>,
    # [ doc = "0x14 - interrupt enable register" ]
    pub ier: volatile::ReadWrite<Ier>,
    # [ doc = "0x18 - interrupt enable register" ]
    pub esr: volatile::ReadWrite<Esr>,
    # [ doc = "0x1c - bit timing register" ]
    pub btr: volatile::ReadWrite<Btr>,
    _reserved0: [u8; 352usize],
    # [ doc = "0x180 - TX mailbox identifier register" ]
    pub ti0r: volatile::ReadWrite<Ti0r>,
    # [ doc = "0x184 - mailbox data length control and time stamp register" ]
    pub tdt0r: volatile::ReadWrite<Tdt0r>,
    # [ doc = "0x188 - mailbox data low register" ]
    pub tdl0r: volatile::ReadWrite<Tdl0r>,
    # [ doc = "0x18c - mailbox data high register" ]
    pub tdh0r: volatile::ReadWrite<Tdh0r>,
    # [ doc = "0x190 - mailbox identifier register" ]
    pub ti1r: volatile::ReadWrite<Ti1r>,
    # [ doc = "0x194 - mailbox data length control and time stamp register" ]
    pub tdt1r: volatile::ReadWrite<Tdt1r>,
    # [ doc = "0x198 - mailbox data low register" ]
    pub tdl1r: volatile::ReadWrite<Tdl1r>,
    # [ doc = "0x19c - mailbox data high register" ]
    pub tdh1r: volatile::ReadWrite<Tdh1r>,
    # [ doc = "0x1a0 - mailbox identifier register" ]
    pub ti2r: volatile::ReadWrite<Ti2r>,
    # [ doc = "0x1a4 - mailbox data length control and time stamp register" ]
    pub tdt2r: volatile::ReadWrite<Tdt2r>,
    # [ doc = "0x1a8 - mailbox data low register" ]
    pub tdl2r: volatile::ReadWrite<Tdl2r>,
    # [ doc = "0x1ac - mailbox data high register" ]
    pub tdh2r: volatile::ReadWrite<Tdh2r>,
    # [ doc = "0x1b0 - receive FIFO mailbox identifier register" ]
    pub ri0r: volatile::ReadOnly<Ri0r>,
    # [ doc = "0x1b4 - mailbox data high register" ]
    pub rdt0r: volatile::ReadOnly<Rdt0r>,
    # [ doc = "0x1b8 - mailbox data high register" ]
    pub rdl0r: volatile::ReadOnly<Rdl0r>,
    # [ doc = "0x1bc - receive FIFO mailbox data high register" ]
    pub rdh0r: volatile::ReadOnly<Rdh0r>,
    # [ doc = "0x1c0 - mailbox data high register" ]
    pub ri1r: volatile::ReadOnly<Ri1r>,
    # [ doc = "0x1c4 - mailbox data high register" ]
    pub rdt1r: volatile::ReadOnly<Rdt1r>,
    # [ doc = "0x1c8 - mailbox data high register" ]
    pub rdl1r: volatile::ReadOnly<Rdl1r>,
    # [ doc = "0x1cc - mailbox data high register" ]
    pub rdh1r: volatile::ReadOnly<Rdh1r>,
    _reserved1: [u8; 48usize],
    # [ doc = "0x200 - filter master register" ]
    pub fmr: volatile::ReadWrite<Fmr>,
    # [ doc = "0x204 - filter mode register" ]
    pub fm1r: volatile::ReadWrite<Fm1r>,
    _reserved2: [u8; 4usize],
    # [ doc = "0x20c - filter scale register" ]
    pub fs1r: volatile::ReadWrite<Fs1r>,
    _reserved3: [u8; 4usize],
    # [ doc = "0x214 - filter FIFO assignment register" ]
    pub ffa1r: volatile::ReadWrite<Ffa1r>,
    _reserved4: [u8; 4usize],
    # [ doc = "0x21c - filter activation register" ]
    pub fa1r: volatile::ReadWrite<Fa1r>,
    _reserved5: [u8; 32usize],
    # [ doc = "0x240 - Filter bank 0 register 1" ]
    pub f0r1: volatile::ReadWrite<F0r1>,
    # [ doc = "0x244 - Filter bank 0 register 2" ]
    pub f0r2: volatile::ReadWrite<F0r2>,
    # [ doc = "0x248 - Filter bank 1 register 1" ]
    pub f1r1: volatile::ReadWrite<F1r1>,
    # [ doc = "0x24c - Filter bank 1 register 2" ]
    pub f1r2: volatile::ReadWrite<F1r2>,
    # [ doc = "0x250 - Filter bank 2 register 1" ]
    pub f2r1: volatile::ReadWrite<F2r1>,
    # [ doc = "0x254 - Filter bank 2 register 2" ]
    pub f2r2: volatile::ReadWrite<F2r2>,
    # [ doc = "0x258 - Filter bank 3 register 1" ]
    pub f3r1: volatile::ReadWrite<F3r1>,
    # [ doc = "0x25c - Filter bank 3 register 2" ]
    pub f3r2: volatile::ReadWrite<F3r2>,
    # [ doc = "0x260 - Filter bank 4 register 1" ]
    pub f4r1: volatile::ReadWrite<F4r1>,
    # [ doc = "0x264 - Filter bank 4 register 2" ]
    pub f4r2: volatile::ReadWrite<F4r2>,
    # [ doc = "0x268 - Filter bank 5 register 1" ]
    pub f5r1: volatile::ReadWrite<F5r1>,
    # [ doc = "0x26c - Filter bank 5 register 2" ]
    pub f5r2: volatile::ReadWrite<F5r2>,
    # [ doc = "0x270 - Filter bank 6 register 1" ]
    pub f6r1: volatile::ReadWrite<F6r1>,
    # [ doc = "0x274 - Filter bank 6 register 2" ]
    pub f6r2: volatile::ReadWrite<F6r2>,
    # [ doc = "0x278 - Filter bank 7 register 1" ]
    pub f7r1: volatile::ReadWrite<F7r1>,
    # [ doc = "0x27c - Filter bank 7 register 2" ]
    pub f7r2: volatile::ReadWrite<F7r2>,
    # [ doc = "0x280 - Filter bank 8 register 1" ]
    pub f8r1: volatile::ReadWrite<F8r1>,
    # [ doc = "0x284 - Filter bank 8 register 2" ]
    pub f8r2: volatile::ReadWrite<F8r2>,
    # [ doc = "0x288 - Filter bank 9 register 1" ]
    pub f9r1: volatile::ReadWrite<F9r1>,
    # [ doc = "0x28c - Filter bank 9 register 2" ]
    pub f9r2: volatile::ReadWrite<F9r2>,
    # [ doc = "0x290 - Filter bank 10 register 1" ]
    pub f10r1: volatile::ReadWrite<F10r1>,
    # [ doc = "0x294 - Filter bank 10 register 2" ]
    pub f10r2: volatile::ReadWrite<F10r2>,
    # [ doc = "0x298 - Filter bank 11 register 1" ]
    pub f11r1: volatile::ReadWrite<F11r1>,
    # [ doc = "0x29c - Filter bank 11 register 2" ]
    pub f11r2: volatile::ReadWrite<F11r2>,
    # [ doc = "0x2a0 - Filter bank 4 register 1" ]
    pub f12r1: volatile::ReadWrite<F12r1>,
    # [ doc = "0x2a4 - Filter bank 12 register 2" ]
    pub f12r2: volatile::ReadWrite<F12r2>,
    # [ doc = "0x2a8 - Filter bank 13 register 1" ]
    pub f13r1: volatile::ReadWrite<F13r1>,
    # [ doc = "0x2ac - Filter bank 13 register 2" ]
    pub f13r2: volatile::ReadWrite<F13r2>,
    # [ doc = "0x2b0 - Filter bank 14 register 1" ]
    pub f14r1: volatile::ReadWrite<F14r1>,
    # [ doc = "0x2b4 - Filter bank 14 register 2" ]
    pub f14r2: volatile::ReadWrite<F14r2>,
    # [ doc = "0x2b8 - Filter bank 15 register 1" ]
    pub f15r1: volatile::ReadWrite<F15r1>,
    # [ doc = "0x2bc - Filter bank 15 register 2" ]
    pub f15r2: volatile::ReadWrite<F15r2>,
    # [ doc = "0x2c0 - Filter bank 16 register 1" ]
    pub f16r1: volatile::ReadWrite<F16r1>,
    # [ doc = "0x2c4 - Filter bank 16 register 2" ]
    pub f16r2: volatile::ReadWrite<F16r2>,
    # [ doc = "0x2c8 - Filter bank 17 register 1" ]
    pub f17r1: volatile::ReadWrite<F17r1>,
    # [ doc = "0x2cc - Filter bank 17 register 2" ]
    pub f17r2: volatile::ReadWrite<F17r2>,
    # [ doc = "0x2d0 - Filter bank 18 register 1" ]
    pub f18r1: volatile::ReadWrite<F18r1>,
    # [ doc = "0x2d4 - Filter bank 18 register 2" ]
    pub f18r2: volatile::ReadWrite<F18r2>,
    # [ doc = "0x2d8 - Filter bank 19 register 1" ]
    pub f19r1: volatile::ReadWrite<F19r1>,
    # [ doc = "0x2dc - Filter bank 19 register 2" ]
    pub f19r2: volatile::ReadWrite<F19r2>,
    # [ doc = "0x2e0 - Filter bank 20 register 1" ]
    pub f20r1: volatile::ReadWrite<F20r1>,
    # [ doc = "0x2e4 - Filter bank 20 register 2" ]
    pub f20r2: volatile::ReadWrite<F20r2>,
    # [ doc = "0x2e8 - Filter bank 21 register 1" ]
    pub f21r1: volatile::ReadWrite<F21r1>,
    # [ doc = "0x2ec - Filter bank 21 register 2" ]
    pub f21r2: volatile::ReadWrite<F21r2>,
    # [ doc = "0x2f0 - Filter bank 22 register 1" ]
    pub f22r1: volatile::ReadWrite<F22r1>,
    # [ doc = "0x2f4 - Filter bank 22 register 2" ]
    pub f22r2: volatile::ReadWrite<F22r2>,
    # [ doc = "0x2f8 - Filter bank 23 register 1" ]
    pub f23r1: volatile::ReadWrite<F23r1>,
    # [ doc = "0x2fc - Filter bank 23 register 2" ]
    pub f23r2: volatile::ReadWrite<F23r2>,
    # [ doc = "0x300 - Filter bank 24 register 1" ]
    pub f24r1: volatile::ReadWrite<F24r1>,
    # [ doc = "0x304 - Filter bank 24 register 2" ]
    pub f24r2: volatile::ReadWrite<F24r2>,
    # [ doc = "0x308 - Filter bank 25 register 1" ]
    pub f25r1: volatile::ReadWrite<F25r1>,
    # [ doc = "0x30c - Filter bank 25 register 2" ]
    pub f25r2: volatile::ReadWrite<F25r2>,
    # [ doc = "0x310 - Filter bank 26 register 1" ]
    pub f26r1: volatile::ReadWrite<F26r1>,
    # [ doc = "0x314 - Filter bank 26 register 2" ]
    pub f26r2: volatile::ReadWrite<F26r2>,
    # [ doc = "0x318 - Filter bank 27 register 1" ]
    pub f27r1: volatile::ReadWrite<F27r1>,
    # [ doc = "0x31c - Filter bank 27 register 2" ]
    pub f27r2: volatile::ReadWrite<F27r2>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Mcr {
    bits: u32,
}

impl Mcr {
    # [ doc = "Bit 16 - DBF" ]
    pub fn dbf(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - RESET" ]
    pub fn reset(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 7 - TTCM" ]
    pub fn ttcm(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - ABOM" ]
    pub fn abom(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 5 - AWUM" ]
    pub fn awum(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - NART" ]
    pub fn nart(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - RFLM" ]
    pub fn rflm(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - TXFP" ]
    pub fn txfp(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - SLEEP" ]
    pub fn sleep(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - INRQ" ]
    pub fn inrq(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Mcr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Mcr { bits: 65538u32 }
    }
}

impl Mcr {
    # [ doc = "Bit 16 - DBF" ]
    pub fn set_dbf(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 15 - RESET" ]
    pub fn set_reset(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 7 - TTCM" ]
    pub fn set_ttcm(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 6 - ABOM" ]
    pub fn set_abom(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 5 - AWUM" ]
    pub fn set_awum(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - NART" ]
    pub fn set_nart(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - RFLM" ]
    pub fn set_rflm(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - TXFP" ]
    pub fn set_txfp(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - SLEEP" ]
    pub fn set_sleep(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - INRQ" ]
    pub fn set_inrq(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Msr {
    bits: u32,
}

impl Msr {
    # [ doc = "Bit 11 - RX" ]
    pub fn rx(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 10 - SAMP" ]
    pub fn samp(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 9 - RXM" ]
    pub fn rxm(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 8 - TXM" ]
    pub fn txm(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 4 - SLAKI" ]
    pub fn slaki(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - WKUI" ]
    pub fn wkui(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - ERRI" ]
    pub fn erri(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - SLAK" ]
    pub fn slak(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - INAK" ]
    pub fn inak(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Msr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Msr { bits: 3074u32 }
    }
}

impl Msr {
    # [ doc = "Bit 4 - SLAKI" ]
    pub fn set_slaki(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - WKUI" ]
    pub fn set_wkui(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - ERRI" ]
    pub fn set_erri(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tsr {
    bits: u32,
}

impl Tsr {
    # [ doc = "Bit 31 - Lowest priority flag for mailbox 2" ]
    pub fn low2(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - Lowest priority flag for mailbox 1" ]
    pub fn low1(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 29 - Lowest priority flag for mailbox 0" ]
    pub fn low0(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 28 - Lowest priority flag for mailbox 2" ]
    pub fn tme2(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 27 - Lowest priority flag for mailbox 1" ]
    pub fn tme1(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 26 - Lowest priority flag for mailbox 0" ]
    pub fn tme0(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bits 24:25 - CODE" ]
    pub fn code(&self) -> u8 {
        self.bits.get_range(24u8..26u8) as u8
    }
    # [ doc = "Bit 23 - ABRQ2" ]
    pub fn abrq2(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 19 - TERR2" ]
    pub fn terr2(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 18 - ALST2" ]
    pub fn alst2(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 17 - TXOK2" ]
    pub fn txok2(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - RQCP2" ]
    pub fn rqcp2(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - ABRQ1" ]
    pub fn abrq1(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 11 - TERR1" ]
    pub fn terr1(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 10 - ALST1" ]
    pub fn alst1(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 9 - TXOK1" ]
    pub fn txok1(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 8 - RQCP1" ]
    pub fn rqcp1(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 7 - ABRQ0" ]
    pub fn abrq0(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 3 - TERR0" ]
    pub fn terr0(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - ALST0" ]
    pub fn alst0(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - TXOK0" ]
    pub fn txok0(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - RQCP0" ]
    pub fn rqcp0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Tsr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tsr { bits: 469762048u32 }
    }
}

impl Tsr {
    # [ doc = "Bit 23 - ABRQ2" ]
    pub fn set_abrq2(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 19 - TERR2" ]
    pub fn set_terr2(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 18 - ALST2" ]
    pub fn set_alst2(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 17 - TXOK2" ]
    pub fn set_txok2(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 16 - RQCP2" ]
    pub fn set_rqcp2(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 15 - ABRQ1" ]
    pub fn set_abrq1(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 11 - TERR1" ]
    pub fn set_terr1(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 10 - ALST1" ]
    pub fn set_alst1(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 9 - TXOK1" ]
    pub fn set_txok1(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 8 - RQCP1" ]
    pub fn set_rqcp1(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 7 - ABRQ0" ]
    pub fn set_abrq0(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 3 - TERR0" ]
    pub fn set_terr0(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - ALST0" ]
    pub fn set_alst0(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - TXOK0" ]
    pub fn set_txok0(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - RQCP0" ]
    pub fn set_rqcp0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rf0r {
    bits: u32,
}

impl Rf0r {
    # [ doc = "Bit 5 - RFOM0" ]
    pub fn rfom0(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - FOVR0" ]
    pub fn fovr0(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - FULL0" ]
    pub fn full0(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 0:1 - FMP0" ]
    pub fn fmp0(&self) -> u8 {
        self.bits.get_range(0u8..2u8) as u8
    }
}

impl Default for Rf0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rf0r { bits: 0u32 }
    }
}

impl Rf0r {
    # [ doc = "Bit 5 - RFOM0" ]
    pub fn set_rfom0(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - FOVR0" ]
    pub fn set_fovr0(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - FULL0" ]
    pub fn set_full0(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rf1r {
    bits: u32,
}

impl Rf1r {
    # [ doc = "Bit 5 - RFOM1" ]
    pub fn rfom1(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - FOVR1" ]
    pub fn fovr1(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - FULL1" ]
    pub fn full1(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 0:1 - FMP1" ]
    pub fn fmp1(&self) -> u8 {
        self.bits.get_range(0u8..2u8) as u8
    }
}

impl Default for Rf1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rf1r { bits: 0u32 }
    }
}

impl Rf1r {
    # [ doc = "Bit 5 - RFOM1" ]
    pub fn set_rfom1(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - FOVR1" ]
    pub fn set_fovr1(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - FULL1" ]
    pub fn set_full1(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ier {
    bits: u32,
}

impl Ier {
    # [ doc = "Bit 17 - SLKIE" ]
    pub fn slkie(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - WKUIE" ]
    pub fn wkuie(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - ERRIE" ]
    pub fn errie(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 11 - LECIE" ]
    pub fn lecie(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 10 - BOFIE" ]
    pub fn bofie(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 9 - EPVIE" ]
    pub fn epvie(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 8 - EWGIE" ]
    pub fn ewgie(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 6 - FOVIE1" ]
    pub fn fovie1(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 5 - FFIE1" ]
    pub fn ffie1(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - FMPIE1" ]
    pub fn fmpie1(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - FOVIE0" ]
    pub fn fovie0(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - FFIE0" ]
    pub fn ffie0(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - FMPIE0" ]
    pub fn fmpie0(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - TMEIE" ]
    pub fn tmeie(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Ier {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ier { bits: 0u32 }
    }
}

impl Ier {
    # [ doc = "Bit 17 - SLKIE" ]
    pub fn set_slkie(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 16 - WKUIE" ]
    pub fn set_wkuie(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 15 - ERRIE" ]
    pub fn set_errie(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 11 - LECIE" ]
    pub fn set_lecie(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 10 - BOFIE" ]
    pub fn set_bofie(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 9 - EPVIE" ]
    pub fn set_epvie(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 8 - EWGIE" ]
    pub fn set_ewgie(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 6 - FOVIE1" ]
    pub fn set_fovie1(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 5 - FFIE1" ]
    pub fn set_ffie1(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - FMPIE1" ]
    pub fn set_fmpie1(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - FOVIE0" ]
    pub fn set_fovie0(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - FFIE0" ]
    pub fn set_ffie0(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - FMPIE0" ]
    pub fn set_fmpie0(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - TMEIE" ]
    pub fn set_tmeie(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Esr {
    bits: u32,
}

impl Esr {
    # [ doc = "Bits 24:31 - REC" ]
    pub fn rec(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - TEC" ]
    pub fn tec(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 4:6 - LEC" ]
    pub fn lec(&self) -> u8 {
        self.bits.get_range(4u8..7u8) as u8
    }
    # [ doc = "Bit 2 - BOFF" ]
    pub fn boff(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - EPVF" ]
    pub fn epvf(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - EWGF" ]
    pub fn ewgf(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Esr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Esr { bits: 0u32 }
    }
}

impl Esr {
    # [ doc = "Bits 4:6 - LEC" ]
    pub fn set_lec(&mut self, value: u8) {
        self.bits.set_range(4u8..7u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Btr {
    bits: u32,
}

impl Btr {
    # [ doc = "Bit 31 - SILM" ]
    pub fn silm(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - LBKM" ]
    pub fn lbkm(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 24:25 - SJW" ]
    pub fn sjw(&self) -> u8 {
        self.bits.get_range(24u8..26u8) as u8
    }
    # [ doc = "Bits 20:22 - TS2" ]
    pub fn ts2(&self) -> u8 {
        self.bits.get_range(20u8..23u8) as u8
    }
    # [ doc = "Bits 16:19 - TS1" ]
    pub fn ts1(&self) -> u8 {
        self.bits.get_range(16u8..20u8) as u8
    }
    # [ doc = "Bits 0:9 - BRP" ]
    pub fn brp(&self) -> u16 {
        self.bits.get_range(0u8..10u8) as u16
    }
}

impl Default for Btr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Btr { bits: 0u32 }
    }
}

impl Btr {
    # [ doc = "Bit 31 - SILM" ]
    pub fn set_silm(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - LBKM" ]
    pub fn set_lbkm(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bits 24:25 - SJW" ]
    pub fn set_sjw(&mut self, value: u8) {
        self.bits.set_range(24u8..26u8, value as u32);
    }
    # [ doc = "Bits 20:22 - TS2" ]
    pub fn set_ts2(&mut self, value: u8) {
        self.bits.set_range(20u8..23u8, value as u32);
    }
    # [ doc = "Bits 16:19 - TS1" ]
    pub fn set_ts1(&mut self, value: u8) {
        self.bits.set_range(16u8..20u8, value as u32);
    }
    # [ doc = "Bits 0:9 - BRP" ]
    pub fn set_brp(&mut self, value: u16) {
        self.bits.set_range(0u8..10u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ti0r {
    bits: u32,
}

impl Ti0r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn stid(&self) -> u16 {
        self.bits.get_range(21u8..32u8) as u16
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn exid(&self) -> u32 {
        self.bits.get_range(3u8..21u8) as u32
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn ide(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn rtr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn txrq(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Ti0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ti0r { bits: 0u32 }
    }
}

impl Ti0r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn set_stid(&mut self, value: u16) {
        self.bits.set_range(21u8..32u8, value as u32);
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn set_exid(&mut self, value: u32) {
        self.bits.set_range(3u8..21u8, value as u32);
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn set_ide(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn set_rtr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn set_txrq(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdt0r {
    bits: u32,
}

impl Tdt0r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn time(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn tgt(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn dlc(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Tdt0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdt0r { bits: 0u32 }
    }
}

impl Tdt0r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn set_time(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn set_tgt(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn set_dlc(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdl0r {
    bits: u32,
}

impl Tdl0r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn data3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn data2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn data1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn data0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdl0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdl0r { bits: 0u32 }
    }
}

impl Tdl0r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn set_data3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn set_data2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn set_data1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn set_data0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdh0r {
    bits: u32,
}

impl Tdh0r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn data7(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn data6(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn data5(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn data4(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdh0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdh0r { bits: 0u32 }
    }
}

impl Tdh0r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn set_data7(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn set_data6(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn set_data5(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn set_data4(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ti1r {
    bits: u32,
}

impl Ti1r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn stid(&self) -> u16 {
        self.bits.get_range(21u8..32u8) as u16
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn exid(&self) -> u32 {
        self.bits.get_range(3u8..21u8) as u32
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn ide(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn rtr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn txrq(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Ti1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ti1r { bits: 0u32 }
    }
}

impl Ti1r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn set_stid(&mut self, value: u16) {
        self.bits.set_range(21u8..32u8, value as u32);
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn set_exid(&mut self, value: u32) {
        self.bits.set_range(3u8..21u8, value as u32);
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn set_ide(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn set_rtr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn set_txrq(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdt1r {
    bits: u32,
}

impl Tdt1r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn time(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn tgt(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn dlc(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Tdt1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdt1r { bits: 0u32 }
    }
}

impl Tdt1r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn set_time(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn set_tgt(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn set_dlc(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdl1r {
    bits: u32,
}

impl Tdl1r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn data3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn data2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn data1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn data0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdl1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdl1r { bits: 0u32 }
    }
}

impl Tdl1r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn set_data3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn set_data2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn set_data1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn set_data0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdh1r {
    bits: u32,
}

impl Tdh1r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn data7(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn data6(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn data5(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn data4(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdh1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdh1r { bits: 0u32 }
    }
}

impl Tdh1r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn set_data7(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn set_data6(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn set_data5(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn set_data4(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ti2r {
    bits: u32,
}

impl Ti2r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn stid(&self) -> u16 {
        self.bits.get_range(21u8..32u8) as u16
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn exid(&self) -> u32 {
        self.bits.get_range(3u8..21u8) as u32
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn ide(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn rtr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn txrq(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Ti2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ti2r { bits: 0u32 }
    }
}

impl Ti2r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn set_stid(&mut self, value: u16) {
        self.bits.set_range(21u8..32u8, value as u32);
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn set_exid(&mut self, value: u32) {
        self.bits.set_range(3u8..21u8, value as u32);
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn set_ide(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn set_rtr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - TXRQ" ]
    pub fn set_txrq(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdt2r {
    bits: u32,
}

impl Tdt2r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn time(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn tgt(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn dlc(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Tdt2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdt2r { bits: 0u32 }
    }
}

impl Tdt2r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn set_time(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
    # [ doc = "Bit 8 - TGT" ]
    pub fn set_tgt(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn set_dlc(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdl2r {
    bits: u32,
}

impl Tdl2r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn data3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn data2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn data1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn data0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdl2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdl2r { bits: 0u32 }
    }
}

impl Tdl2r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn set_data3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn set_data2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn set_data1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn set_data0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Tdh2r {
    bits: u32,
}

impl Tdh2r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn data7(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn data6(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn data5(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn data4(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Tdh2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Tdh2r { bits: 0u32 }
    }
}

impl Tdh2r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn set_data7(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn set_data6(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn set_data5(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn set_data4(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ri0r {
    bits: u32,
}

impl Ri0r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn stid(&self) -> u16 {
        self.bits.get_range(21u8..32u8) as u16
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn exid(&self) -> u32 {
        self.bits.get_range(3u8..21u8) as u32
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn ide(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn rtr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
}

impl Default for Ri0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ri0r { bits: 0u32 }
    }
}

impl Ri0r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn set_stid(&mut self, value: u16) {
        self.bits.set_range(21u8..32u8, value as u32);
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn set_exid(&mut self, value: u32) {
        self.bits.set_range(3u8..21u8, value as u32);
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn set_ide(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn set_rtr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdt0r {
    bits: u32,
}

impl Rdt0r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn time(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
    # [ doc = "Bits 8:15 - FMI" ]
    pub fn fmi(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn dlc(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Rdt0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdt0r { bits: 0u32 }
    }
}

impl Rdt0r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn set_time(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
    # [ doc = "Bits 8:15 - FMI" ]
    pub fn set_fmi(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn set_dlc(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdl0r {
    bits: u32,
}

impl Rdl0r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn data3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn data2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn data1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn data0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Rdl0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdl0r { bits: 0u32 }
    }
}

impl Rdl0r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn set_data3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn set_data2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn set_data1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn set_data0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdh0r {
    bits: u32,
}

impl Rdh0r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn data7(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn data6(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn data5(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn data4(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Rdh0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdh0r { bits: 0u32 }
    }
}

impl Rdh0r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn set_data7(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn set_data6(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn set_data5(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn set_data4(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ri1r {
    bits: u32,
}

impl Ri1r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn stid(&self) -> u16 {
        self.bits.get_range(21u8..32u8) as u16
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn exid(&self) -> u32 {
        self.bits.get_range(3u8..21u8) as u32
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn ide(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn rtr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
}

impl Default for Ri1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ri1r { bits: 0u32 }
    }
}

impl Ri1r {
    # [ doc = "Bits 21:31 - STID" ]
    pub fn set_stid(&mut self, value: u16) {
        self.bits.set_range(21u8..32u8, value as u32);
    }
    # [ doc = "Bits 3:20 - EXID" ]
    pub fn set_exid(&mut self, value: u32) {
        self.bits.set_range(3u8..21u8, value as u32);
    }
    # [ doc = "Bit 2 - IDE" ]
    pub fn set_ide(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - RTR" ]
    pub fn set_rtr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdt1r {
    bits: u32,
}

impl Rdt1r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn time(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
    # [ doc = "Bits 8:15 - FMI" ]
    pub fn fmi(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn dlc(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Rdt1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdt1r { bits: 0u32 }
    }
}

impl Rdt1r {
    # [ doc = "Bits 16:31 - TIME" ]
    pub fn set_time(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
    # [ doc = "Bits 8:15 - FMI" ]
    pub fn set_fmi(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:3 - DLC" ]
    pub fn set_dlc(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdl1r {
    bits: u32,
}

impl Rdl1r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn data3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn data2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn data1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn data0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Rdl1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdl1r { bits: 0u32 }
    }
}

impl Rdl1r {
    # [ doc = "Bits 24:31 - DATA3" ]
    pub fn set_data3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA2" ]
    pub fn set_data2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA1" ]
    pub fn set_data1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA0" ]
    pub fn set_data0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rdh1r {
    bits: u32,
}

impl Rdh1r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn data7(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn data6(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn data5(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn data4(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Rdh1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rdh1r { bits: 0u32 }
    }
}

impl Rdh1r {
    # [ doc = "Bits 24:31 - DATA7" ]
    pub fn set_data7(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
    # [ doc = "Bits 16:23 - DATA6" ]
    pub fn set_data6(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 8:15 - DATA5" ]
    pub fn set_data5(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DATA4" ]
    pub fn set_data4(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Fmr {
    bits: u32,
}

impl Fmr {
    # [ doc = "Bits 8:13 - CAN2SB" ]
    pub fn can2sb(&self) -> u8 {
        self.bits.get_range(8u8..14u8) as u8
    }
    # [ doc = "Bit 0 - FINIT" ]
    pub fn finit(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Fmr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Fmr { bits: 706481665u32 }
    }
}

impl Fmr {
    # [ doc = "Bits 8:13 - CAN2SB" ]
    pub fn set_can2sb(&mut self, value: u8) {
        self.bits.set_range(8u8..14u8, value as u32);
    }
    # [ doc = "Bit 0 - FINIT" ]
    pub fn set_finit(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Fm1r {
    bits: u32,
}

impl Fm1r {
    # [ doc = "Bit 0 - Filter mode" ]
    pub fn fbm0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter mode" ]
    pub fn fbm1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter mode" ]
    pub fn fbm2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter mode" ]
    pub fn fbm3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter mode" ]
    pub fn fbm4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter mode" ]
    pub fn fbm5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter mode" ]
    pub fn fbm6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter mode" ]
    pub fn fbm7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter mode" ]
    pub fn fbm8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter mode" ]
    pub fn fbm9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter mode" ]
    pub fn fbm10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter mode" ]
    pub fn fbm11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter mode" ]
    pub fn fbm12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter mode" ]
    pub fn fbm13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter mode" ]
    pub fn fbm14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter mode" ]
    pub fn fbm15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter mode" ]
    pub fn fbm16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter mode" ]
    pub fn fbm17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter mode" ]
    pub fn fbm18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter mode" ]
    pub fn fbm19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter mode" ]
    pub fn fbm20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter mode" ]
    pub fn fbm21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter mode" ]
    pub fn fbm22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter mode" ]
    pub fn fbm23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter mode" ]
    pub fn fbm24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter mode" ]
    pub fn fbm25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter mode" ]
    pub fn fbm26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter mode" ]
    pub fn fbm27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
}

impl Default for Fm1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Fm1r { bits: 0u32 }
    }
}

impl Fm1r {
    # [ doc = "Bit 0 - Filter mode" ]
    pub fn set_fbm0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter mode" ]
    pub fn set_fbm1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter mode" ]
    pub fn set_fbm2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter mode" ]
    pub fn set_fbm3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter mode" ]
    pub fn set_fbm4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter mode" ]
    pub fn set_fbm5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter mode" ]
    pub fn set_fbm6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter mode" ]
    pub fn set_fbm7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter mode" ]
    pub fn set_fbm8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter mode" ]
    pub fn set_fbm9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter mode" ]
    pub fn set_fbm10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter mode" ]
    pub fn set_fbm11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter mode" ]
    pub fn set_fbm12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter mode" ]
    pub fn set_fbm13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter mode" ]
    pub fn set_fbm14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter mode" ]
    pub fn set_fbm15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter mode" ]
    pub fn set_fbm16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter mode" ]
    pub fn set_fbm17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter mode" ]
    pub fn set_fbm18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter mode" ]
    pub fn set_fbm19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter mode" ]
    pub fn set_fbm20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter mode" ]
    pub fn set_fbm21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter mode" ]
    pub fn set_fbm22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter mode" ]
    pub fn set_fbm23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter mode" ]
    pub fn set_fbm24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter mode" ]
    pub fn set_fbm25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter mode" ]
    pub fn set_fbm26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter mode" ]
    pub fn set_fbm27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Fs1r {
    bits: u32,
}

impl Fs1r {
    # [ doc = "Bit 0 - Filter scale configuration" ]
    pub fn fsc0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter scale configuration" ]
    pub fn fsc1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter scale configuration" ]
    pub fn fsc2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter scale configuration" ]
    pub fn fsc3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter scale configuration" ]
    pub fn fsc4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter scale configuration" ]
    pub fn fsc5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter scale configuration" ]
    pub fn fsc6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter scale configuration" ]
    pub fn fsc7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter scale configuration" ]
    pub fn fsc8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter scale configuration" ]
    pub fn fsc9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter scale configuration" ]
    pub fn fsc10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter scale configuration" ]
    pub fn fsc11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter scale configuration" ]
    pub fn fsc12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter scale configuration" ]
    pub fn fsc13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter scale configuration" ]
    pub fn fsc14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter scale configuration" ]
    pub fn fsc15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter scale configuration" ]
    pub fn fsc16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter scale configuration" ]
    pub fn fsc17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter scale configuration" ]
    pub fn fsc18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter scale configuration" ]
    pub fn fsc19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter scale configuration" ]
    pub fn fsc20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter scale configuration" ]
    pub fn fsc21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter scale configuration" ]
    pub fn fsc22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter scale configuration" ]
    pub fn fsc23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter scale configuration" ]
    pub fn fsc24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter scale configuration" ]
    pub fn fsc25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter scale configuration" ]
    pub fn fsc26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter scale configuration" ]
    pub fn fsc27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
}

impl Default for Fs1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Fs1r { bits: 0u32 }
    }
}

impl Fs1r {
    # [ doc = "Bit 0 - Filter scale configuration" ]
    pub fn set_fsc0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter scale configuration" ]
    pub fn set_fsc1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter scale configuration" ]
    pub fn set_fsc2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter scale configuration" ]
    pub fn set_fsc3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter scale configuration" ]
    pub fn set_fsc4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter scale configuration" ]
    pub fn set_fsc5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter scale configuration" ]
    pub fn set_fsc6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter scale configuration" ]
    pub fn set_fsc7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter scale configuration" ]
    pub fn set_fsc8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter scale configuration" ]
    pub fn set_fsc9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter scale configuration" ]
    pub fn set_fsc10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter scale configuration" ]
    pub fn set_fsc11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter scale configuration" ]
    pub fn set_fsc12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter scale configuration" ]
    pub fn set_fsc13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter scale configuration" ]
    pub fn set_fsc14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter scale configuration" ]
    pub fn set_fsc15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter scale configuration" ]
    pub fn set_fsc16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter scale configuration" ]
    pub fn set_fsc17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter scale configuration" ]
    pub fn set_fsc18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter scale configuration" ]
    pub fn set_fsc19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter scale configuration" ]
    pub fn set_fsc20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter scale configuration" ]
    pub fn set_fsc21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter scale configuration" ]
    pub fn set_fsc22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter scale configuration" ]
    pub fn set_fsc23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter scale configuration" ]
    pub fn set_fsc24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter scale configuration" ]
    pub fn set_fsc25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter scale configuration" ]
    pub fn set_fsc26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter scale configuration" ]
    pub fn set_fsc27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ffa1r {
    bits: u32,
}

impl Ffa1r {
    # [ doc = "Bit 0 - Filter FIFO assignment for filter 0" ]
    pub fn ffa0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter FIFO assignment for filter 1" ]
    pub fn ffa1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter FIFO assignment for filter 2" ]
    pub fn ffa2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter FIFO assignment for filter 3" ]
    pub fn ffa3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter FIFO assignment for filter 4" ]
    pub fn ffa4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter FIFO assignment for filter 5" ]
    pub fn ffa5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter FIFO assignment for filter 6" ]
    pub fn ffa6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter FIFO assignment for filter 7" ]
    pub fn ffa7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter FIFO assignment for filter 8" ]
    pub fn ffa8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter FIFO assignment for filter 9" ]
    pub fn ffa9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter FIFO assignment for filter 10" ]
    pub fn ffa10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter FIFO assignment for filter 11" ]
    pub fn ffa11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter FIFO assignment for filter 12" ]
    pub fn ffa12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter FIFO assignment for filter 13" ]
    pub fn ffa13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter FIFO assignment for filter 14" ]
    pub fn ffa14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter FIFO assignment for filter 15" ]
    pub fn ffa15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter FIFO assignment for filter 16" ]
    pub fn ffa16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter FIFO assignment for filter 17" ]
    pub fn ffa17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter FIFO assignment for filter 18" ]
    pub fn ffa18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter FIFO assignment for filter 19" ]
    pub fn ffa19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter FIFO assignment for filter 20" ]
    pub fn ffa20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter FIFO assignment for filter 21" ]
    pub fn ffa21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter FIFO assignment for filter 22" ]
    pub fn ffa22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter FIFO assignment for filter 23" ]
    pub fn ffa23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter FIFO assignment for filter 24" ]
    pub fn ffa24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter FIFO assignment for filter 25" ]
    pub fn ffa25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter FIFO assignment for filter 26" ]
    pub fn ffa26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter FIFO assignment for filter 27" ]
    pub fn ffa27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
}

impl Default for Ffa1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ffa1r { bits: 0u32 }
    }
}

impl Ffa1r {
    # [ doc = "Bit 0 - Filter FIFO assignment for filter 0" ]
    pub fn set_ffa0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter FIFO assignment for filter 1" ]
    pub fn set_ffa1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter FIFO assignment for filter 2" ]
    pub fn set_ffa2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter FIFO assignment for filter 3" ]
    pub fn set_ffa3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter FIFO assignment for filter 4" ]
    pub fn set_ffa4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter FIFO assignment for filter 5" ]
    pub fn set_ffa5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter FIFO assignment for filter 6" ]
    pub fn set_ffa6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter FIFO assignment for filter 7" ]
    pub fn set_ffa7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter FIFO assignment for filter 8" ]
    pub fn set_ffa8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter FIFO assignment for filter 9" ]
    pub fn set_ffa9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter FIFO assignment for filter 10" ]
    pub fn set_ffa10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter FIFO assignment for filter 11" ]
    pub fn set_ffa11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter FIFO assignment for filter 12" ]
    pub fn set_ffa12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter FIFO assignment for filter 13" ]
    pub fn set_ffa13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter FIFO assignment for filter 14" ]
    pub fn set_ffa14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter FIFO assignment for filter 15" ]
    pub fn set_ffa15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter FIFO assignment for filter 16" ]
    pub fn set_ffa16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter FIFO assignment for filter 17" ]
    pub fn set_ffa17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter FIFO assignment for filter 18" ]
    pub fn set_ffa18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter FIFO assignment for filter 19" ]
    pub fn set_ffa19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter FIFO assignment for filter 20" ]
    pub fn set_ffa20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter FIFO assignment for filter 21" ]
    pub fn set_ffa21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter FIFO assignment for filter 22" ]
    pub fn set_ffa22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter FIFO assignment for filter 23" ]
    pub fn set_ffa23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter FIFO assignment for filter 24" ]
    pub fn set_ffa24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter FIFO assignment for filter 25" ]
    pub fn set_ffa25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter FIFO assignment for filter 26" ]
    pub fn set_ffa26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter FIFO assignment for filter 27" ]
    pub fn set_ffa27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Fa1r {
    bits: u32,
}

impl Fa1r {
    # [ doc = "Bit 0 - Filter active" ]
    pub fn fact0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter active" ]
    pub fn fact1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter active" ]
    pub fn fact2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter active" ]
    pub fn fact3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter active" ]
    pub fn fact4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter active" ]
    pub fn fact5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter active" ]
    pub fn fact6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter active" ]
    pub fn fact7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter active" ]
    pub fn fact8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter active" ]
    pub fn fact9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter active" ]
    pub fn fact10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter active" ]
    pub fn fact11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter active" ]
    pub fn fact12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter active" ]
    pub fn fact13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter active" ]
    pub fn fact14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter active" ]
    pub fn fact15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter active" ]
    pub fn fact16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter active" ]
    pub fn fact17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter active" ]
    pub fn fact18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter active" ]
    pub fn fact19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter active" ]
    pub fn fact20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter active" ]
    pub fn fact21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter active" ]
    pub fn fact22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter active" ]
    pub fn fact23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter active" ]
    pub fn fact24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter active" ]
    pub fn fact25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter active" ]
    pub fn fact26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter active" ]
    pub fn fact27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
}

impl Default for Fa1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Fa1r { bits: 0u32 }
    }
}

impl Fa1r {
    # [ doc = "Bit 0 - Filter active" ]
    pub fn set_fact0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter active" ]
    pub fn set_fact1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter active" ]
    pub fn set_fact2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter active" ]
    pub fn set_fact3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter active" ]
    pub fn set_fact4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter active" ]
    pub fn set_fact5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter active" ]
    pub fn set_fact6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter active" ]
    pub fn set_fact7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter active" ]
    pub fn set_fact8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter active" ]
    pub fn set_fact9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter active" ]
    pub fn set_fact10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter active" ]
    pub fn set_fact11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter active" ]
    pub fn set_fact12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter active" ]
    pub fn set_fact13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter active" ]
    pub fn set_fact14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter active" ]
    pub fn set_fact15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter active" ]
    pub fn set_fact16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter active" ]
    pub fn set_fact17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter active" ]
    pub fn set_fact18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter active" ]
    pub fn set_fact19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter active" ]
    pub fn set_fact20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter active" ]
    pub fn set_fact21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter active" ]
    pub fn set_fact22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter active" ]
    pub fn set_fact23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter active" ]
    pub fn set_fact24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter active" ]
    pub fn set_fact25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter active" ]
    pub fn set_fact26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter active" ]
    pub fn set_fact27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F0r1 {
    bits: u32,
}

impl F0r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F0r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F0r1 { bits: 0u32 }
    }
}

impl F0r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F0r2 {
    bits: u32,
}

impl F0r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F0r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F0r2 { bits: 0u32 }
    }
}

impl F0r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F1r1 {
    bits: u32,
}

impl F1r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F1r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F1r1 { bits: 0u32 }
    }
}

impl F1r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F1r2 {
    bits: u32,
}

impl F1r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F1r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F1r2 { bits: 0u32 }
    }
}

impl F1r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F2r1 {
    bits: u32,
}

impl F2r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F2r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F2r1 { bits: 0u32 }
    }
}

impl F2r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F2r2 {
    bits: u32,
}

impl F2r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F2r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F2r2 { bits: 0u32 }
    }
}

impl F2r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F3r1 {
    bits: u32,
}

impl F3r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F3r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F3r1 { bits: 0u32 }
    }
}

impl F3r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F3r2 {
    bits: u32,
}

impl F3r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F3r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F3r2 { bits: 0u32 }
    }
}

impl F3r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F4r1 {
    bits: u32,
}

impl F4r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F4r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F4r1 { bits: 0u32 }
    }
}

impl F4r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F4r2 {
    bits: u32,
}

impl F4r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F4r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F4r2 { bits: 0u32 }
    }
}

impl F4r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F5r1 {
    bits: u32,
}

impl F5r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F5r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F5r1 { bits: 0u32 }
    }
}

impl F5r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F5r2 {
    bits: u32,
}

impl F5r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F5r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F5r2 { bits: 0u32 }
    }
}

impl F5r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F6r1 {
    bits: u32,
}

impl F6r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F6r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F6r1 { bits: 0u32 }
    }
}

impl F6r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F6r2 {
    bits: u32,
}

impl F6r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F6r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F6r2 { bits: 0u32 }
    }
}

impl F6r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F7r1 {
    bits: u32,
}

impl F7r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F7r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F7r1 { bits: 0u32 }
    }
}

impl F7r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F7r2 {
    bits: u32,
}

impl F7r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F7r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F7r2 { bits: 0u32 }
    }
}

impl F7r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F8r1 {
    bits: u32,
}

impl F8r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F8r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F8r1 { bits: 0u32 }
    }
}

impl F8r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F8r2 {
    bits: u32,
}

impl F8r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F8r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F8r2 { bits: 0u32 }
    }
}

impl F8r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F9r1 {
    bits: u32,
}

impl F9r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F9r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F9r1 { bits: 0u32 }
    }
}

impl F9r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F9r2 {
    bits: u32,
}

impl F9r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F9r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F9r2 { bits: 0u32 }
    }
}

impl F9r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F10r1 {
    bits: u32,
}

impl F10r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F10r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F10r1 { bits: 0u32 }
    }
}

impl F10r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F10r2 {
    bits: u32,
}

impl F10r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F10r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F10r2 { bits: 0u32 }
    }
}

impl F10r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F11r1 {
    bits: u32,
}

impl F11r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F11r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F11r1 { bits: 0u32 }
    }
}

impl F11r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F11r2 {
    bits: u32,
}

impl F11r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F11r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F11r2 { bits: 0u32 }
    }
}

impl F11r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F12r1 {
    bits: u32,
}

impl F12r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F12r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F12r1 { bits: 0u32 }
    }
}

impl F12r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F12r2 {
    bits: u32,
}

impl F12r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F12r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F12r2 { bits: 0u32 }
    }
}

impl F12r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F13r1 {
    bits: u32,
}

impl F13r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F13r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F13r1 { bits: 0u32 }
    }
}

impl F13r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F13r2 {
    bits: u32,
}

impl F13r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F13r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F13r2 { bits: 0u32 }
    }
}

impl F13r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F14r1 {
    bits: u32,
}

impl F14r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F14r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F14r1 { bits: 0u32 }
    }
}

impl F14r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F14r2 {
    bits: u32,
}

impl F14r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F14r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F14r2 { bits: 0u32 }
    }
}

impl F14r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F15r1 {
    bits: u32,
}

impl F15r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F15r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F15r1 { bits: 0u32 }
    }
}

impl F15r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F15r2 {
    bits: u32,
}

impl F15r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F15r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F15r2 { bits: 0u32 }
    }
}

impl F15r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F16r1 {
    bits: u32,
}

impl F16r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F16r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F16r1 { bits: 0u32 }
    }
}

impl F16r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F16r2 {
    bits: u32,
}

impl F16r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F16r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F16r2 { bits: 0u32 }
    }
}

impl F16r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F17r1 {
    bits: u32,
}

impl F17r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F17r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F17r1 { bits: 0u32 }
    }
}

impl F17r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F17r2 {
    bits: u32,
}

impl F17r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F17r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F17r2 { bits: 0u32 }
    }
}

impl F17r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F18r1 {
    bits: u32,
}

impl F18r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F18r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F18r1 { bits: 0u32 }
    }
}

impl F18r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F18r2 {
    bits: u32,
}

impl F18r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F18r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F18r2 { bits: 0u32 }
    }
}

impl F18r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F19r1 {
    bits: u32,
}

impl F19r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F19r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F19r1 { bits: 0u32 }
    }
}

impl F19r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F19r2 {
    bits: u32,
}

impl F19r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F19r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F19r2 { bits: 0u32 }
    }
}

impl F19r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F20r1 {
    bits: u32,
}

impl F20r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F20r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F20r1 { bits: 0u32 }
    }
}

impl F20r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F20r2 {
    bits: u32,
}

impl F20r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F20r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F20r2 { bits: 0u32 }
    }
}

impl F20r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F21r1 {
    bits: u32,
}

impl F21r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F21r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F21r1 { bits: 0u32 }
    }
}

impl F21r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F21r2 {
    bits: u32,
}

impl F21r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F21r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F21r2 { bits: 0u32 }
    }
}

impl F21r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F22r1 {
    bits: u32,
}

impl F22r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F22r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F22r1 { bits: 0u32 }
    }
}

impl F22r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F22r2 {
    bits: u32,
}

impl F22r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F22r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F22r2 { bits: 0u32 }
    }
}

impl F22r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F23r1 {
    bits: u32,
}

impl F23r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F23r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F23r1 { bits: 0u32 }
    }
}

impl F23r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F23r2 {
    bits: u32,
}

impl F23r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F23r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F23r2 { bits: 0u32 }
    }
}

impl F23r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F24r1 {
    bits: u32,
}

impl F24r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F24r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F24r1 { bits: 0u32 }
    }
}

impl F24r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F24r2 {
    bits: u32,
}

impl F24r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F24r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F24r2 { bits: 0u32 }
    }
}

impl F24r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F25r1 {
    bits: u32,
}

impl F25r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F25r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F25r1 { bits: 0u32 }
    }
}

impl F25r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F25r2 {
    bits: u32,
}

impl F25r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F25r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F25r2 { bits: 0u32 }
    }
}

impl F25r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F26r1 {
    bits: u32,
}

impl F26r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F26r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F26r1 { bits: 0u32 }
    }
}

impl F26r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F26r2 {
    bits: u32,
}

impl F26r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F26r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F26r2 { bits: 0u32 }
    }
}

impl F26r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F27r1 {
    bits: u32,
}

impl F27r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F27r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F27r1 { bits: 0u32 }
    }
}

impl F27r1 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct F27r2 {
    bits: u32,
}

impl F27r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn fb0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn fb1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn fb2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn fb3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn fb4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn fb5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn fb6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn fb7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn fb8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn fb9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn fb10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn fb11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn fb12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn fb13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn fb14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn fb15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn fb16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn fb17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn fb18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn fb19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn fb20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn fb21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn fb22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn fb23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn fb24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn fb25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn fb26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn fb27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn fb28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn fb29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn fb30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn fb31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for F27r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        F27r2 { bits: 0u32 }
    }
}

impl F27r2 {
    # [ doc = "Bit 0 - Filter bits" ]
    pub fn set_fb0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Filter bits" ]
    pub fn set_fb1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Filter bits" ]
    pub fn set_fb2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Filter bits" ]
    pub fn set_fb3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Filter bits" ]
    pub fn set_fb4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Filter bits" ]
    pub fn set_fb5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Filter bits" ]
    pub fn set_fb6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Filter bits" ]
    pub fn set_fb7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Filter bits" ]
    pub fn set_fb8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Filter bits" ]
    pub fn set_fb9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Filter bits" ]
    pub fn set_fb10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Filter bits" ]
    pub fn set_fb11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Filter bits" ]
    pub fn set_fb12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Filter bits" ]
    pub fn set_fb13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Filter bits" ]
    pub fn set_fb14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Filter bits" ]
    pub fn set_fb15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Filter bits" ]
    pub fn set_fb16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Filter bits" ]
    pub fn set_fb17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Filter bits" ]
    pub fn set_fb18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Filter bits" ]
    pub fn set_fb19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Filter bits" ]
    pub fn set_fb20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Filter bits" ]
    pub fn set_fb21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Filter bits" ]
    pub fn set_fb22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - Filter bits" ]
    pub fn set_fb23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - Filter bits" ]
    pub fn set_fb24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - Filter bits" ]
    pub fn set_fb25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - Filter bits" ]
    pub fn set_fb26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Filter bits" ]
    pub fn set_fb27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - Filter bits" ]
    pub fn set_fb28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - Filter bits" ]
    pub fn set_fb29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - Filter bits" ]
    pub fn set_fb30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - Filter bits" ]
    pub fn set_fb31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}
