// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Hash processor" ]
# [ repr ( C ) ]
pub struct Hash {
    # [ doc = "0x00 - control register" ]
    pub cr: volatile::ReadWrite<Cr>,
    # [ doc = "0x04 - data input register" ]
    pub din: volatile::ReadWrite<Din>,
    # [ doc = "0x08 - start register" ]
    pub str: volatile::ReadWrite<Str>,
    # [ doc = "0x0c - digest registers" ]
    pub hr0: volatile::ReadOnly<Hr0>,
    # [ doc = "0x10 - digest registers" ]
    pub hr1: volatile::ReadOnly<Hr1>,
    # [ doc = "0x14 - digest registers" ]
    pub hr2: volatile::ReadOnly<Hr2>,
    # [ doc = "0x18 - digest registers" ]
    pub hr3: volatile::ReadOnly<Hr3>,
    # [ doc = "0x1c - digest registers" ]
    pub hr4: volatile::ReadOnly<Hr4>,
    # [ doc = "0x20 - interrupt enable register" ]
    pub imr: volatile::ReadWrite<Imr>,
    # [ doc = "0x24 - status register" ]
    pub sr: volatile::ReadWrite<Sr>,
    _reserved0: [u8; 208usize],
    # [ doc = "0xf8 - context swap registers" ]
    pub csr0: volatile::ReadWrite<Csr0>,
    # [ doc = "0xfc - context swap registers" ]
    pub csr1: volatile::ReadWrite<Csr1>,
    # [ doc = "0x100 - context swap registers" ]
    pub csr2: volatile::ReadWrite<Csr2>,
    # [ doc = "0x104 - context swap registers" ]
    pub csr3: volatile::ReadWrite<Csr3>,
    # [ doc = "0x108 - context swap registers" ]
    pub csr4: volatile::ReadWrite<Csr4>,
    # [ doc = "0x10c - context swap registers" ]
    pub csr5: volatile::ReadWrite<Csr5>,
    # [ doc = "0x110 - context swap registers" ]
    pub csr6: volatile::ReadWrite<Csr6>,
    # [ doc = "0x114 - context swap registers" ]
    pub csr7: volatile::ReadWrite<Csr7>,
    # [ doc = "0x118 - context swap registers" ]
    pub csr8: volatile::ReadWrite<Csr8>,
    # [ doc = "0x11c - context swap registers" ]
    pub csr9: volatile::ReadWrite<Csr9>,
    # [ doc = "0x120 - context swap registers" ]
    pub csr10: volatile::ReadWrite<Csr10>,
    # [ doc = "0x124 - context swap registers" ]
    pub csr11: volatile::ReadWrite<Csr11>,
    # [ doc = "0x128 - context swap registers" ]
    pub csr12: volatile::ReadWrite<Csr12>,
    # [ doc = "0x12c - context swap registers" ]
    pub csr13: volatile::ReadWrite<Csr13>,
    # [ doc = "0x130 - context swap registers" ]
    pub csr14: volatile::ReadWrite<Csr14>,
    # [ doc = "0x134 - context swap registers" ]
    pub csr15: volatile::ReadWrite<Csr15>,
    # [ doc = "0x138 - context swap registers" ]
    pub csr16: volatile::ReadWrite<Csr16>,
    # [ doc = "0x13c - context swap registers" ]
    pub csr17: volatile::ReadWrite<Csr17>,
    # [ doc = "0x140 - context swap registers" ]
    pub csr18: volatile::ReadWrite<Csr18>,
    # [ doc = "0x144 - context swap registers" ]
    pub csr19: volatile::ReadWrite<Csr19>,
    # [ doc = "0x148 - context swap registers" ]
    pub csr20: volatile::ReadWrite<Csr20>,
    # [ doc = "0x14c - context swap registers" ]
    pub csr21: volatile::ReadWrite<Csr21>,
    # [ doc = "0x150 - context swap registers" ]
    pub csr22: volatile::ReadWrite<Csr22>,
    # [ doc = "0x154 - context swap registers" ]
    pub csr23: volatile::ReadWrite<Csr23>,
    # [ doc = "0x158 - context swap registers" ]
    pub csr24: volatile::ReadWrite<Csr24>,
    # [ doc = "0x15c - context swap registers" ]
    pub csr25: volatile::ReadWrite<Csr25>,
    # [ doc = "0x160 - context swap registers" ]
    pub csr26: volatile::ReadWrite<Csr26>,
    # [ doc = "0x164 - context swap registers" ]
    pub csr27: volatile::ReadWrite<Csr27>,
    # [ doc = "0x168 - context swap registers" ]
    pub csr28: volatile::ReadWrite<Csr28>,
    # [ doc = "0x16c - context swap registers" ]
    pub csr29: volatile::ReadWrite<Csr29>,
    # [ doc = "0x170 - context swap registers" ]
    pub csr30: volatile::ReadWrite<Csr30>,
    # [ doc = "0x174 - context swap registers" ]
    pub csr31: volatile::ReadWrite<Csr31>,
    # [ doc = "0x178 - context swap registers" ]
    pub csr32: volatile::ReadWrite<Csr32>,
    # [ doc = "0x17c - context swap registers" ]
    pub csr33: volatile::ReadWrite<Csr33>,
    # [ doc = "0x180 - context swap registers" ]
    pub csr34: volatile::ReadWrite<Csr34>,
    # [ doc = "0x184 - context swap registers" ]
    pub csr35: volatile::ReadWrite<Csr35>,
    # [ doc = "0x188 - context swap registers" ]
    pub csr36: volatile::ReadWrite<Csr36>,
    # [ doc = "0x18c - context swap registers" ]
    pub csr37: volatile::ReadWrite<Csr37>,
    # [ doc = "0x190 - context swap registers" ]
    pub csr38: volatile::ReadWrite<Csr38>,
    # [ doc = "0x194 - context swap registers" ]
    pub csr39: volatile::ReadWrite<Csr39>,
    # [ doc = "0x198 - context swap registers" ]
    pub csr40: volatile::ReadWrite<Csr40>,
    # [ doc = "0x19c - context swap registers" ]
    pub csr41: volatile::ReadWrite<Csr41>,
    # [ doc = "0x1a0 - context swap registers" ]
    pub csr42: volatile::ReadWrite<Csr42>,
    # [ doc = "0x1a4 - context swap registers" ]
    pub csr43: volatile::ReadWrite<Csr43>,
    # [ doc = "0x1a8 - context swap registers" ]
    pub csr44: volatile::ReadWrite<Csr44>,
    # [ doc = "0x1ac - context swap registers" ]
    pub csr45: volatile::ReadWrite<Csr45>,
    # [ doc = "0x1b0 - context swap registers" ]
    pub csr46: volatile::ReadWrite<Csr46>,
    # [ doc = "0x1b4 - context swap registers" ]
    pub csr47: volatile::ReadWrite<Csr47>,
    # [ doc = "0x1b8 - context swap registers" ]
    pub csr48: volatile::ReadWrite<Csr48>,
    # [ doc = "0x1bc - context swap registers" ]
    pub csr49: volatile::ReadWrite<Csr49>,
    # [ doc = "0x1c0 - context swap registers" ]
    pub csr50: volatile::ReadWrite<Csr50>,
    # [ doc = "0x1c4 - context swap registers" ]
    pub csr51: volatile::ReadWrite<Csr51>,
    # [ doc = "0x1c8 - context swap registers" ]
    pub csr52: volatile::ReadWrite<Csr52>,
    # [ doc = "0x1cc - context swap registers" ]
    pub csr53: volatile::ReadWrite<Csr53>,
    _reserved1: [u8; 320usize],
    # [ doc = "0x310 - HASH digest register" ]
    pub hash_hr0: volatile::ReadOnly<HashHr0>,
    # [ doc = "0x314 - read-only" ]
    pub hash_hr1: volatile::ReadOnly<HashHr1>,
    # [ doc = "0x318 - read-only" ]
    pub hash_hr2: volatile::ReadOnly<HashHr2>,
    # [ doc = "0x31c - read-only" ]
    pub hash_hr3: volatile::ReadOnly<HashHr3>,
    # [ doc = "0x320 - read-only" ]
    pub hash_hr4: volatile::ReadOnly<HashHr4>,
    # [ doc = "0x324 - read-only" ]
    pub hash_hr5: volatile::ReadOnly<HashHr5>,
    # [ doc = "0x328 - read-only" ]
    pub hash_hr6: volatile::ReadOnly<HashHr6>,
    # [ doc = "0x32c - read-only" ]
    pub hash_hr7: volatile::ReadOnly<HashHr7>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr {
    bits: u32,
}

impl Cr {
    # [ doc = "Bit 3 - DMA enable" ]
    pub fn dmae(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 4:5 - Data type selection" ]
    pub fn datatype(&self) -> u8 {
        self.bits.get_range(4u8..6u8) as u8
    }
    # [ doc = "Bit 6 - Mode selection" ]
    pub fn mode(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Algorithm selection" ]
    pub fn algo0(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bits 8:11 - Number of words already pushed" ]
    pub fn nbw(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bit 12 - DIN not empty" ]
    pub fn dinne(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Multiple DMA Transfers" ]
    pub fn mdmat(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 16 - Long key selection" ]
    pub fn lkey(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 18 - ALGO" ]
    pub fn algo1(&self) -> bool {
        self.bits.get_bit(18u8)
    }
}

impl Default for Cr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr { bits: 0u32 }
    }
}

impl Cr {
    # [ doc = "Bit 2 - Initialize message digest calculation" ]
    pub fn set_init(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - DMA enable" ]
    pub fn set_dmae(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bits 4:5 - Data type selection" ]
    pub fn set_datatype(&mut self, value: u8) {
        self.bits.set_range(4u8..6u8, value as u32);
    }
    # [ doc = "Bit 6 - Mode selection" ]
    pub fn set_mode(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Algorithm selection" ]
    pub fn set_algo0(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 13 - Multiple DMA Transfers" ]
    pub fn set_mdmat(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 16 - Long key selection" ]
    pub fn set_lkey(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 18 - ALGO" ]
    pub fn set_algo1(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Din {
    bits: u32,
}

impl Din {
    # [ doc = "Bits 0:31 - Data input" ]
    pub fn datain(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Din {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Din { bits: 0u32 }
    }
}

impl Din {
    # [ doc = "Bits 0:31 - Data input" ]
    pub fn set_datain(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Str {
    bits: u32,
}

impl Str {
    # [ doc = "Bits 0:4 - Number of valid bits in the last word of the message" ]
    pub fn nblw(&self) -> u8 {
        self.bits.get_range(0u8..5u8) as u8
    }
}

impl Default for Str {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Str { bits: 0u32 }
    }
}

impl Str {
    # [ doc = "Bit 8 - Digest calculation" ]
    pub fn set_dcal(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 0:4 - Number of valid bits in the last word of the message" ]
    pub fn set_nblw(&mut self, value: u8) {
        self.bits.set_range(0u8..5u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Hr0 {
    bits: u32,
}

impl Hr0 {
    # [ doc = "Bits 0:31 - H0" ]
    pub fn h0(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Hr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Hr0 { bits: 0u32 }
    }
}

impl Hr0 {
    # [ doc = "Bits 0:31 - H0" ]
    pub fn set_h0(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Hr1 {
    bits: u32,
}

impl Hr1 {
    # [ doc = "Bits 0:31 - H1" ]
    pub fn h1(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Hr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Hr1 { bits: 0u32 }
    }
}

impl Hr1 {
    # [ doc = "Bits 0:31 - H1" ]
    pub fn set_h1(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Hr2 {
    bits: u32,
}

impl Hr2 {
    # [ doc = "Bits 0:31 - H2" ]
    pub fn h2(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Hr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Hr2 { bits: 0u32 }
    }
}

impl Hr2 {
    # [ doc = "Bits 0:31 - H2" ]
    pub fn set_h2(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Hr3 {
    bits: u32,
}

impl Hr3 {
    # [ doc = "Bits 0:31 - H3" ]
    pub fn h3(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Hr3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Hr3 { bits: 0u32 }
    }
}

impl Hr3 {
    # [ doc = "Bits 0:31 - H3" ]
    pub fn set_h3(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Hr4 {
    bits: u32,
}

impl Hr4 {
    # [ doc = "Bits 0:31 - H4" ]
    pub fn h4(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Hr4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Hr4 { bits: 0u32 }
    }
}

impl Hr4 {
    # [ doc = "Bits 0:31 - H4" ]
    pub fn set_h4(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Imr {
    bits: u32,
}

impl Imr {
    # [ doc = "Bit 1 - Digest calculation completion interrupt enable" ]
    pub fn dcie(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Data input interrupt enable" ]
    pub fn dinie(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Imr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Imr { bits: 0u32 }
    }
}

impl Imr {
    # [ doc = "Bit 1 - Digest calculation completion interrupt enable" ]
    pub fn set_dcie(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Data input interrupt enable" ]
    pub fn set_dinie(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Sr {
    bits: u32,
}

impl Sr {
    # [ doc = "Bit 3 - Busy bit" ]
    pub fn busy(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - DMA Status" ]
    pub fn dmas(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - Digest calculation completion interrupt status" ]
    pub fn dcis(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Data input interrupt status" ]
    pub fn dinis(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Sr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Sr { bits: 1u32 }
    }
}

impl Sr {
    # [ doc = "Bit 1 - Digest calculation completion interrupt status" ]
    pub fn set_dcis(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Data input interrupt status" ]
    pub fn set_dinis(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr0 {
    bits: u32,
}

impl Csr0 {
    # [ doc = "Bits 0:31 - CSR0" ]
    pub fn csr0(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr0 { bits: 0u32 }
    }
}

impl Csr0 {
    # [ doc = "Bits 0:31 - CSR0" ]
    pub fn set_csr0(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr1 {
    bits: u32,
}

impl Csr1 {
    # [ doc = "Bits 0:31 - CSR1" ]
    pub fn csr1(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr1 { bits: 0u32 }
    }
}

impl Csr1 {
    # [ doc = "Bits 0:31 - CSR1" ]
    pub fn set_csr1(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr2 {
    bits: u32,
}

impl Csr2 {
    # [ doc = "Bits 0:31 - CSR2" ]
    pub fn csr2(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr2 { bits: 0u32 }
    }
}

impl Csr2 {
    # [ doc = "Bits 0:31 - CSR2" ]
    pub fn set_csr2(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr3 {
    bits: u32,
}

impl Csr3 {
    # [ doc = "Bits 0:31 - CSR3" ]
    pub fn csr3(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr3 { bits: 0u32 }
    }
}

impl Csr3 {
    # [ doc = "Bits 0:31 - CSR3" ]
    pub fn set_csr3(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr4 {
    bits: u32,
}

impl Csr4 {
    # [ doc = "Bits 0:31 - CSR4" ]
    pub fn csr4(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr4 { bits: 0u32 }
    }
}

impl Csr4 {
    # [ doc = "Bits 0:31 - CSR4" ]
    pub fn set_csr4(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr5 {
    bits: u32,
}

impl Csr5 {
    # [ doc = "Bits 0:31 - CSR5" ]
    pub fn csr5(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr5 { bits: 0u32 }
    }
}

impl Csr5 {
    # [ doc = "Bits 0:31 - CSR5" ]
    pub fn set_csr5(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr6 {
    bits: u32,
}

impl Csr6 {
    # [ doc = "Bits 0:31 - CSR6" ]
    pub fn csr6(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr6 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr6 { bits: 0u32 }
    }
}

impl Csr6 {
    # [ doc = "Bits 0:31 - CSR6" ]
    pub fn set_csr6(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr7 {
    bits: u32,
}

impl Csr7 {
    # [ doc = "Bits 0:31 - CSR7" ]
    pub fn csr7(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr7 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr7 { bits: 0u32 }
    }
}

impl Csr7 {
    # [ doc = "Bits 0:31 - CSR7" ]
    pub fn set_csr7(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr8 {
    bits: u32,
}

impl Csr8 {
    # [ doc = "Bits 0:31 - CSR8" ]
    pub fn csr8(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr8 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr8 { bits: 0u32 }
    }
}

impl Csr8 {
    # [ doc = "Bits 0:31 - CSR8" ]
    pub fn set_csr8(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr9 {
    bits: u32,
}

impl Csr9 {
    # [ doc = "Bits 0:31 - CSR9" ]
    pub fn csr9(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr9 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr9 { bits: 0u32 }
    }
}

impl Csr9 {
    # [ doc = "Bits 0:31 - CSR9" ]
    pub fn set_csr9(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr10 {
    bits: u32,
}

impl Csr10 {
    # [ doc = "Bits 0:31 - CSR10" ]
    pub fn csr10(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr10 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr10 { bits: 0u32 }
    }
}

impl Csr10 {
    # [ doc = "Bits 0:31 - CSR10" ]
    pub fn set_csr10(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr11 {
    bits: u32,
}

impl Csr11 {
    # [ doc = "Bits 0:31 - CSR11" ]
    pub fn csr11(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr11 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr11 { bits: 0u32 }
    }
}

impl Csr11 {
    # [ doc = "Bits 0:31 - CSR11" ]
    pub fn set_csr11(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr12 {
    bits: u32,
}

impl Csr12 {
    # [ doc = "Bits 0:31 - CSR12" ]
    pub fn csr12(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr12 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr12 { bits: 0u32 }
    }
}

impl Csr12 {
    # [ doc = "Bits 0:31 - CSR12" ]
    pub fn set_csr12(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr13 {
    bits: u32,
}

impl Csr13 {
    # [ doc = "Bits 0:31 - CSR13" ]
    pub fn csr13(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr13 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr13 { bits: 0u32 }
    }
}

impl Csr13 {
    # [ doc = "Bits 0:31 - CSR13" ]
    pub fn set_csr13(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr14 {
    bits: u32,
}

impl Csr14 {
    # [ doc = "Bits 0:31 - CSR14" ]
    pub fn csr14(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr14 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr14 { bits: 0u32 }
    }
}

impl Csr14 {
    # [ doc = "Bits 0:31 - CSR14" ]
    pub fn set_csr14(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr15 {
    bits: u32,
}

impl Csr15 {
    # [ doc = "Bits 0:31 - CSR15" ]
    pub fn csr15(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr15 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr15 { bits: 0u32 }
    }
}

impl Csr15 {
    # [ doc = "Bits 0:31 - CSR15" ]
    pub fn set_csr15(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr16 {
    bits: u32,
}

impl Csr16 {
    # [ doc = "Bits 0:31 - CSR16" ]
    pub fn csr16(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr16 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr16 { bits: 0u32 }
    }
}

impl Csr16 {
    # [ doc = "Bits 0:31 - CSR16" ]
    pub fn set_csr16(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr17 {
    bits: u32,
}

impl Csr17 {
    # [ doc = "Bits 0:31 - CSR17" ]
    pub fn csr17(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr17 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr17 { bits: 0u32 }
    }
}

impl Csr17 {
    # [ doc = "Bits 0:31 - CSR17" ]
    pub fn set_csr17(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr18 {
    bits: u32,
}

impl Csr18 {
    # [ doc = "Bits 0:31 - CSR18" ]
    pub fn csr18(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr18 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr18 { bits: 0u32 }
    }
}

impl Csr18 {
    # [ doc = "Bits 0:31 - CSR18" ]
    pub fn set_csr18(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr19 {
    bits: u32,
}

impl Csr19 {
    # [ doc = "Bits 0:31 - CSR19" ]
    pub fn csr19(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr19 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr19 { bits: 0u32 }
    }
}

impl Csr19 {
    # [ doc = "Bits 0:31 - CSR19" ]
    pub fn set_csr19(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr20 {
    bits: u32,
}

impl Csr20 {
    # [ doc = "Bits 0:31 - CSR20" ]
    pub fn csr20(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr20 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr20 { bits: 0u32 }
    }
}

impl Csr20 {
    # [ doc = "Bits 0:31 - CSR20" ]
    pub fn set_csr20(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr21 {
    bits: u32,
}

impl Csr21 {
    # [ doc = "Bits 0:31 - CSR21" ]
    pub fn csr21(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr21 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr21 { bits: 0u32 }
    }
}

impl Csr21 {
    # [ doc = "Bits 0:31 - CSR21" ]
    pub fn set_csr21(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr22 {
    bits: u32,
}

impl Csr22 {
    # [ doc = "Bits 0:31 - CSR22" ]
    pub fn csr22(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr22 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr22 { bits: 0u32 }
    }
}

impl Csr22 {
    # [ doc = "Bits 0:31 - CSR22" ]
    pub fn set_csr22(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr23 {
    bits: u32,
}

impl Csr23 {
    # [ doc = "Bits 0:31 - CSR23" ]
    pub fn csr23(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr23 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr23 { bits: 0u32 }
    }
}

impl Csr23 {
    # [ doc = "Bits 0:31 - CSR23" ]
    pub fn set_csr23(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr24 {
    bits: u32,
}

impl Csr24 {
    # [ doc = "Bits 0:31 - CSR24" ]
    pub fn csr24(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr24 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr24 { bits: 0u32 }
    }
}

impl Csr24 {
    # [ doc = "Bits 0:31 - CSR24" ]
    pub fn set_csr24(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr25 {
    bits: u32,
}

impl Csr25 {
    # [ doc = "Bits 0:31 - CSR25" ]
    pub fn csr25(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr25 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr25 { bits: 0u32 }
    }
}

impl Csr25 {
    # [ doc = "Bits 0:31 - CSR25" ]
    pub fn set_csr25(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr26 {
    bits: u32,
}

impl Csr26 {
    # [ doc = "Bits 0:31 - CSR26" ]
    pub fn csr26(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr26 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr26 { bits: 0u32 }
    }
}

impl Csr26 {
    # [ doc = "Bits 0:31 - CSR26" ]
    pub fn set_csr26(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr27 {
    bits: u32,
}

impl Csr27 {
    # [ doc = "Bits 0:31 - CSR27" ]
    pub fn csr27(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr27 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr27 { bits: 0u32 }
    }
}

impl Csr27 {
    # [ doc = "Bits 0:31 - CSR27" ]
    pub fn set_csr27(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr28 {
    bits: u32,
}

impl Csr28 {
    # [ doc = "Bits 0:31 - CSR28" ]
    pub fn csr28(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr28 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr28 { bits: 0u32 }
    }
}

impl Csr28 {
    # [ doc = "Bits 0:31 - CSR28" ]
    pub fn set_csr28(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr29 {
    bits: u32,
}

impl Csr29 {
    # [ doc = "Bits 0:31 - CSR29" ]
    pub fn csr29(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr29 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr29 { bits: 0u32 }
    }
}

impl Csr29 {
    # [ doc = "Bits 0:31 - CSR29" ]
    pub fn set_csr29(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr30 {
    bits: u32,
}

impl Csr30 {
    # [ doc = "Bits 0:31 - CSR30" ]
    pub fn csr30(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr30 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr30 { bits: 0u32 }
    }
}

impl Csr30 {
    # [ doc = "Bits 0:31 - CSR30" ]
    pub fn set_csr30(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr31 {
    bits: u32,
}

impl Csr31 {
    # [ doc = "Bits 0:31 - CSR31" ]
    pub fn csr31(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr31 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr31 { bits: 0u32 }
    }
}

impl Csr31 {
    # [ doc = "Bits 0:31 - CSR31" ]
    pub fn set_csr31(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr32 {
    bits: u32,
}

impl Csr32 {
    # [ doc = "Bits 0:31 - CSR32" ]
    pub fn csr32(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr32 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr32 { bits: 0u32 }
    }
}

impl Csr32 {
    # [ doc = "Bits 0:31 - CSR32" ]
    pub fn set_csr32(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr33 {
    bits: u32,
}

impl Csr33 {
    # [ doc = "Bits 0:31 - CSR33" ]
    pub fn csr33(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr33 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr33 { bits: 0u32 }
    }
}

impl Csr33 {
    # [ doc = "Bits 0:31 - CSR33" ]
    pub fn set_csr33(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr34 {
    bits: u32,
}

impl Csr34 {
    # [ doc = "Bits 0:31 - CSR34" ]
    pub fn csr34(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr34 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr34 { bits: 0u32 }
    }
}

impl Csr34 {
    # [ doc = "Bits 0:31 - CSR34" ]
    pub fn set_csr34(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr35 {
    bits: u32,
}

impl Csr35 {
    # [ doc = "Bits 0:31 - CSR35" ]
    pub fn csr35(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr35 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr35 { bits: 0u32 }
    }
}

impl Csr35 {
    # [ doc = "Bits 0:31 - CSR35" ]
    pub fn set_csr35(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr36 {
    bits: u32,
}

impl Csr36 {
    # [ doc = "Bits 0:31 - CSR36" ]
    pub fn csr36(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr36 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr36 { bits: 0u32 }
    }
}

impl Csr36 {
    # [ doc = "Bits 0:31 - CSR36" ]
    pub fn set_csr36(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr37 {
    bits: u32,
}

impl Csr37 {
    # [ doc = "Bits 0:31 - CSR37" ]
    pub fn csr37(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr37 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr37 { bits: 0u32 }
    }
}

impl Csr37 {
    # [ doc = "Bits 0:31 - CSR37" ]
    pub fn set_csr37(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr38 {
    bits: u32,
}

impl Csr38 {
    # [ doc = "Bits 0:31 - CSR38" ]
    pub fn csr38(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr38 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr38 { bits: 0u32 }
    }
}

impl Csr38 {
    # [ doc = "Bits 0:31 - CSR38" ]
    pub fn set_csr38(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr39 {
    bits: u32,
}

impl Csr39 {
    # [ doc = "Bits 0:31 - CSR39" ]
    pub fn csr39(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr39 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr39 { bits: 0u32 }
    }
}

impl Csr39 {
    # [ doc = "Bits 0:31 - CSR39" ]
    pub fn set_csr39(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr40 {
    bits: u32,
}

impl Csr40 {
    # [ doc = "Bits 0:31 - CSR40" ]
    pub fn csr40(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr40 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr40 { bits: 0u32 }
    }
}

impl Csr40 {
    # [ doc = "Bits 0:31 - CSR40" ]
    pub fn set_csr40(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr41 {
    bits: u32,
}

impl Csr41 {
    # [ doc = "Bits 0:31 - CSR41" ]
    pub fn csr41(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr41 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr41 { bits: 0u32 }
    }
}

impl Csr41 {
    # [ doc = "Bits 0:31 - CSR41" ]
    pub fn set_csr41(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr42 {
    bits: u32,
}

impl Csr42 {
    # [ doc = "Bits 0:31 - CSR42" ]
    pub fn csr42(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr42 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr42 { bits: 0u32 }
    }
}

impl Csr42 {
    # [ doc = "Bits 0:31 - CSR42" ]
    pub fn set_csr42(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr43 {
    bits: u32,
}

impl Csr43 {
    # [ doc = "Bits 0:31 - CSR43" ]
    pub fn csr43(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr43 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr43 { bits: 0u32 }
    }
}

impl Csr43 {
    # [ doc = "Bits 0:31 - CSR43" ]
    pub fn set_csr43(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr44 {
    bits: u32,
}

impl Csr44 {
    # [ doc = "Bits 0:31 - CSR44" ]
    pub fn csr44(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr44 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr44 { bits: 0u32 }
    }
}

impl Csr44 {
    # [ doc = "Bits 0:31 - CSR44" ]
    pub fn set_csr44(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr45 {
    bits: u32,
}

impl Csr45 {
    # [ doc = "Bits 0:31 - CSR45" ]
    pub fn csr45(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr45 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr45 { bits: 0u32 }
    }
}

impl Csr45 {
    # [ doc = "Bits 0:31 - CSR45" ]
    pub fn set_csr45(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr46 {
    bits: u32,
}

impl Csr46 {
    # [ doc = "Bits 0:31 - CSR46" ]
    pub fn csr46(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr46 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr46 { bits: 0u32 }
    }
}

impl Csr46 {
    # [ doc = "Bits 0:31 - CSR46" ]
    pub fn set_csr46(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr47 {
    bits: u32,
}

impl Csr47 {
    # [ doc = "Bits 0:31 - CSR47" ]
    pub fn csr47(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr47 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr47 { bits: 0u32 }
    }
}

impl Csr47 {
    # [ doc = "Bits 0:31 - CSR47" ]
    pub fn set_csr47(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr48 {
    bits: u32,
}

impl Csr48 {
    # [ doc = "Bits 0:31 - CSR48" ]
    pub fn csr48(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr48 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr48 { bits: 0u32 }
    }
}

impl Csr48 {
    # [ doc = "Bits 0:31 - CSR48" ]
    pub fn set_csr48(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr49 {
    bits: u32,
}

impl Csr49 {
    # [ doc = "Bits 0:31 - CSR49" ]
    pub fn csr49(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr49 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr49 { bits: 0u32 }
    }
}

impl Csr49 {
    # [ doc = "Bits 0:31 - CSR49" ]
    pub fn set_csr49(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr50 {
    bits: u32,
}

impl Csr50 {
    # [ doc = "Bits 0:31 - CSR50" ]
    pub fn csr50(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr50 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr50 { bits: 0u32 }
    }
}

impl Csr50 {
    # [ doc = "Bits 0:31 - CSR50" ]
    pub fn set_csr50(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr51 {
    bits: u32,
}

impl Csr51 {
    # [ doc = "Bits 0:31 - CSR51" ]
    pub fn csr51(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr51 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr51 { bits: 0u32 }
    }
}

impl Csr51 {
    # [ doc = "Bits 0:31 - CSR51" ]
    pub fn set_csr51(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr52 {
    bits: u32,
}

impl Csr52 {
    # [ doc = "Bits 0:31 - CSR52" ]
    pub fn csr52(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr52 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr52 { bits: 0u32 }
    }
}

impl Csr52 {
    # [ doc = "Bits 0:31 - CSR52" ]
    pub fn set_csr52(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Csr53 {
    bits: u32,
}

impl Csr53 {
    # [ doc = "Bits 0:31 - CSR53" ]
    pub fn csr53(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csr53 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csr53 { bits: 0u32 }
    }
}

impl Csr53 {
    # [ doc = "Bits 0:31 - CSR53" ]
    pub fn set_csr53(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr0 {
    bits: u32,
}

impl HashHr0 {
    # [ doc = "Bits 0:31 - H0" ]
    pub fn h0(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr0 { bits: 0u32 }
    }
}

impl HashHr0 {
    # [ doc = "Bits 0:31 - H0" ]
    pub fn set_h0(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr1 {
    bits: u32,
}

impl HashHr1 {
    # [ doc = "Bits 0:31 - H1" ]
    pub fn h1(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr1 { bits: 0u32 }
    }
}

impl HashHr1 {
    # [ doc = "Bits 0:31 - H1" ]
    pub fn set_h1(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr2 {
    bits: u32,
}

impl HashHr2 {
    # [ doc = "Bits 0:31 - H2" ]
    pub fn h2(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr2 { bits: 0u32 }
    }
}

impl HashHr2 {
    # [ doc = "Bits 0:31 - H2" ]
    pub fn set_h2(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr3 {
    bits: u32,
}

impl HashHr3 {
    # [ doc = "Bits 0:31 - H3" ]
    pub fn h3(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr3 { bits: 0u32 }
    }
}

impl HashHr3 {
    # [ doc = "Bits 0:31 - H3" ]
    pub fn set_h3(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr4 {
    bits: u32,
}

impl HashHr4 {
    # [ doc = "Bits 0:31 - H4" ]
    pub fn h4(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr4 { bits: 0u32 }
    }
}

impl HashHr4 {
    # [ doc = "Bits 0:31 - H4" ]
    pub fn set_h4(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr5 {
    bits: u32,
}

impl HashHr5 {
    # [ doc = "Bits 0:31 - H5" ]
    pub fn h5(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr5 { bits: 0u32 }
    }
}

impl HashHr5 {
    # [ doc = "Bits 0:31 - H5" ]
    pub fn set_h5(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr6 {
    bits: u32,
}

impl HashHr6 {
    # [ doc = "Bits 0:31 - H6" ]
    pub fn h6(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr6 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr6 { bits: 0u32 }
    }
}

impl HashHr6 {
    # [ doc = "Bits 0:31 - H6" ]
    pub fn set_h6(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct HashHr7 {
    bits: u32,
}

impl HashHr7 {
    # [ doc = "Bits 0:31 - H7" ]
    pub fn h7(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for HashHr7 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        HashHr7 { bits: 0u32 }
    }
}

impl HashHr7 {
    # [ doc = "Bits 0:31 - H7" ]
    pub fn set_h7(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}
