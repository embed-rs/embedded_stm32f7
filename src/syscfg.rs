// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "System configuration controller" ]
# [ repr ( C ) ]
pub struct Syscfg {
    # [ doc = "0x00 - memory remap register" ]
    pub memrm: volatile::ReadWrite<Memrm>,
    # [ doc = "0x04 - peripheral mode configuration register" ]
    pub pmc: volatile::ReadWrite<Pmc>,
    # [ doc = "0x08 - external interrupt configuration register 1" ]
    pub exticr1: volatile::ReadWrite<Exticr1>,
    # [ doc = "0x0c - external interrupt configuration register 2" ]
    pub exticr2: volatile::ReadWrite<Exticr2>,
    # [ doc = "0x10 - external interrupt configuration register 3" ]
    pub exticr3: volatile::ReadWrite<Exticr3>,
    # [ doc = "0x14 - external interrupt configuration register 4" ]
    pub exticr4: volatile::ReadWrite<Exticr4>,
    _reserved0: [u8; 8usize],
    # [ doc = "0x20 - Compensation cell control register" ]
    pub cmpcr: volatile::ReadOnly<Cmpcr>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Memrm {
    bits: u32,
}

impl Memrm {
    # [ doc = "Bits 0:2 - Memory mapping selection" ]
    pub fn mem_mode(&self) -> u8 {
        self.bits.get_range(0u8..3u8) as u8
    }
    # [ doc = "Bit 8 - Flash bank mode selection" ]
    pub fn fb_mode(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bits 10:11 - FMC memory mapping swap" ]
    pub fn swp_fmc(&self) -> u8 {
        self.bits.get_range(10u8..12u8) as u8
    }
}

impl Default for Memrm {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Memrm { bits: 0u32 }
    }
}

impl Memrm {
    # [ doc = "Bits 0:2 - Memory mapping selection" ]
    pub fn set_mem_mode(&mut self, value: u8) {
        self.bits.set_range(0u8..3u8, value as u32);
    }
    # [ doc = "Bit 8 - Flash bank mode selection" ]
    pub fn set_fb_mode(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 10:11 - FMC memory mapping swap" ]
    pub fn set_swp_fmc(&mut self, value: u8) {
        self.bits.set_range(10u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Pmc {
    bits: u32,
}

impl Pmc {
    # [ doc = "Bit 23 - Ethernet PHY interface selection" ]
    pub fn mii_rmii_sel(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 16 - ADC1DC2" ]
    pub fn adc1dc2(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - ADC2DC2" ]
    pub fn adc2dc2(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - ADC3DC2" ]
    pub fn adc3dc2(&self) -> bool {
        self.bits.get_bit(18u8)
    }
}

impl Default for Pmc {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Pmc { bits: 0u32 }
    }
}

impl Pmc {
    # [ doc = "Bit 23 - Ethernet PHY interface selection" ]
    pub fn set_mii_rmii_sel(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 16 - ADC1DC2" ]
    pub fn set_adc1dc2(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - ADC2DC2" ]
    pub fn set_adc2dc2(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - ADC3DC2" ]
    pub fn set_adc3dc2(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Exticr1 {
    bits: u32,
}

impl Exticr1 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)" ]
    pub fn exti3(&self) -> u8 {
        self.bits.get_range(12u8..16u8) as u8
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)" ]
    pub fn exti2(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)" ]
    pub fn exti1(&self) -> u8 {
        self.bits.get_range(4u8..8u8) as u8
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)" ]
    pub fn exti0(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Exticr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Exticr1 { bits: 0u32 }
    }
}

impl Exticr1 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 0 to 3)" ]
    pub fn set_exti3(&mut self, value: u8) {
        self.bits.set_range(12u8..16u8, value as u32);
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 0 to 3)" ]
    pub fn set_exti2(&mut self, value: u8) {
        self.bits.set_range(8u8..12u8, value as u32);
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 0 to 3)" ]
    pub fn set_exti1(&mut self, value: u8) {
        self.bits.set_range(4u8..8u8, value as u32);
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 0 to 3)" ]
    pub fn set_exti0(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Exticr2 {
    bits: u32,
}

impl Exticr2 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 4 to 7)" ]
    pub fn exti7(&self) -> u8 {
        self.bits.get_range(12u8..16u8) as u8
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 4 to 7)" ]
    pub fn exti6(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 4 to 7)" ]
    pub fn exti5(&self) -> u8 {
        self.bits.get_range(4u8..8u8) as u8
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 4 to 7)" ]
    pub fn exti4(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Exticr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Exticr2 { bits: 0u32 }
    }
}

impl Exticr2 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 4 to 7)" ]
    pub fn set_exti7(&mut self, value: u8) {
        self.bits.set_range(12u8..16u8, value as u32);
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 4 to 7)" ]
    pub fn set_exti6(&mut self, value: u8) {
        self.bits.set_range(8u8..12u8, value as u32);
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 4 to 7)" ]
    pub fn set_exti5(&mut self, value: u8) {
        self.bits.set_range(4u8..8u8, value as u32);
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 4 to 7)" ]
    pub fn set_exti4(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Exticr3 {
    bits: u32,
}

impl Exticr3 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)" ]
    pub fn exti11(&self) -> u8 {
        self.bits.get_range(12u8..16u8) as u8
    }
    # [ doc = "Bits 8:11 - EXTI10" ]
    pub fn exti10(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)" ]
    pub fn exti9(&self) -> u8 {
        self.bits.get_range(4u8..8u8) as u8
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)" ]
    pub fn exti8(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Exticr3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Exticr3 { bits: 0u32 }
    }
}

impl Exticr3 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 8 to 11)" ]
    pub fn set_exti11(&mut self, value: u8) {
        self.bits.set_range(12u8..16u8, value as u32);
    }
    # [ doc = "Bits 8:11 - EXTI10" ]
    pub fn set_exti10(&mut self, value: u8) {
        self.bits.set_range(8u8..12u8, value as u32);
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 8 to 11)" ]
    pub fn set_exti9(&mut self, value: u8) {
        self.bits.set_range(4u8..8u8, value as u32);
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 8 to 11)" ]
    pub fn set_exti8(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Exticr4 {
    bits: u32,
}

impl Exticr4 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)" ]
    pub fn exti15(&self) -> u8 {
        self.bits.get_range(12u8..16u8) as u8
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 12 to 15)" ]
    pub fn exti14(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 12 to 15)" ]
    pub fn exti13(&self) -> u8 {
        self.bits.get_range(4u8..8u8) as u8
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 12 to 15)" ]
    pub fn exti12(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Exticr4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Exticr4 { bits: 0u32 }
    }
}

impl Exticr4 {
    # [ doc = "Bits 12:15 - EXTI x configuration (x = 12 to 15)" ]
    pub fn set_exti15(&mut self, value: u8) {
        self.bits.set_range(12u8..16u8, value as u32);
    }
    # [ doc = "Bits 8:11 - EXTI x configuration (x = 12 to 15)" ]
    pub fn set_exti14(&mut self, value: u8) {
        self.bits.set_range(8u8..12u8, value as u32);
    }
    # [ doc = "Bits 4:7 - EXTI x configuration (x = 12 to 15)" ]
    pub fn set_exti13(&mut self, value: u8) {
        self.bits.set_range(4u8..8u8, value as u32);
    }
    # [ doc = "Bits 0:3 - EXTI x configuration (x = 12 to 15)" ]
    pub fn set_exti12(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cmpcr {
    bits: u32,
}

impl Cmpcr {
    # [ doc = "Bit 8 - READY" ]
    pub fn ready(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 0 - Compensation cell power-down" ]
    pub fn cmp_pd(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Cmpcr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cmpcr { bits: 0u32 }
    }
}

impl Cmpcr {
    # [ doc = "Bit 8 - READY" ]
    pub fn set_ready(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 0 - Compensation cell power-down" ]
    pub fn set_cmp_pd(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}
