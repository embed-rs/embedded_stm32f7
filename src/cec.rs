// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "HDMI-CEC controller" ]
# [ repr ( C ) ]
pub struct Cec {
    # [ doc = "0x00 - control register" ]
    pub cr: volatile::ReadWrite<Cr>,
    # [ doc = "0x04 - configuration register" ]
    pub cfgr: volatile::ReadWrite<Cfgr>,
    # [ doc = "0x08 - Tx data register" ]
    pub txdr: volatile::WriteOnly<Txdr>,
    # [ doc = "0x0c - Rx Data Register" ]
    pub rxdr: volatile::ReadOnly<Rxdr>,
    # [ doc = "0x10 - Interrupt and Status Register" ]
    pub isr: volatile::ReadWrite<Isr>,
    # [ doc = "0x14 - interrupt enable register" ]
    pub ier: volatile::ReadWrite<Ier>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Cr {
    bits: u32,
}

impl Cr {
    # [ doc = "Bit 2 - Tx End Of Message" ]
    pub fn txeom(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - Tx start of message" ]
    pub fn txsom(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - CEC Enable" ]
    pub fn cecen(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Cr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr { bits: 0u32 }
    }
}

impl Cr {
    # [ doc = "Bit 2 - Tx End Of Message" ]
    pub fn set_txeom(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - Tx start of message" ]
    pub fn set_txsom(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - CEC Enable" ]
    pub fn set_cecen(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Cfgr {
    bits: u32,
}

impl Cfgr {
    # [ doc = "Bits 0:2 - Signal Free Time" ]
    pub fn sft(&self) -> u8 {
        self.bits.get_range(0u8..3u8) as u8
    }
    # [ doc = "Bit 3 - Rx-Tolerance" ]
    pub fn rxtol(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Rx-stop on bit rising error" ]
    pub fn brestp(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Generate error-bit on bit rising error" ]
    pub fn bregen(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Generate Error-Bit on Long Bit Period Error" ]
    pub fn lbpegen(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Avoid Error-Bit Generation in Broadcast" ]
    pub fn brdnogen(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - SFT Option Bit" ]
    pub fn sftop(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bits 16:30 - Own addresses configuration" ]
    pub fn oar(&self) -> u16 {
        self.bits.get_range(16u8..31u8) as u16
    }
    # [ doc = "Bit 31 - Listen mode" ]
    pub fn lstn(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Cfgr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cfgr { bits: 0u32 }
    }
}

impl Cfgr {
    # [ doc = "Bits 0:2 - Signal Free Time" ]
    pub fn set_sft(&mut self, value: u8) {
        self.bits.set_range(0u8..3u8, value as u32);
    }
    # [ doc = "Bit 3 - Rx-Tolerance" ]
    pub fn set_rxtol(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Rx-stop on bit rising error" ]
    pub fn set_brestp(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Generate error-bit on bit rising error" ]
    pub fn set_bregen(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Generate Error-Bit on Long Bit Period Error" ]
    pub fn set_lbpegen(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Avoid Error-Bit Generation in Broadcast" ]
    pub fn set_brdnogen(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - SFT Option Bit" ]
    pub fn set_sftop(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bits 16:30 - Own addresses configuration" ]
    pub fn set_oar(&mut self, value: u16) {
        self.bits.set_range(16u8..31u8, value as u32);
    }
    # [ doc = "Bit 31 - Listen mode" ]
    pub fn set_lstn(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Txdr {
    bits: u32,
}

impl Txdr {
    # [ doc = "Bits 0:7 - Tx Data register" ]
    pub fn txd(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Txdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Txdr { bits: 0u32 }
    }
}

impl Txdr {
    # [ doc = "Bits 0:7 - Tx Data register" ]
    pub fn set_txd(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Rxdr {
    bits: u32,
}

impl Rxdr {
    # [ doc = "Bits 0:7 - CEC Rx Data Register" ]
    pub fn rxdr(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Rxdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rxdr { bits: 0u32 }
    }
}

impl Rxdr {
    # [ doc = "Bits 0:7 - CEC Rx Data Register" ]
    pub fn set_rxdr(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Isr {
    bits: u32,
}

impl Isr {
    # [ doc = "Bit 12 - Tx-Missing acknowledge error" ]
    pub fn txacke(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 11 - Tx-Error" ]
    pub fn txerr(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 10 - Tx-Buffer Underrun" ]
    pub fn txudr(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 9 - End of Transmission" ]
    pub fn txend(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 8 - Tx-Byte Request" ]
    pub fn txbr(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 7 - Arbitration Lost" ]
    pub fn arblst(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - Rx-Missing Acknowledge" ]
    pub fn rxacke(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 5 - Rx-Long Bit Period Error" ]
    pub fn lbpe(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - Rx-Short Bit period error" ]
    pub fn sbpe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - Rx-Bit rising error" ]
    pub fn bre(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - Rx-Overrun" ]
    pub fn rxovr(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - End Of Reception" ]
    pub fn rxend(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Rx-Byte Received" ]
    pub fn rxbr(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Isr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Isr { bits: 0u32 }
    }
}

impl Isr {
    # [ doc = "Bit 12 - Tx-Missing acknowledge error" ]
    pub fn set_txacke(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 11 - Tx-Error" ]
    pub fn set_txerr(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 10 - Tx-Buffer Underrun" ]
    pub fn set_txudr(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 9 - End of Transmission" ]
    pub fn set_txend(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 8 - Tx-Byte Request" ]
    pub fn set_txbr(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 7 - Arbitration Lost" ]
    pub fn set_arblst(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 6 - Rx-Missing Acknowledge" ]
    pub fn set_rxacke(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 5 - Rx-Long Bit Period Error" ]
    pub fn set_lbpe(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - Rx-Short Bit period error" ]
    pub fn set_sbpe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - Rx-Bit rising error" ]
    pub fn set_bre(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - Rx-Overrun" ]
    pub fn set_rxovr(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - End Of Reception" ]
    pub fn set_rxend(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Rx-Byte Received" ]
    pub fn set_rxbr(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ier {
    bits: u32,
}

impl Ier {
    # [ doc = "Bit 12 - Tx-Missing Acknowledge Error Interrupt Enable" ]
    pub fn txackie(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 11 - Tx-Error Interrupt Enable" ]
    pub fn txerrie(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 10 - Tx-Underrun interrupt enable" ]
    pub fn txudrie(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 9 - Tx-End of message interrupt enable" ]
    pub fn txendie(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 8 - Tx-Byte Request Interrupt Enable" ]
    pub fn txbrie(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 7 - Arbitration Lost Interrupt Enable" ]
    pub fn arblstie(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - Rx-Missing Acknowledge Error Interrupt Enable" ]
    pub fn rxackie(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 5 - Long Bit Period Error Interrupt Enable" ]
    pub fn lbpeie(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 4 - Short Bit Period Error Interrupt Enable" ]
    pub fn sbpeie(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - Bit Rising Error Interrupt Enable" ]
    pub fn breie(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - Rx-Buffer Overrun Interrupt Enable" ]
    pub fn rxovrie(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - End Of Reception Interrupt Enable" ]
    pub fn rxendie(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Rx-Byte Received Interrupt Enable" ]
    pub fn rxbrie(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Ier {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ier { bits: 0u32 }
    }
}

impl Ier {
    # [ doc = "Bit 12 - Tx-Missing Acknowledge Error Interrupt Enable" ]
    pub fn set_txackie(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 11 - Tx-Error Interrupt Enable" ]
    pub fn set_txerrie(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 10 - Tx-Underrun interrupt enable" ]
    pub fn set_txudrie(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 9 - Tx-End of message interrupt enable" ]
    pub fn set_txendie(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 8 - Tx-Byte Request Interrupt Enable" ]
    pub fn set_txbrie(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 7 - Arbitration Lost Interrupt Enable" ]
    pub fn set_arblstie(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 6 - Rx-Missing Acknowledge Error Interrupt Enable" ]
    pub fn set_rxackie(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 5 - Long Bit Period Error Interrupt Enable" ]
    pub fn set_lbpeie(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 4 - Short Bit Period Error Interrupt Enable" ]
    pub fn set_sbpeie(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - Bit Rising Error Interrupt Enable" ]
    pub fn set_breie(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - Rx-Buffer Overrun Interrupt Enable" ]
    pub fn set_rxovrie(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - End Of Reception Interrupt Enable" ]
    pub fn set_rxendie(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Rx-Byte Received Interrupt Enable" ]
    pub fn set_rxbrie(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}
