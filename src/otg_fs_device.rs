// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "USB on the go full speed" ]
# [ repr ( C ) ]
pub struct OtgFsDevice {
    # [ doc = "0x00 - OTG_FS device configuration register (OTG_FS_DCFG)" ]
    pub otg_fs_dcfg: volatile::ReadWrite<OtgFsDcfg>,
    # [ doc = "0x04 - OTG_FS device control register (OTG_FS_DCTL)" ]
    pub otg_fs_dctl: volatile::ReadWrite<OtgFsDctl>,
    # [ doc = "0x08 - OTG_FS device status register (OTG_FS_DSTS)" ]
    pub otg_fs_dsts: volatile::ReadOnly<OtgFsDsts>,
    _reserved0: [u8; 4usize],
    # [ doc = "0x10 - OTG_FS device IN endpoint common interrupt mask register (OTG_FS_DIEPMSK)" ]
    pub otg_fs_diepmsk: volatile::ReadWrite<OtgFsDiepmsk>,
    # [ doc = "0x14 - OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)" ]
    pub otg_fs_doepmsk: volatile::ReadWrite<OtgFsDoepmsk>,
    # [ doc = "0x18 - OTG_FS device all endpoints interrupt register (OTG_FS_DAINT)" ]
    pub otg_fs_daint: volatile::ReadOnly<OtgFsDaint>,
    # [ doc = "0x1c - OTG_FS all endpoints interrupt mask register (OTG_FS_DAINTMSK)" ]
    pub otg_fs_daintmsk: volatile::ReadWrite<OtgFsDaintmsk>,
    _reserved1: [u8; 8usize],
    # [ doc = "0x28 - OTG_FS device VBUS discharge time register" ]
    pub otg_fs_dvbusdis: volatile::ReadWrite<OtgFsDvbusdis>,
    # [ doc = "0x2c - OTG_FS device VBUS pulsing time register" ]
    pub otg_fs_dvbuspulse: volatile::ReadWrite<OtgFsDvbuspulse>,
    _reserved2: [u8; 4usize],
    # [ doc = "0x34 - OTG_FS device IN endpoint FIFO empty interrupt mask register" ]
    pub otg_fs_diepempmsk: volatile::ReadWrite<OtgFsDiepempmsk>,
    _reserved3: [u8; 200usize],
    # [ doc = "0x100 - OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)" ]
    pub otg_fs_diepctl0: volatile::ReadWrite<OtgFsDiepctl0>,
    _reserved4: [u8; 4usize],
    # [ doc = "0x108 - device endpoint-x interrupt register" ]
    pub otg_fs_diepint0: volatile::ReadWrite<OtgFsDiepint0>,
    _reserved5: [u8; 4usize],
    # [ doc = "0x110 - device endpoint-0 transfer size register" ]
    pub otg_fs_dieptsiz0: volatile::ReadWrite<OtgFsDieptsiz0>,
    _reserved6: [u8; 4usize],
    # [ doc = "0x118 - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts0: volatile::ReadOnly<OtgFsDtxfsts0>,
    _reserved7: [u8; 4usize],
    # [ doc = "0x120 - OTG device endpoint-1 control register" ]
    pub otg_fs_diepctl1: volatile::ReadWrite<OtgFsDiepctl1>,
    _reserved8: [u8; 4usize],
    # [ doc = "0x128 - device endpoint-1 interrupt register" ]
    pub otg_fs_diepint1: volatile::ReadWrite<OtgFsDiepint1>,
    _reserved9: [u8; 4usize],
    # [ doc = "0x130 - device endpoint-1 transfer size register" ]
    pub otg_fs_dieptsiz1: volatile::ReadWrite<OtgFsDieptsiz1>,
    _reserved10: [u8; 4usize],
    # [ doc = "0x138 - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts1: volatile::ReadOnly<OtgFsDtxfsts1>,
    _reserved11: [u8; 4usize],
    # [ doc = "0x140 - OTG device endpoint-2 control register" ]
    pub otg_fs_diepctl2: volatile::ReadWrite<OtgFsDiepctl2>,
    _reserved12: [u8; 4usize],
    # [ doc = "0x148 - device endpoint-2 interrupt register" ]
    pub otg_fs_diepint2: volatile::ReadWrite<OtgFsDiepint2>,
    _reserved13: [u8; 4usize],
    # [ doc = "0x150 - device endpoint-2 transfer size register" ]
    pub otg_fs_dieptsiz2: volatile::ReadWrite<OtgFsDieptsiz2>,
    _reserved14: [u8; 4usize],
    # [ doc = "0x158 - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts2: volatile::ReadOnly<OtgFsDtxfsts2>,
    _reserved15: [u8; 4usize],
    # [ doc = "0x160 - OTG device endpoint-3 control register" ]
    pub otg_fs_diepctl3: volatile::ReadWrite<OtgFsDiepctl3>,
    _reserved16: [u8; 4usize],
    # [ doc = "0x168 - device endpoint-3 interrupt register" ]
    pub otg_fs_diepint3: volatile::ReadWrite<OtgFsDiepint3>,
    _reserved17: [u8; 4usize],
    # [ doc = "0x170 - device endpoint-3 transfer size register" ]
    pub otg_fs_dieptsiz3: volatile::ReadWrite<OtgFsDieptsiz3>,
    _reserved18: [u8; 4usize],
    # [ doc = "0x178 - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts3: volatile::ReadOnly<OtgFsDtxfsts3>,
    _reserved19: [u8; 4usize],
    # [ doc = "0x180 - OTG device endpoint-4 control register" ]
    pub otg_fs_diepctl4: volatile::ReadWrite<OtgFsDiepctl4>,
    _reserved20: [u8; 4usize],
    # [ doc = "0x188 - device endpoint-4 interrupt register" ]
    pub otg_fs_diepint4: volatile::ReadWrite<OtgFsDiepint4>,
    _reserved21: [u8; 8usize],
    # [ doc = "0x194 - device endpoint-4 transfer size register" ]
    pub otg_fs_dieptsiz4: volatile::ReadWrite<OtgFsDieptsiz4>,
    _reserved22: [u8; 4usize],
    # [ doc = "0x19c - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts4: volatile::ReadWrite<OtgFsDtxfsts4>,
    # [ doc = "0x1a0 - OTG device endpoint-5 control register" ]
    pub otg_fs_diepctl5: volatile::ReadWrite<OtgFsDiepctl5>,
    _reserved23: [u8; 4usize],
    # [ doc = "0x1a8 - device endpoint-5 interrupt register" ]
    pub otg_fs_diepint5: volatile::ReadWrite<OtgFsDiepint5>,
    _reserved24: [u8; 4usize],
    # [ doc = "0x1b0 - device endpoint-5 transfer size register" ]
    pub otg_fs_dieptsiz55: volatile::ReadWrite<OtgFsDieptsiz55>,
    _reserved25: [u8; 4usize],
    # [ doc = "0x1b8 - OTG_FS device IN endpoint transmit FIFO status register" ]
    pub otg_fs_dtxfsts55: volatile::ReadWrite<OtgFsDtxfsts55>,
    _reserved26: [u8; 324usize],
    # [ doc = "0x300 - device endpoint-0 control register" ]
    pub otg_fs_doepctl0: volatile::ReadWrite<OtgFsDoepctl0>,
    _reserved27: [u8; 4usize],
    # [ doc = "0x308 - device endpoint-0 interrupt register" ]
    pub otg_fs_doepint0: volatile::ReadWrite<OtgFsDoepint0>,
    _reserved28: [u8; 4usize],
    # [ doc = "0x310 - device OUT endpoint-0 transfer size register" ]
    pub otg_fs_doeptsiz0: volatile::ReadWrite<OtgFsDoeptsiz0>,
    _reserved29: [u8; 12usize],
    # [ doc = "0x320 - device endpoint-1 control register" ]
    pub otg_fs_doepctl1: volatile::ReadWrite<OtgFsDoepctl1>,
    _reserved30: [u8; 4usize],
    # [ doc = "0x328 - device endpoint-1 interrupt register" ]
    pub otg_fs_doepint1: volatile::ReadWrite<OtgFsDoepint1>,
    _reserved31: [u8; 4usize],
    # [ doc = "0x330 - device OUT endpoint-1 transfer size register" ]
    pub otg_fs_doeptsiz1: volatile::ReadWrite<OtgFsDoeptsiz1>,
    _reserved32: [u8; 12usize],
    # [ doc = "0x340 - device endpoint-2 control register" ]
    pub otg_fs_doepctl2: volatile::ReadWrite<OtgFsDoepctl2>,
    _reserved33: [u8; 4usize],
    # [ doc = "0x348 - device endpoint-2 interrupt register" ]
    pub otg_fs_doepint2: volatile::ReadWrite<OtgFsDoepint2>,
    _reserved34: [u8; 4usize],
    # [ doc = "0x350 - device OUT endpoint-2 transfer size register" ]
    pub otg_fs_doeptsiz2: volatile::ReadWrite<OtgFsDoeptsiz2>,
    _reserved35: [u8; 12usize],
    # [ doc = "0x360 - device endpoint-3 control register" ]
    pub otg_fs_doepctl3: volatile::ReadWrite<OtgFsDoepctl3>,
    _reserved36: [u8; 4usize],
    # [ doc = "0x368 - device endpoint-3 interrupt register" ]
    pub otg_fs_doepint3: volatile::ReadWrite<OtgFsDoepint3>,
    _reserved37: [u8; 4usize],
    # [ doc = "0x370 - device OUT endpoint-3 transfer size register" ]
    pub otg_fs_doeptsiz3: volatile::ReadWrite<OtgFsDoeptsiz3>,
    _reserved38: [u8; 4usize],
    # [ doc = "0x378 - device endpoint-4 control register" ]
    pub otg_fs_doepctl4: volatile::ReadWrite<OtgFsDoepctl4>,
    _reserved39: [u8; 4usize],
    # [ doc = "0x380 - device endpoint-4 interrupt register" ]
    pub otg_fs_doepint4: volatile::ReadWrite<OtgFsDoepint4>,
    _reserved40: [u8; 4usize],
    # [ doc = "0x388 - device OUT endpoint-4 transfer size register" ]
    pub otg_fs_doeptsiz4: volatile::ReadWrite<OtgFsDoeptsiz4>,
    _reserved41: [u8; 4usize],
    # [ doc = "0x390 - device endpoint-5 control register" ]
    pub otg_fs_doepctl5: volatile::ReadWrite<OtgFsDoepctl5>,
    _reserved42: [u8; 4usize],
    # [ doc = "0x398 - device endpoint-5 interrupt register" ]
    pub otg_fs_doepint5: volatile::ReadWrite<OtgFsDoepint5>,
    _reserved43: [u8; 4usize],
    # [ doc = "0x3a0 - device OUT endpoint-5 transfer size register" ]
    pub otg_fs_doeptsiz5: volatile::ReadWrite<OtgFsDoeptsiz5>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDcfg {
    bits: u32,
}

impl OtgFsDcfg {
    # [ doc = "Bits 0:1 - Device speed" ]
    pub fn dspd(&self) -> u8 {
        self.bits.get_range(0u8..2u8) as u8
    }
    # [ doc = "Bit 2 - Non-zero-length status OUT handshake" ]
    pub fn nzlsohsk(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bits 4:10 - Device address" ]
    pub fn dad(&self) -> u8 {
        self.bits.get_range(4u8..11u8) as u8
    }
    # [ doc = "Bits 11:12 - Periodic frame interval" ]
    pub fn pfivl(&self) -> u8 {
        self.bits.get_range(11u8..13u8) as u8
    }
}

impl Default for OtgFsDcfg {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDcfg { bits: 35651584u32 }
    }
}

impl OtgFsDcfg {
    # [ doc = "Bits 0:1 - Device speed" ]
    pub fn set_dspd(&mut self, value: u8) {
        self.bits.set_range(0u8..2u8, value as u32);
    }
    # [ doc = "Bit 2 - Non-zero-length status OUT handshake" ]
    pub fn set_nzlsohsk(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bits 4:10 - Device address" ]
    pub fn set_dad(&mut self, value: u8) {
        self.bits.set_range(4u8..11u8, value as u32);
    }
    # [ doc = "Bits 11:12 - Periodic frame interval" ]
    pub fn set_pfivl(&mut self, value: u8) {
        self.bits.set_range(11u8..13u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDctl {
    bits: u32,
}

impl OtgFsDctl {
    # [ doc = "Bit 0 - Remote wakeup signaling" ]
    pub fn rwusig(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Soft disconnect" ]
    pub fn sdis(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Global IN NAK status" ]
    pub fn ginsts(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Global OUT NAK status" ]
    pub fn gonsts(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 4:6 - Test control" ]
    pub fn tctl(&self) -> u8 {
        self.bits.get_range(4u8..7u8) as u8
    }
    # [ doc = "Bit 7 - Set global IN NAK" ]
    pub fn sginak(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Clear global IN NAK" ]
    pub fn cginak(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Set global OUT NAK" ]
    pub fn sgonak(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Clear global OUT NAK" ]
    pub fn cgonak(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Power-on programming done" ]
    pub fn poprgdne(&self) -> bool {
        self.bits.get_bit(11u8)
    }
}

impl Default for OtgFsDctl {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDctl { bits: 0u32 }
    }
}

impl OtgFsDctl {
    # [ doc = "Bit 0 - Remote wakeup signaling" ]
    pub fn set_rwusig(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Soft disconnect" ]
    pub fn set_sdis(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bits 4:6 - Test control" ]
    pub fn set_tctl(&mut self, value: u8) {
        self.bits.set_range(4u8..7u8, value as u32);
    }
    # [ doc = "Bit 7 - Set global IN NAK" ]
    pub fn set_sginak(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Clear global IN NAK" ]
    pub fn set_cginak(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Set global OUT NAK" ]
    pub fn set_sgonak(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Clear global OUT NAK" ]
    pub fn set_cgonak(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Power-on programming done" ]
    pub fn set_poprgdne(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDsts {
    bits: u32,
}

impl OtgFsDsts {
    # [ doc = "Bit 0 - Suspend status" ]
    pub fn suspsts(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bits 1:2 - Enumerated speed" ]
    pub fn enumspd(&self) -> u8 {
        self.bits.get_range(1u8..3u8) as u8
    }
    # [ doc = "Bit 3 - Erratic error" ]
    pub fn eerr(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bits 8:21 - Frame number of the received SOF" ]
    pub fn fnsof(&self) -> u16 {
        self.bits.get_range(8u8..22u8) as u16
    }
}

impl Default for OtgFsDsts {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDsts { bits: 16u32 }
    }
}

impl OtgFsDsts {
    # [ doc = "Bit 0 - Suspend status" ]
    pub fn set_suspsts(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bits 1:2 - Enumerated speed" ]
    pub fn set_enumspd(&mut self, value: u8) {
        self.bits.set_range(1u8..3u8, value as u32);
    }
    # [ doc = "Bit 3 - Erratic error" ]
    pub fn set_eerr(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bits 8:21 - Frame number of the received SOF" ]
    pub fn set_fnsof(&mut self, value: u16) {
        self.bits.set_range(8u8..22u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepmsk {
    bits: u32,
}

impl OtgFsDiepmsk {
    # [ doc = "Bit 0 - Transfer completed interrupt mask" ]
    pub fn xfrcm(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ]
    pub fn epdm(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 3 - Timeout condition mask (Non-isochronous endpoints)" ]
    pub fn tom(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - IN token received when TxFIFO empty mask" ]
    pub fn ittxfemsk(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - IN token received with EP mismatch mask" ]
    pub fn inepnmm(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - IN endpoint NAK effective mask" ]
    pub fn inepnem(&self) -> bool {
        self.bits.get_bit(6u8)
    }
}

impl Default for OtgFsDiepmsk {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepmsk { bits: 0u32 }
    }
}

impl OtgFsDiepmsk {
    # [ doc = "Bit 0 - Transfer completed interrupt mask" ]
    pub fn set_xfrcm(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ]
    pub fn set_epdm(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 3 - Timeout condition mask (Non-isochronous endpoints)" ]
    pub fn set_tom(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - IN token received when TxFIFO empty mask" ]
    pub fn set_ittxfemsk(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - IN token received with EP mismatch mask" ]
    pub fn set_inepnmm(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - IN endpoint NAK effective mask" ]
    pub fn set_inepnem(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepmsk {
    bits: u32,
}

impl OtgFsDoepmsk {
    # [ doc = "Bit 0 - Transfer completed interrupt mask" ]
    pub fn xfrcm(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ]
    pub fn epdm(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 3 - SETUP phase done mask" ]
    pub fn stupm(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - OUT token received when endpoint disabled mask" ]
    pub fn otepdm(&self) -> bool {
        self.bits.get_bit(4u8)
    }
}

impl Default for OtgFsDoepmsk {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepmsk { bits: 0u32 }
    }
}

impl OtgFsDoepmsk {
    # [ doc = "Bit 0 - Transfer completed interrupt mask" ]
    pub fn set_xfrcm(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Endpoint disabled interrupt mask" ]
    pub fn set_epdm(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 3 - SETUP phase done mask" ]
    pub fn set_stupm(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - OUT token received when endpoint disabled mask" ]
    pub fn set_otepdm(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDaint {
    bits: u32,
}

impl OtgFsDaint {
    # [ doc = "Bits 0:15 - IN endpoint interrupt bits" ]
    pub fn iepint(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bits 16:31 - OUT endpoint interrupt bits" ]
    pub fn oepint(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
}

impl Default for OtgFsDaint {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDaint { bits: 0u32 }
    }
}

impl OtgFsDaint {
    # [ doc = "Bits 0:15 - IN endpoint interrupt bits" ]
    pub fn set_iepint(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:31 - OUT endpoint interrupt bits" ]
    pub fn set_oepint(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDaintmsk {
    bits: u32,
}

impl OtgFsDaintmsk {
    # [ doc = "Bits 0:15 - IN EP interrupt mask bits" ]
    pub fn iepm(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bits 16:31 - OUT EP interrupt mask bits" ]
    pub fn oepm(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
}

impl Default for OtgFsDaintmsk {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDaintmsk { bits: 0u32 }
    }
}

impl OtgFsDaintmsk {
    # [ doc = "Bits 0:15 - IN EP interrupt mask bits" ]
    pub fn set_iepm(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:31 - OUT EP interrupt mask bits" ]
    pub fn set_oepm(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDvbusdis {
    bits: u32,
}

impl OtgFsDvbusdis {
    # [ doc = "Bits 0:15 - Device VBUS discharge time" ]
    pub fn vbusdt(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDvbusdis {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDvbusdis { bits: 6103u32 }
    }
}

impl OtgFsDvbusdis {
    # [ doc = "Bits 0:15 - Device VBUS discharge time" ]
    pub fn set_vbusdt(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDvbuspulse {
    bits: u32,
}

impl OtgFsDvbuspulse {
    # [ doc = "Bits 0:11 - Device VBUS pulsing time" ]
    pub fn dvbusp(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for OtgFsDvbuspulse {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDvbuspulse { bits: 1464u32 }
    }
}

impl OtgFsDvbuspulse {
    # [ doc = "Bits 0:11 - Device VBUS pulsing time" ]
    pub fn set_dvbusp(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepempmsk {
    bits: u32,
}

impl OtgFsDiepempmsk {
    # [ doc = "Bits 0:15 - IN EP Tx FIFO empty interrupt mask bits" ]
    pub fn ineptxfem(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDiepempmsk {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepempmsk { bits: 0u32 }
    }
}

impl OtgFsDiepempmsk {
    # [ doc = "Bits 0:15 - IN EP Tx FIFO empty interrupt mask bits" ]
    pub fn set_ineptxfem(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl0 {
    bits: u32,
}

impl OtgFsDiepctl0 {
    # [ doc = "Bits 0:1 - Maximum packet size" ]
    pub fn mpsiz(&self) -> u8 {
        self.bits.get_range(0u8..2u8) as u8
    }
    # [ doc = "Bit 15 - USB active endpoint" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 17 - NAK status" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bits 18:19 - Endpoint type" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 21 - STALL handshake" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 22:25 - TxFIFO number" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 30 - Endpoint disable" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - Endpoint enable" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for OtgFsDiepctl0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl0 { bits: 0u32 }
    }
}

impl OtgFsDiepctl0 {
    # [ doc = "Bits 0:1 - Maximum packet size" ]
    pub fn set_mpsiz(&mut self, value: u8) {
        self.bits.set_range(0u8..2u8, value as u32);
    }
    # [ doc = "Bit 21 - STALL handshake" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 22:25 - TxFIFO number" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 26 - Clear NAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - Set NAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint0 {
    bits: u32,
}

impl OtgFsDiepint0 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint0 { bits: 128u32 }
    }
}

impl OtgFsDiepint0 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz0 {
    bits: u32,
}

impl OtgFsDieptsiz0 {
    # [ doc = "Bits 19:20 - Packet count" ]
    pub fn pktcnt(&self) -> u8 {
        self.bits.get_range(19u8..21u8) as u8
    }
    # [ doc = "Bits 0:6 - Transfer size" ]
    pub fn xfrsiz(&self) -> u8 {
        self.bits.get_range(0u8..7u8) as u8
    }
}

impl Default for OtgFsDieptsiz0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz0 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz0 {
    # [ doc = "Bits 19:20 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u8) {
        self.bits.set_range(19u8..21u8, value as u32);
    }
    # [ doc = "Bits 0:6 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u8) {
        self.bits.set_range(0u8..7u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts0 {
    bits: u32,
}

impl OtgFsDtxfsts0 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts0 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts0 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl1 {
    bits: u32,
}

impl OtgFsDiepctl1 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDiepctl1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl1 { bits: 0u32 }
    }
}

impl OtgFsDiepctl1 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM/SD1PID" ]
    pub fn set_soddfrm_sd1pid(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint1 {
    bits: u32,
}

impl OtgFsDiepint1 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint1 { bits: 128u32 }
    }
}

impl OtgFsDiepint1 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz1 {
    bits: u32,
}

impl OtgFsDieptsiz1 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn mcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDieptsiz1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz1 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz1 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn set_mcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts1 {
    bits: u32,
}

impl OtgFsDtxfsts1 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts1 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts1 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl2 {
    bits: u32,
}

impl OtgFsDiepctl2 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDiepctl2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl2 { bits: 0u32 }
    }
}

impl OtgFsDiepctl2 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint2 {
    bits: u32,
}

impl OtgFsDiepint2 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint2 { bits: 128u32 }
    }
}

impl OtgFsDiepint2 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz2 {
    bits: u32,
}

impl OtgFsDieptsiz2 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn mcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDieptsiz2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz2 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz2 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn set_mcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts2 {
    bits: u32,
}

impl OtgFsDtxfsts2 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts2 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts2 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl3 {
    bits: u32,
}

impl OtgFsDiepctl3 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDiepctl3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl3 { bits: 0u32 }
    }
}

impl OtgFsDiepctl3 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint3 {
    bits: u32,
}

impl OtgFsDiepint3 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint3 { bits: 128u32 }
    }
}

impl OtgFsDiepint3 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz3 {
    bits: u32,
}

impl OtgFsDieptsiz3 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn mcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDieptsiz3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz3 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz3 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn set_mcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts3 {
    bits: u32,
}

impl OtgFsDtxfsts3 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts3 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts3 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl4 {
    bits: u32,
}

impl OtgFsDiepctl4 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDiepctl4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl4 { bits: 0u32 }
    }
}

impl OtgFsDiepctl4 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint4 {
    bits: u32,
}

impl OtgFsDiepint4 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint4 { bits: 0u32 }
    }
}

impl OtgFsDiepint4 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz4 {
    bits: u32,
}

impl OtgFsDieptsiz4 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn mcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDieptsiz4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz4 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz4 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn set_mcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts4 {
    bits: u32,
}

impl OtgFsDtxfsts4 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts4 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts4 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepctl5 {
    bits: u32,
}

impl OtgFsDiepctl5 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn txfnum(&self) -> u8 {
        self.bits.get_range(22u8..26u8) as u8
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDiepctl5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepctl5 { bits: 0u32 }
    }
}

impl OtgFsDiepctl5 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bits 22:25 - TXFNUM" ]
    pub fn set_txfnum(&mut self, value: u8) {
        self.bits.set_range(22u8..26u8, value as u32);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDiepint5 {
    bits: u32,
}

impl OtgFsDiepint5 {
    # [ doc = "Bit 7 - TXFE" ]
    pub fn txfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn inepne(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn ittxfe(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn toc(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDiepint5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDiepint5 { bits: 0u32 }
    }
}

impl OtgFsDiepint5 {
    # [ doc = "Bit 6 - INEPNE" ]
    pub fn set_inepne(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - ITTXFE" ]
    pub fn set_ittxfe(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - TOC" ]
    pub fn set_toc(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDieptsiz55 {
    bits: u32,
}

impl OtgFsDieptsiz55 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn mcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDieptsiz55 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDieptsiz55 { bits: 0u32 }
    }
}

impl OtgFsDieptsiz55 {
    # [ doc = "Bits 29:30 - Multi count" ]
    pub fn set_mcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDtxfsts55 {
    bits: u32,
}

impl OtgFsDtxfsts55 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn ineptfsav(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for OtgFsDtxfsts55 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDtxfsts55 { bits: 0u32 }
    }
}

impl OtgFsDtxfsts55 {
    # [ doc = "Bits 0:15 - IN endpoint TxFIFO space available" ]
    pub fn set_ineptfsav(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl0 {
    bits: u32,
}

impl OtgFsDoepctl0 {
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:1 - MPSIZ" ]
    pub fn mpsiz(&self) -> u8 {
        self.bits.get_range(0u8..2u8) as u8
    }
}

impl Default for OtgFsDoepctl0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl0 { bits: 32768u32 }
    }
}

impl OtgFsDoepctl0 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint0 {
    bits: u32,
}

impl OtgFsDoepint0 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint0 { bits: 128u32 }
    }
}

impl OtgFsDoepint0 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz0 {
    bits: u32,
}

impl OtgFsDoeptsiz0 {
    # [ doc = "Bits 29:30 - SETUP packet count" ]
    pub fn stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bit 19 - Packet count" ]
    pub fn pktcnt(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bits 0:6 - Transfer size" ]
    pub fn xfrsiz(&self) -> u8 {
        self.bits.get_range(0u8..7u8) as u8
    }
}

impl Default for OtgFsDoeptsiz0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz0 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz0 {
    # [ doc = "Bits 29:30 - SETUP packet count" ]
    pub fn set_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bit 19 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bits 0:6 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u8) {
        self.bits.set_range(0u8..7u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl1 {
    bits: u32,
}

impl OtgFsDoepctl1 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDoepctl1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl1 { bits: 0u32 }
    }
}

impl OtgFsDoepctl1 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint1 {
    bits: u32,
}

impl OtgFsDoepint1 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint1 { bits: 128u32 }
    }
}

impl OtgFsDoepint1 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz1 {
    bits: u32,
}

impl OtgFsDoeptsiz1 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn rxdpid_stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDoeptsiz1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz1 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz1 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn set_rxdpid_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl2 {
    bits: u32,
}

impl OtgFsDoepctl2 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDoepctl2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl2 { bits: 0u32 }
    }
}

impl OtgFsDoepctl2 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint2 {
    bits: u32,
}

impl OtgFsDoepint2 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint2 { bits: 128u32 }
    }
}

impl OtgFsDoepint2 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz2 {
    bits: u32,
}

impl OtgFsDoeptsiz2 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn rxdpid_stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDoeptsiz2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz2 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz2 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn set_rxdpid_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl3 {
    bits: u32,
}

impl OtgFsDoepctl3 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDoepctl3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl3 { bits: 0u32 }
    }
}

impl OtgFsDoepctl3 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint3 {
    bits: u32,
}

impl OtgFsDoepint3 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint3 { bits: 128u32 }
    }
}

impl OtgFsDoepint3 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz3 {
    bits: u32,
}

impl OtgFsDoeptsiz3 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn rxdpid_stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDoeptsiz3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz3 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz3 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn set_rxdpid_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl4 {
    bits: u32,
}

impl OtgFsDoepctl4 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDoepctl4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl4 { bits: 0u32 }
    }
}

impl OtgFsDoepctl4 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint4 {
    bits: u32,
}

impl OtgFsDoepint4 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint4 { bits: 0u32 }
    }
}

impl OtgFsDoepint4 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz4 {
    bits: u32,
}

impl OtgFsDoeptsiz4 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn rxdpid_stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDoeptsiz4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz4 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz4 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn set_rxdpid_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepctl5 {
    bits: u32,
}

impl OtgFsDoepctl5 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn epena(&self) -> bool {
        self.bits.get_bit(31u8)
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn epdis(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn stall(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn snpm(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn eptyp(&self) -> u8 {
        self.bits.get_range(18u8..20u8) as u8
    }
    # [ doc = "Bit 17 - NAKSTS" ]
    pub fn naksts(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - EONUM/DPID" ]
    pub fn eonum_dpid(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn usbaep(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn mpsiz(&self) -> u16 {
        self.bits.get_range(0u8..11u8) as u16
    }
}

impl Default for OtgFsDoepctl5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepctl5 { bits: 0u32 }
    }
}

impl OtgFsDoepctl5 {
    # [ doc = "Bit 31 - EPENA" ]
    pub fn set_epena(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
    # [ doc = "Bit 30 - EPDIS" ]
    pub fn set_epdis(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 29 - SODDFRM" ]
    pub fn set_soddfrm(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - SD0PID/SEVNFRM" ]
    pub fn set_sd0pid_sevnfrm(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 27 - SNAK" ]
    pub fn set_snak(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 26 - CNAK" ]
    pub fn set_cnak(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 21 - Stall" ]
    pub fn set_stall(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 20 - SNPM" ]
    pub fn set_snpm(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bits 18:19 - EPTYP" ]
    pub fn set_eptyp(&mut self, value: u8) {
        self.bits.set_range(18u8..20u8, value as u32);
    }
    # [ doc = "Bit 15 - USBAEP" ]
    pub fn set_usbaep(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 0:10 - MPSIZ" ]
    pub fn set_mpsiz(&mut self, value: u16) {
        self.bits.set_range(0u8..11u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoepint5 {
    bits: u32,
}

impl OtgFsDoepint5 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn b2bstup(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn otepdis(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn stup(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn epdisd(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn xfrc(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for OtgFsDoepint5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoepint5 { bits: 0u32 }
    }
}

impl OtgFsDoepint5 {
    # [ doc = "Bit 6 - B2BSTUP" ]
    pub fn set_b2bstup(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 4 - OTEPDIS" ]
    pub fn set_otepdis(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - STUP" ]
    pub fn set_stup(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 1 - EPDISD" ]
    pub fn set_epdisd(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - XFRC" ]
    pub fn set_xfrc(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct OtgFsDoeptsiz5 {
    bits: u32,
}

impl OtgFsDoeptsiz5 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn rxdpid_stupcnt(&self) -> u8 {
        self.bits.get_range(29u8..31u8) as u8
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn pktcnt(&self) -> u16 {
        self.bits.get_range(19u8..29u8) as u16
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn xfrsiz(&self) -> u32 {
        self.bits.get_range(0u8..19u8) as u32
    }
}

impl Default for OtgFsDoeptsiz5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgFsDoeptsiz5 { bits: 0u32 }
    }
}

impl OtgFsDoeptsiz5 {
    # [ doc = "Bits 29:30 - Received data PID/SETUP packet count" ]
    pub fn set_rxdpid_stupcnt(&mut self, value: u8) {
        self.bits.set_range(29u8..31u8, value as u32);
    }
    # [ doc = "Bits 19:28 - Packet count" ]
    pub fn set_pktcnt(&mut self, value: u16) {
        self.bits.set_range(19u8..29u8, value as u32);
    }
    # [ doc = "Bits 0:18 - Transfer size" ]
    pub fn set_xfrsiz(&mut self, value: u32) {
        self.bits.set_range(0u8..19u8, value as u32);
    }
}
