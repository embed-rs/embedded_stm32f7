// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "External interrupt/event controller" ]
# [ repr ( C ) ]
pub struct Exti {
    # [ doc = "0x00 - Interrupt mask register (EXTI_IMR)" ]
    pub imr: volatile::ReadWrite<Imr>,
    # [ doc = "0x04 - Event mask register (EXTI_EMR)" ]
    pub emr: volatile::ReadWrite<Emr>,
    # [ doc = "0x08 - Rising Trigger selection register (EXTI_RTSR)" ]
    pub rtsr: volatile::ReadWrite<Rtsr>,
    # [ doc = "0x0c - Falling Trigger selection register (EXTI_FTSR)" ]
    pub ftsr: volatile::ReadWrite<Ftsr>,
    # [ doc = "0x10 - Software interrupt event register (EXTI_SWIER)" ]
    pub swier: volatile::ReadWrite<Swier>,
    # [ doc = "0x14 - Pending register (EXTI_PR)" ]
    pub pr: volatile::ReadWrite<Pr>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Imr {
    bits: u32,
}

impl Imr {
    # [ doc = "Bit 0 - Interrupt Mask on line 0" ]
    pub fn mr0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Interrupt Mask on line 1" ]
    pub fn mr1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Interrupt Mask on line 2" ]
    pub fn mr2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Interrupt Mask on line 3" ]
    pub fn mr3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Interrupt Mask on line 4" ]
    pub fn mr4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Interrupt Mask on line 5" ]
    pub fn mr5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Interrupt Mask on line 6" ]
    pub fn mr6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Interrupt Mask on line 7" ]
    pub fn mr7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Interrupt Mask on line 8" ]
    pub fn mr8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Interrupt Mask on line 9" ]
    pub fn mr9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Interrupt Mask on line 10" ]
    pub fn mr10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Interrupt Mask on line 11" ]
    pub fn mr11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Interrupt Mask on line 12" ]
    pub fn mr12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Interrupt Mask on line 13" ]
    pub fn mr13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Interrupt Mask on line 14" ]
    pub fn mr14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Interrupt Mask on line 15" ]
    pub fn mr15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Interrupt Mask on line 16" ]
    pub fn mr16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Interrupt Mask on line 17" ]
    pub fn mr17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Interrupt Mask on line 18" ]
    pub fn mr18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Interrupt Mask on line 19" ]
    pub fn mr19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Interrupt Mask on line 20" ]
    pub fn mr20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Interrupt Mask on line 21" ]
    pub fn mr21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Interrupt Mask on line 22" ]
    pub fn mr22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Imr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Imr { bits: 0u32 }
    }
}

impl Imr {
    # [ doc = "Bit 0 - Interrupt Mask on line 0" ]
    pub fn set_mr0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Interrupt Mask on line 1" ]
    pub fn set_mr1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Interrupt Mask on line 2" ]
    pub fn set_mr2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Interrupt Mask on line 3" ]
    pub fn set_mr3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Interrupt Mask on line 4" ]
    pub fn set_mr4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Interrupt Mask on line 5" ]
    pub fn set_mr5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Interrupt Mask on line 6" ]
    pub fn set_mr6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Interrupt Mask on line 7" ]
    pub fn set_mr7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Interrupt Mask on line 8" ]
    pub fn set_mr8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Interrupt Mask on line 9" ]
    pub fn set_mr9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Interrupt Mask on line 10" ]
    pub fn set_mr10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Interrupt Mask on line 11" ]
    pub fn set_mr11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Interrupt Mask on line 12" ]
    pub fn set_mr12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Interrupt Mask on line 13" ]
    pub fn set_mr13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Interrupt Mask on line 14" ]
    pub fn set_mr14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Interrupt Mask on line 15" ]
    pub fn set_mr15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Interrupt Mask on line 16" ]
    pub fn set_mr16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Interrupt Mask on line 17" ]
    pub fn set_mr17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Interrupt Mask on line 18" ]
    pub fn set_mr18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Interrupt Mask on line 19" ]
    pub fn set_mr19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Interrupt Mask on line 20" ]
    pub fn set_mr20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Interrupt Mask on line 21" ]
    pub fn set_mr21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Interrupt Mask on line 22" ]
    pub fn set_mr22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Emr {
    bits: u32,
}

impl Emr {
    # [ doc = "Bit 0 - Event Mask on line 0" ]
    pub fn mr0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Event Mask on line 1" ]
    pub fn mr1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Event Mask on line 2" ]
    pub fn mr2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Event Mask on line 3" ]
    pub fn mr3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Event Mask on line 4" ]
    pub fn mr4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Event Mask on line 5" ]
    pub fn mr5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Event Mask on line 6" ]
    pub fn mr6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Event Mask on line 7" ]
    pub fn mr7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Event Mask on line 8" ]
    pub fn mr8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Event Mask on line 9" ]
    pub fn mr9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Event Mask on line 10" ]
    pub fn mr10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Event Mask on line 11" ]
    pub fn mr11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Event Mask on line 12" ]
    pub fn mr12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Event Mask on line 13" ]
    pub fn mr13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Event Mask on line 14" ]
    pub fn mr14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Event Mask on line 15" ]
    pub fn mr15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Event Mask on line 16" ]
    pub fn mr16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Event Mask on line 17" ]
    pub fn mr17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Event Mask on line 18" ]
    pub fn mr18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Event Mask on line 19" ]
    pub fn mr19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Event Mask on line 20" ]
    pub fn mr20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Event Mask on line 21" ]
    pub fn mr21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Event Mask on line 22" ]
    pub fn mr22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Emr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Emr { bits: 0u32 }
    }
}

impl Emr {
    # [ doc = "Bit 0 - Event Mask on line 0" ]
    pub fn set_mr0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Event Mask on line 1" ]
    pub fn set_mr1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Event Mask on line 2" ]
    pub fn set_mr2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Event Mask on line 3" ]
    pub fn set_mr3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Event Mask on line 4" ]
    pub fn set_mr4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Event Mask on line 5" ]
    pub fn set_mr5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Event Mask on line 6" ]
    pub fn set_mr6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Event Mask on line 7" ]
    pub fn set_mr7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Event Mask on line 8" ]
    pub fn set_mr8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Event Mask on line 9" ]
    pub fn set_mr9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Event Mask on line 10" ]
    pub fn set_mr10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Event Mask on line 11" ]
    pub fn set_mr11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Event Mask on line 12" ]
    pub fn set_mr12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Event Mask on line 13" ]
    pub fn set_mr13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Event Mask on line 14" ]
    pub fn set_mr14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Event Mask on line 15" ]
    pub fn set_mr15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Event Mask on line 16" ]
    pub fn set_mr16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Event Mask on line 17" ]
    pub fn set_mr17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Event Mask on line 18" ]
    pub fn set_mr18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Event Mask on line 19" ]
    pub fn set_mr19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Event Mask on line 20" ]
    pub fn set_mr20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Event Mask on line 21" ]
    pub fn set_mr21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Event Mask on line 22" ]
    pub fn set_mr22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Rtsr {
    bits: u32,
}

impl Rtsr {
    # [ doc = "Bit 0 - Rising trigger event configuration of line 0" ]
    pub fn tr0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Rising trigger event configuration of line 1" ]
    pub fn tr1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Rising trigger event configuration of line 2" ]
    pub fn tr2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Rising trigger event configuration of line 3" ]
    pub fn tr3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Rising trigger event configuration of line 4" ]
    pub fn tr4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Rising trigger event configuration of line 5" ]
    pub fn tr5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Rising trigger event configuration of line 6" ]
    pub fn tr6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Rising trigger event configuration of line 7" ]
    pub fn tr7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Rising trigger event configuration of line 8" ]
    pub fn tr8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Rising trigger event configuration of line 9" ]
    pub fn tr9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Rising trigger event configuration of line 10" ]
    pub fn tr10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Rising trigger event configuration of line 11" ]
    pub fn tr11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Rising trigger event configuration of line 12" ]
    pub fn tr12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Rising trigger event configuration of line 13" ]
    pub fn tr13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Rising trigger event configuration of line 14" ]
    pub fn tr14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Rising trigger event configuration of line 15" ]
    pub fn tr15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Rising trigger event configuration of line 16" ]
    pub fn tr16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Rising trigger event configuration of line 17" ]
    pub fn tr17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Rising trigger event configuration of line 18" ]
    pub fn tr18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Rising trigger event configuration of line 19" ]
    pub fn tr19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Rising trigger event configuration of line 20" ]
    pub fn tr20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Rising trigger event configuration of line 21" ]
    pub fn tr21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Rising trigger event configuration of line 22" ]
    pub fn tr22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Rtsr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Rtsr { bits: 0u32 }
    }
}

impl Rtsr {
    # [ doc = "Bit 0 - Rising trigger event configuration of line 0" ]
    pub fn set_tr0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Rising trigger event configuration of line 1" ]
    pub fn set_tr1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Rising trigger event configuration of line 2" ]
    pub fn set_tr2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Rising trigger event configuration of line 3" ]
    pub fn set_tr3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Rising trigger event configuration of line 4" ]
    pub fn set_tr4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Rising trigger event configuration of line 5" ]
    pub fn set_tr5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Rising trigger event configuration of line 6" ]
    pub fn set_tr6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Rising trigger event configuration of line 7" ]
    pub fn set_tr7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Rising trigger event configuration of line 8" ]
    pub fn set_tr8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Rising trigger event configuration of line 9" ]
    pub fn set_tr9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Rising trigger event configuration of line 10" ]
    pub fn set_tr10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Rising trigger event configuration of line 11" ]
    pub fn set_tr11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Rising trigger event configuration of line 12" ]
    pub fn set_tr12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Rising trigger event configuration of line 13" ]
    pub fn set_tr13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Rising trigger event configuration of line 14" ]
    pub fn set_tr14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Rising trigger event configuration of line 15" ]
    pub fn set_tr15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Rising trigger event configuration of line 16" ]
    pub fn set_tr16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Rising trigger event configuration of line 17" ]
    pub fn set_tr17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Rising trigger event configuration of line 18" ]
    pub fn set_tr18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Rising trigger event configuration of line 19" ]
    pub fn set_tr19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Rising trigger event configuration of line 20" ]
    pub fn set_tr20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Rising trigger event configuration of line 21" ]
    pub fn set_tr21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Rising trigger event configuration of line 22" ]
    pub fn set_tr22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Ftsr {
    bits: u32,
}

impl Ftsr {
    # [ doc = "Bit 0 - Falling trigger event configuration of line 0" ]
    pub fn tr0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Falling trigger event configuration of line 1" ]
    pub fn tr1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Falling trigger event configuration of line 2" ]
    pub fn tr2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Falling trigger event configuration of line 3" ]
    pub fn tr3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Falling trigger event configuration of line 4" ]
    pub fn tr4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Falling trigger event configuration of line 5" ]
    pub fn tr5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Falling trigger event configuration of line 6" ]
    pub fn tr6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Falling trigger event configuration of line 7" ]
    pub fn tr7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Falling trigger event configuration of line 8" ]
    pub fn tr8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Falling trigger event configuration of line 9" ]
    pub fn tr9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Falling trigger event configuration of line 10" ]
    pub fn tr10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Falling trigger event configuration of line 11" ]
    pub fn tr11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Falling trigger event configuration of line 12" ]
    pub fn tr12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Falling trigger event configuration of line 13" ]
    pub fn tr13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Falling trigger event configuration of line 14" ]
    pub fn tr14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Falling trigger event configuration of line 15" ]
    pub fn tr15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Falling trigger event configuration of line 16" ]
    pub fn tr16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Falling trigger event configuration of line 17" ]
    pub fn tr17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Falling trigger event configuration of line 18" ]
    pub fn tr18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Falling trigger event configuration of line 19" ]
    pub fn tr19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Falling trigger event configuration of line 20" ]
    pub fn tr20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Falling trigger event configuration of line 21" ]
    pub fn tr21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Falling trigger event configuration of line 22" ]
    pub fn tr22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Ftsr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ftsr { bits: 0u32 }
    }
}

impl Ftsr {
    # [ doc = "Bit 0 - Falling trigger event configuration of line 0" ]
    pub fn set_tr0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Falling trigger event configuration of line 1" ]
    pub fn set_tr1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Falling trigger event configuration of line 2" ]
    pub fn set_tr2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Falling trigger event configuration of line 3" ]
    pub fn set_tr3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Falling trigger event configuration of line 4" ]
    pub fn set_tr4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Falling trigger event configuration of line 5" ]
    pub fn set_tr5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Falling trigger event configuration of line 6" ]
    pub fn set_tr6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Falling trigger event configuration of line 7" ]
    pub fn set_tr7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Falling trigger event configuration of line 8" ]
    pub fn set_tr8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Falling trigger event configuration of line 9" ]
    pub fn set_tr9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Falling trigger event configuration of line 10" ]
    pub fn set_tr10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Falling trigger event configuration of line 11" ]
    pub fn set_tr11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Falling trigger event configuration of line 12" ]
    pub fn set_tr12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Falling trigger event configuration of line 13" ]
    pub fn set_tr13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Falling trigger event configuration of line 14" ]
    pub fn set_tr14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Falling trigger event configuration of line 15" ]
    pub fn set_tr15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Falling trigger event configuration of line 16" ]
    pub fn set_tr16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Falling trigger event configuration of line 17" ]
    pub fn set_tr17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Falling trigger event configuration of line 18" ]
    pub fn set_tr18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Falling trigger event configuration of line 19" ]
    pub fn set_tr19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Falling trigger event configuration of line 20" ]
    pub fn set_tr20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Falling trigger event configuration of line 21" ]
    pub fn set_tr21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Falling trigger event configuration of line 22" ]
    pub fn set_tr22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Swier {
    bits: u32,
}

impl Swier {
    # [ doc = "Bit 0 - Software Interrupt on line 0" ]
    pub fn swier0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Software Interrupt on line 1" ]
    pub fn swier1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Software Interrupt on line 2" ]
    pub fn swier2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Software Interrupt on line 3" ]
    pub fn swier3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Software Interrupt on line 4" ]
    pub fn swier4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Software Interrupt on line 5" ]
    pub fn swier5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Software Interrupt on line 6" ]
    pub fn swier6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Software Interrupt on line 7" ]
    pub fn swier7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Software Interrupt on line 8" ]
    pub fn swier8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Software Interrupt on line 9" ]
    pub fn swier9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Software Interrupt on line 10" ]
    pub fn swier10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Software Interrupt on line 11" ]
    pub fn swier11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Software Interrupt on line 12" ]
    pub fn swier12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Software Interrupt on line 13" ]
    pub fn swier13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Software Interrupt on line 14" ]
    pub fn swier14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Software Interrupt on line 15" ]
    pub fn swier15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Software Interrupt on line 16" ]
    pub fn swier16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Software Interrupt on line 17" ]
    pub fn swier17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Software Interrupt on line 18" ]
    pub fn swier18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Software Interrupt on line 19" ]
    pub fn swier19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Software Interrupt on line 20" ]
    pub fn swier20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Software Interrupt on line 21" ]
    pub fn swier21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Software Interrupt on line 22" ]
    pub fn swier22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Swier {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Swier { bits: 0u32 }
    }
}

impl Swier {
    # [ doc = "Bit 0 - Software Interrupt on line 0" ]
    pub fn set_swier0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Software Interrupt on line 1" ]
    pub fn set_swier1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Software Interrupt on line 2" ]
    pub fn set_swier2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Software Interrupt on line 3" ]
    pub fn set_swier3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Software Interrupt on line 4" ]
    pub fn set_swier4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Software Interrupt on line 5" ]
    pub fn set_swier5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Software Interrupt on line 6" ]
    pub fn set_swier6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Software Interrupt on line 7" ]
    pub fn set_swier7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Software Interrupt on line 8" ]
    pub fn set_swier8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Software Interrupt on line 9" ]
    pub fn set_swier9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Software Interrupt on line 10" ]
    pub fn set_swier10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Software Interrupt on line 11" ]
    pub fn set_swier11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Software Interrupt on line 12" ]
    pub fn set_swier12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Software Interrupt on line 13" ]
    pub fn set_swier13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Software Interrupt on line 14" ]
    pub fn set_swier14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Software Interrupt on line 15" ]
    pub fn set_swier15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Software Interrupt on line 16" ]
    pub fn set_swier16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Software Interrupt on line 17" ]
    pub fn set_swier17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Software Interrupt on line 18" ]
    pub fn set_swier18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Software Interrupt on line 19" ]
    pub fn set_swier19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Software Interrupt on line 20" ]
    pub fn set_swier20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Software Interrupt on line 21" ]
    pub fn set_swier21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Software Interrupt on line 22" ]
    pub fn set_swier22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Pr {
    bits: u32,
}

impl Pr {
    # [ doc = "Bit 0 - Pending bit 0" ]
    pub fn pr0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Pending bit 1" ]
    pub fn pr1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - Pending bit 2" ]
    pub fn pr2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - Pending bit 3" ]
    pub fn pr3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - Pending bit 4" ]
    pub fn pr4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - Pending bit 5" ]
    pub fn pr5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - Pending bit 6" ]
    pub fn pr6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - Pending bit 7" ]
    pub fn pr7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - Pending bit 8" ]
    pub fn pr8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - Pending bit 9" ]
    pub fn pr9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - Pending bit 10" ]
    pub fn pr10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - Pending bit 11" ]
    pub fn pr11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - Pending bit 12" ]
    pub fn pr12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - Pending bit 13" ]
    pub fn pr13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - Pending bit 14" ]
    pub fn pr14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - Pending bit 15" ]
    pub fn pr15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - Pending bit 16" ]
    pub fn pr16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - Pending bit 17" ]
    pub fn pr17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - Pending bit 18" ]
    pub fn pr18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - Pending bit 19" ]
    pub fn pr19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - Pending bit 20" ]
    pub fn pr20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - Pending bit 21" ]
    pub fn pr21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - Pending bit 22" ]
    pub fn pr22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
}

impl Default for Pr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Pr { bits: 0u32 }
    }
}

impl Pr {
    # [ doc = "Bit 0 - Pending bit 0" ]
    pub fn set_pr0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Pending bit 1" ]
    pub fn set_pr1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - Pending bit 2" ]
    pub fn set_pr2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - Pending bit 3" ]
    pub fn set_pr3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - Pending bit 4" ]
    pub fn set_pr4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - Pending bit 5" ]
    pub fn set_pr5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - Pending bit 6" ]
    pub fn set_pr6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - Pending bit 7" ]
    pub fn set_pr7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - Pending bit 8" ]
    pub fn set_pr8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - Pending bit 9" ]
    pub fn set_pr9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - Pending bit 10" ]
    pub fn set_pr10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - Pending bit 11" ]
    pub fn set_pr11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - Pending bit 12" ]
    pub fn set_pr12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - Pending bit 13" ]
    pub fn set_pr13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - Pending bit 14" ]
    pub fn set_pr14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Pending bit 15" ]
    pub fn set_pr15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - Pending bit 16" ]
    pub fn set_pr16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - Pending bit 17" ]
    pub fn set_pr17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - Pending bit 18" ]
    pub fn set_pr18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - Pending bit 19" ]
    pub fn set_pr19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - Pending bit 20" ]
    pub fn set_pr20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - Pending bit 21" ]
    pub fn set_pr21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - Pending bit 22" ]
    pub fn set_pr22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
}
