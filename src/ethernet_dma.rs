// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Ethernet: DMA controller operation" ]
# [ repr ( C ) ]
pub struct EthernetDma {
    # [ doc = "0x00 - Ethernet DMA bus mode register" ]
    pub dmabmr: volatile::ReadWrite<Dmabmr>,
    # [ doc = "0x04 - Ethernet DMA transmit poll demand register" ]
    pub dmatpdr: volatile::ReadWrite<Dmatpdr>,
    # [ doc = "0x08 - EHERNET DMA receive poll demand register" ]
    pub dmarpdr: volatile::ReadWrite<Dmarpdr>,
    # [ doc = "0x0c - Ethernet DMA receive descriptor list address register" ]
    pub dmardlar: volatile::ReadWrite<Dmardlar>,
    # [ doc = "0x10 - Ethernet DMA transmit descriptor list address register" ]
    pub dmatdlar: volatile::ReadWrite<Dmatdlar>,
    # [ doc = "0x14 - Ethernet DMA status register" ]
    pub dmasr: volatile::ReadWrite<Dmasr>,
    # [ doc = "0x18 - Ethernet DMA operation mode register" ]
    pub dmaomr: volatile::ReadWrite<Dmaomr>,
    # [ doc = "0x1c - Ethernet DMA interrupt enable register" ]
    pub dmaier: volatile::ReadWrite<Dmaier>,
    # [ doc = "0x20 - Ethernet DMA missed frame and buffer overflow counter register" ]
    pub dmamfbocr: volatile::ReadWrite<Dmamfbocr>,
    # [ doc = "0x24 - Ethernet DMA receive status watchdog timer register" ]
    pub dmarswtr: volatile::ReadWrite<Dmarswtr>,
    _reserved0: [u8; 32usize],
    # [ doc = "0x48 - Ethernet DMA current host transmit descriptor register" ]
    pub dmachtdr: volatile::ReadOnly<Dmachtdr>,
    # [ doc = "0x4c - Ethernet DMA current host receive descriptor register" ]
    pub dmachrdr: volatile::ReadOnly<Dmachrdr>,
    # [ doc = "0x50 - Ethernet DMA current host transmit buffer address register" ]
    pub dmachtbar: volatile::ReadOnly<Dmachtbar>,
    # [ doc = "0x54 - Ethernet DMA current host receive buffer address register" ]
    pub dmachrbar: volatile::ReadOnly<Dmachrbar>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmabmr {
    bits: u32,
}

impl Dmabmr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn sr(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn da(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bits 2:6 - no description available" ]
    pub fn dsl(&self) -> u8 {
        self.bits.get_range(2u8..7u8) as u8
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn edfe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bits 8:13 - no description available" ]
    pub fn pbl(&self) -> u8 {
        self.bits.get_range(8u8..14u8) as u8
    }
    # [ doc = "Bits 14:15 - no description available" ]
    pub fn rtpr(&self) -> u8 {
        self.bits.get_range(14u8..16u8) as u8
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn fb(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bits 17:22 - no description available" ]
    pub fn rdp(&self) -> u8 {
        self.bits.get_range(17u8..23u8) as u8
    }
    # [ doc = "Bit 23 - no description available" ]
    pub fn usp(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - no description available" ]
    pub fn fpm(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - no description available" ]
    pub fn aab(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - no description available" ]
    pub fn mb(&self) -> bool {
        self.bits.get_bit(26u8)
    }
}

impl Default for Dmabmr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmabmr { bits: 8449u32 }
    }
}

impl Dmabmr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_sr(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_da(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bits 2:6 - no description available" ]
    pub fn set_dsl(&mut self, value: u8) {
        self.bits.set_range(2u8..7u8, value as u32);
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn set_edfe(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bits 8:13 - no description available" ]
    pub fn set_pbl(&mut self, value: u8) {
        self.bits.set_range(8u8..14u8, value as u32);
    }
    # [ doc = "Bits 14:15 - no description available" ]
    pub fn set_rtpr(&mut self, value: u8) {
        self.bits.set_range(14u8..16u8, value as u32);
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn set_fb(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bits 17:22 - no description available" ]
    pub fn set_rdp(&mut self, value: u8) {
        self.bits.set_range(17u8..23u8, value as u32);
    }
    # [ doc = "Bit 23 - no description available" ]
    pub fn set_usp(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - no description available" ]
    pub fn set_fpm(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - no description available" ]
    pub fn set_aab(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - no description available" ]
    pub fn set_mb(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmatpdr {
    bits: u32,
}

impl Dmatpdr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn tpd(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmatpdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmatpdr { bits: 0u32 }
    }
}

impl Dmatpdr {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_tpd(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmarpdr {
    bits: u32,
}

impl Dmarpdr {
    # [ doc = "Bits 0:31 - RPD" ]
    pub fn rpd(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmarpdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmarpdr { bits: 0u32 }
    }
}

impl Dmarpdr {
    # [ doc = "Bits 0:31 - RPD" ]
    pub fn set_rpd(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmardlar {
    bits: u32,
}

impl Dmardlar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn srl(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmardlar {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmardlar { bits: 0u32 }
    }
}

impl Dmardlar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_srl(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmatdlar {
    bits: u32,
}

impl Dmatdlar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn stl(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmatdlar {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmatdlar { bits: 0u32 }
    }
}

impl Dmatdlar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_stl(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmasr {
    bits: u32,
}

impl Dmasr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn ts(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn tpss(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn tbus(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn tjts(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn ros(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn tus(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn rs(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn rbus(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn rpss(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn pwts(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - no description available" ]
    pub fn ets(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 13 - no description available" ]
    pub fn fbes(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - no description available" ]
    pub fn ers(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - no description available" ]
    pub fn ais(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn nis(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bits 17:19 - no description available" ]
    pub fn rps(&self) -> u8 {
        self.bits.get_range(17u8..20u8) as u8
    }
    # [ doc = "Bits 20:22 - no description available" ]
    pub fn tps(&self) -> u8 {
        self.bits.get_range(20u8..23u8) as u8
    }
    # [ doc = "Bits 23:25 - no description available" ]
    pub fn ebs(&self) -> u8 {
        self.bits.get_range(23u8..26u8) as u8
    }
    # [ doc = "Bit 27 - no description available" ]
    pub fn mmcs(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - no description available" ]
    pub fn pmts(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - no description available" ]
    pub fn tsts(&self) -> bool {
        self.bits.get_bit(29u8)
    }
}

impl Default for Dmasr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmasr { bits: 0u32 }
    }
}

impl Dmasr {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_ts(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_tpss(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn set_tbus(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn set_tjts(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn set_ros(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn set_tus(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn set_rs(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn set_rbus(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn set_rpss(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_pwts(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - no description available" ]
    pub fn set_ets(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 13 - no description available" ]
    pub fn set_fbes(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - no description available" ]
    pub fn set_ers(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - no description available" ]
    pub fn set_ais(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn set_nis(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmaomr {
    bits: u32,
}

impl Dmaomr {
    # [ doc = "Bit 1 - SR" ]
    pub fn sr(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - OSF" ]
    pub fn osf(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bits 3:4 - RTC" ]
    pub fn rtc(&self) -> u8 {
        self.bits.get_range(3u8..5u8) as u8
    }
    # [ doc = "Bit 6 - FUGF" ]
    pub fn fugf(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - FEF" ]
    pub fn fef(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 13 - ST" ]
    pub fn st(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bits 14:16 - TTC" ]
    pub fn ttc(&self) -> u8 {
        self.bits.get_range(14u8..17u8) as u8
    }
    # [ doc = "Bit 20 - FTF" ]
    pub fn ftf(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - TSF" ]
    pub fn tsf(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 24 - DFRF" ]
    pub fn dfrf(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - RSF" ]
    pub fn rsf(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - DTCEFD" ]
    pub fn dtcefd(&self) -> bool {
        self.bits.get_bit(26u8)
    }
}

impl Default for Dmaomr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmaomr { bits: 0u32 }
    }
}

impl Dmaomr {
    # [ doc = "Bit 1 - SR" ]
    pub fn set_sr(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - OSF" ]
    pub fn set_osf(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bits 3:4 - RTC" ]
    pub fn set_rtc(&mut self, value: u8) {
        self.bits.set_range(3u8..5u8, value as u32);
    }
    # [ doc = "Bit 6 - FUGF" ]
    pub fn set_fugf(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - FEF" ]
    pub fn set_fef(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 13 - ST" ]
    pub fn set_st(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bits 14:16 - TTC" ]
    pub fn set_ttc(&mut self, value: u8) {
        self.bits.set_range(14u8..17u8, value as u32);
    }
    # [ doc = "Bit 20 - FTF" ]
    pub fn set_ftf(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - TSF" ]
    pub fn set_tsf(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 24 - DFRF" ]
    pub fn set_dfrf(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - RSF" ]
    pub fn set_rsf(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - DTCEFD" ]
    pub fn set_dtcefd(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmaier {
    bits: u32,
}

impl Dmaier {
    # [ doc = "Bit 0 - no description available" ]
    pub fn tie(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn tpsie(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn tbuie(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn tjtie(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn roie(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn tuie(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn rie(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn rbuie(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn rpsie(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn rwtie(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - no description available" ]
    pub fn etie(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 13 - no description available" ]
    pub fn fbeie(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - no description available" ]
    pub fn erie(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - no description available" ]
    pub fn aise(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn nise(&self) -> bool {
        self.bits.get_bit(16u8)
    }
}

impl Default for Dmaier {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmaier { bits: 0u32 }
    }
}

impl Dmaier {
    # [ doc = "Bit 0 - no description available" ]
    pub fn set_tie(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - no description available" ]
    pub fn set_tpsie(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - no description available" ]
    pub fn set_tbuie(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - no description available" ]
    pub fn set_tjtie(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - no description available" ]
    pub fn set_roie(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - no description available" ]
    pub fn set_tuie(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - no description available" ]
    pub fn set_rie(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - no description available" ]
    pub fn set_rbuie(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - no description available" ]
    pub fn set_rpsie(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - no description available" ]
    pub fn set_rwtie(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - no description available" ]
    pub fn set_etie(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 13 - no description available" ]
    pub fn set_fbeie(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - no description available" ]
    pub fn set_erie(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - no description available" ]
    pub fn set_aise(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn set_nise(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmamfbocr {
    bits: u32,
}

impl Dmamfbocr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn mfc(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn omfc(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bits 17:27 - no description available" ]
    pub fn mfa(&self) -> u16 {
        self.bits.get_range(17u8..28u8) as u16
    }
    # [ doc = "Bit 28 - no description available" ]
    pub fn ofoc(&self) -> bool {
        self.bits.get_bit(28u8)
    }
}

impl Default for Dmamfbocr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmamfbocr { bits: 0u32 }
    }
}

impl Dmamfbocr {
    # [ doc = "Bits 0:15 - no description available" ]
    pub fn set_mfc(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
    # [ doc = "Bit 16 - no description available" ]
    pub fn set_omfc(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bits 17:27 - no description available" ]
    pub fn set_mfa(&mut self, value: u16) {
        self.bits.set_range(17u8..28u8, value as u32);
    }
    # [ doc = "Bit 28 - no description available" ]
    pub fn set_ofoc(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmarswtr {
    bits: u32,
}

impl Dmarswtr {
    # [ doc = "Bits 0:7 - RSWTC" ]
    pub fn rswtc(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Dmarswtr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmarswtr { bits: 0u32 }
    }
}

impl Dmarswtr {
    # [ doc = "Bits 0:7 - RSWTC" ]
    pub fn set_rswtc(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmachtdr {
    bits: u32,
}

impl Dmachtdr {
    # [ doc = "Bits 0:31 - HTDAP" ]
    pub fn htdap(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmachtdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmachtdr { bits: 0u32 }
    }
}

impl Dmachtdr {
    # [ doc = "Bits 0:31 - HTDAP" ]
    pub fn set_htdap(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmachrdr {
    bits: u32,
}

impl Dmachrdr {
    # [ doc = "Bits 0:31 - HRDAP" ]
    pub fn hrdap(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmachrdr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmachrdr { bits: 0u32 }
    }
}

impl Dmachrdr {
    # [ doc = "Bits 0:31 - HRDAP" ]
    pub fn set_hrdap(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmachtbar {
    bits: u32,
}

impl Dmachtbar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn htbap(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmachtbar {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmachtbar { bits: 0u32 }
    }
}

impl Dmachtbar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_htbap(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmachrbar {
    bits: u32,
}

impl Dmachrbar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn hrbap(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dmachrbar {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmachrbar { bits: 0u32 }
    }
}

impl Dmachrbar {
    # [ doc = "Bits 0:31 - no description available" ]
    pub fn set_hrbap(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}
