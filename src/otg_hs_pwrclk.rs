// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "USB on the go high speed" ]
# [ repr ( C ) ]
pub struct OtgHsPwrclk {
    # [ doc = "0x00 - Power and clock gating control register" ]
    pub otg_hs_pcgcr: volatile::ReadWrite<OtgHsPcgcr>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct OtgHsPcgcr {
    bits: u32,
}

impl OtgHsPcgcr {
    # [ doc = "Bit 0 - Stop PHY clock" ]
    pub fn stppclk(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - Gate HCLK" ]
    pub fn gatehclk(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 4 - PHY suspended" ]
    pub fn physusp(&self) -> bool {
        self.bits.get_bit(4u8)
    }
}

impl Default for OtgHsPcgcr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        OtgHsPcgcr { bits: 0u32 }
    }
}

impl OtgHsPcgcr {
    # [ doc = "Bit 0 - Stop PHY clock" ]
    pub fn set_stppclk(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - Gate HCLK" ]
    pub fn set_gatehclk(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 4 - PHY suspended" ]
    pub fn set_physusp(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
}
