// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Cryptographic processor" ]
# [ repr ( C ) ]
pub struct Cryp {
    # [ doc = "0x00 - control register" ]
    pub cr: volatile::ReadWrite<Cr>,
    # [ doc = "0x04 - status register" ]
    pub sr: volatile::ReadOnly<Sr>,
    # [ doc = "0x08 - data input register" ]
    pub din: volatile::ReadWrite<Din>,
    # [ doc = "0x0c - data output register" ]
    pub dout: volatile::ReadOnly<Dout>,
    # [ doc = "0x10 - DMA control register" ]
    pub dmacr: volatile::ReadWrite<Dmacr>,
    # [ doc = "0x14 - interrupt mask set/clear register" ]
    pub imscr: volatile::ReadWrite<Imscr>,
    # [ doc = "0x18 - raw interrupt status register" ]
    pub risr: volatile::ReadOnly<Risr>,
    # [ doc = "0x1c - masked interrupt status register" ]
    pub misr: volatile::ReadOnly<Misr>,
    # [ doc = "0x20 - key registers" ]
    pub k0lr: volatile::WriteOnly<K0lr>,
    # [ doc = "0x24 - key registers" ]
    pub k0rr: volatile::WriteOnly<K0rr>,
    # [ doc = "0x28 - key registers" ]
    pub k1lr: volatile::WriteOnly<K1lr>,
    # [ doc = "0x2c - key registers" ]
    pub k1rr: volatile::WriteOnly<K1rr>,
    # [ doc = "0x30 - key registers" ]
    pub k2lr: volatile::WriteOnly<K2lr>,
    # [ doc = "0x34 - key registers" ]
    pub k2rr: volatile::WriteOnly<K2rr>,
    # [ doc = "0x38 - key registers" ]
    pub k3lr: volatile::WriteOnly<K3lr>,
    # [ doc = "0x3c - key registers" ]
    pub k3rr: volatile::WriteOnly<K3rr>,
    # [ doc = "0x40 - initialization vector registers" ]
    pub iv0lr: volatile::ReadWrite<Iv0lr>,
    # [ doc = "0x44 - initialization vector registers" ]
    pub iv0rr: volatile::ReadWrite<Iv0rr>,
    # [ doc = "0x48 - initialization vector registers" ]
    pub iv1lr: volatile::ReadWrite<Iv1lr>,
    # [ doc = "0x4c - initialization vector registers" ]
    pub iv1rr: volatile::ReadWrite<Iv1rr>,
    # [ doc = "0x50 - context swap register" ]
    pub csgcmccm0r: volatile::ReadWrite<Csgcmccm0r>,
    # [ doc = "0x54 - context swap register" ]
    pub csgcmccm1r: volatile::ReadWrite<Csgcmccm1r>,
    # [ doc = "0x58 - context swap register" ]
    pub csgcmccm2r: volatile::ReadWrite<Csgcmccm2r>,
    # [ doc = "0x5c - context swap register" ]
    pub csgcmccm3r: volatile::ReadWrite<Csgcmccm3r>,
    # [ doc = "0x60 - context swap register" ]
    pub csgcmccm4r: volatile::ReadWrite<Csgcmccm4r>,
    # [ doc = "0x64 - context swap register" ]
    pub csgcmccm5r: volatile::ReadWrite<Csgcmccm5r>,
    # [ doc = "0x68 - context swap register" ]
    pub csgcmccm6r: volatile::ReadWrite<Csgcmccm6r>,
    # [ doc = "0x6c - context swap register" ]
    pub csgcmccm7r: volatile::ReadWrite<Csgcmccm7r>,
    # [ doc = "0x70 - context swap register" ]
    pub csgcm0r: volatile::ReadWrite<Csgcm0r>,
    # [ doc = "0x74 - context swap register" ]
    pub csgcm1r: volatile::ReadWrite<Csgcm1r>,
    # [ doc = "0x78 - context swap register" ]
    pub csgcm2r: volatile::ReadWrite<Csgcm2r>,
    # [ doc = "0x7c - context swap register" ]
    pub csgcm3r: volatile::ReadWrite<Csgcm3r>,
    # [ doc = "0x80 - context swap register" ]
    pub csgcm4r: volatile::ReadWrite<Csgcm4r>,
    # [ doc = "0x84 - context swap register" ]
    pub csgcm5r: volatile::ReadWrite<Csgcm5r>,
    # [ doc = "0x88 - context swap register" ]
    pub csgcm6r: volatile::ReadWrite<Csgcm6r>,
    # [ doc = "0x8c - context swap register" ]
    pub csgcm7r: volatile::ReadWrite<Csgcm7r>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Cr {
    bits: u32,
}

impl Cr {
    # [ doc = "Bit 2 - Algorithm direction" ]
    pub fn algodir(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bits 3:5 - Algorithm mode" ]
    pub fn algomode0(&self) -> u8 {
        self.bits.get_range(3u8..6u8) as u8
    }
    # [ doc = "Bits 6:7 - Data type selection" ]
    pub fn datatype(&self) -> u8 {
        self.bits.get_range(6u8..8u8) as u8
    }
    # [ doc = "Bits 8:9 - Key size selection (AES mode only)" ]
    pub fn keysize(&self) -> u8 {
        self.bits.get_range(8u8..10u8) as u8
    }
    # [ doc = "Bit 15 - Cryptographic processor enable" ]
    pub fn crypen(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bits 16:17 - GCM_CCMPH" ]
    pub fn gcm_ccmph(&self) -> u8 {
        self.bits.get_range(16u8..18u8) as u8
    }
    # [ doc = "Bit 19 - ALGOMODE" ]
    pub fn algomode3(&self) -> bool {
        self.bits.get_bit(19u8)
    }
}

impl Default for Cr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr { bits: 0u32 }
    }
}

impl Cr {
    # [ doc = "Bit 2 - Algorithm direction" ]
    pub fn set_algodir(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bits 3:5 - Algorithm mode" ]
    pub fn set_algomode0(&mut self, value: u8) {
        self.bits.set_range(3u8..6u8, value as u32);
    }
    # [ doc = "Bits 6:7 - Data type selection" ]
    pub fn set_datatype(&mut self, value: u8) {
        self.bits.set_range(6u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:9 - Key size selection (AES mode only)" ]
    pub fn set_keysize(&mut self, value: u8) {
        self.bits.set_range(8u8..10u8, value as u32);
    }
    # [ doc = "Bit 14 - FIFO flush" ]
    pub fn set_fflush(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - Cryptographic processor enable" ]
    pub fn set_crypen(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bits 16:17 - GCM_CCMPH" ]
    pub fn set_gcm_ccmph(&mut self, value: u8) {
        self.bits.set_range(16u8..18u8, value as u32);
    }
    # [ doc = "Bit 19 - ALGOMODE" ]
    pub fn set_algomode3(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Sr {
    bits: u32,
}

impl Sr {
    # [ doc = "Bit 4 - Busy bit" ]
    pub fn busy(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 3 - Output FIFO full" ]
    pub fn offu(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - Output FIFO not empty" ]
    pub fn ofne(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - Input FIFO not full" ]
    pub fn ifnf(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Input FIFO empty" ]
    pub fn ifem(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Sr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Sr { bits: 3u32 }
    }
}

impl Sr {
    # [ doc = "Bit 4 - Busy bit" ]
    pub fn set_busy(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 3 - Output FIFO full" ]
    pub fn set_offu(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - Output FIFO not empty" ]
    pub fn set_ofne(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - Input FIFO not full" ]
    pub fn set_ifnf(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Input FIFO empty" ]
    pub fn set_ifem(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Din {
    bits: u32,
}

impl Din {
    # [ doc = "Bits 0:31 - Data input" ]
    pub fn datain(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Din {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Din { bits: 0u32 }
    }
}

impl Din {
    # [ doc = "Bits 0:31 - Data input" ]
    pub fn set_datain(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dout {
    bits: u32,
}

impl Dout {
    # [ doc = "Bits 0:31 - Data output" ]
    pub fn dataout(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dout {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dout { bits: 0u32 }
    }
}

impl Dout {
    # [ doc = "Bits 0:31 - Data output" ]
    pub fn set_dataout(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Dmacr {
    bits: u32,
}

impl Dmacr {
    # [ doc = "Bit 1 - DMA output enable" ]
    pub fn doen(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - DMA input enable" ]
    pub fn dien(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Dmacr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dmacr { bits: 0u32 }
    }
}

impl Dmacr {
    # [ doc = "Bit 1 - DMA output enable" ]
    pub fn set_doen(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - DMA input enable" ]
    pub fn set_dien(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Imscr {
    bits: u32,
}

impl Imscr {
    # [ doc = "Bit 1 - Output FIFO service interrupt mask" ]
    pub fn outim(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Input FIFO service interrupt mask" ]
    pub fn inim(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Imscr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Imscr { bits: 0u32 }
    }
}

impl Imscr {
    # [ doc = "Bit 1 - Output FIFO service interrupt mask" ]
    pub fn set_outim(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Input FIFO service interrupt mask" ]
    pub fn set_inim(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Risr {
    bits: u32,
}

impl Risr {
    # [ doc = "Bit 1 - Output FIFO service raw interrupt status" ]
    pub fn outris(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Input FIFO service raw interrupt status" ]
    pub fn inris(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Risr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Risr { bits: 1u32 }
    }
}

impl Risr {
    # [ doc = "Bit 1 - Output FIFO service raw interrupt status" ]
    pub fn set_outris(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Input FIFO service raw interrupt status" ]
    pub fn set_inris(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Misr {
    bits: u32,
}

impl Misr {
    # [ doc = "Bit 1 - Output FIFO service masked interrupt status" ]
    pub fn outmis(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Input FIFO service masked interrupt status" ]
    pub fn inmis(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Misr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Misr { bits: 0u32 }
    }
}

impl Misr {
    # [ doc = "Bit 1 - Output FIFO service masked interrupt status" ]
    pub fn set_outmis(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Input FIFO service masked interrupt status" ]
    pub fn set_inmis(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K0lr {
    bits: u32,
}

impl K0lr {
    # [ doc = "Bit 0 - b224" ]
    pub fn b224(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b225" ]
    pub fn b225(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b226" ]
    pub fn b226(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b227" ]
    pub fn b227(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b228" ]
    pub fn b228(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b229" ]
    pub fn b229(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b230" ]
    pub fn b230(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b231" ]
    pub fn b231(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b232" ]
    pub fn b232(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b233" ]
    pub fn b233(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b234" ]
    pub fn b234(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b235" ]
    pub fn b235(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b236" ]
    pub fn b236(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b237" ]
    pub fn b237(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b238" ]
    pub fn b238(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b239" ]
    pub fn b239(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b240" ]
    pub fn b240(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b241" ]
    pub fn b241(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b242" ]
    pub fn b242(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b243" ]
    pub fn b243(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b244" ]
    pub fn b244(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b245" ]
    pub fn b245(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b246" ]
    pub fn b246(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b247" ]
    pub fn b247(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b248" ]
    pub fn b248(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b249" ]
    pub fn b249(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b250" ]
    pub fn b250(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b251" ]
    pub fn b251(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b252" ]
    pub fn b252(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b253" ]
    pub fn b253(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b254" ]
    pub fn b254(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b255" ]
    pub fn b255(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K0lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K0lr { bits: 0u32 }
    }
}

impl K0lr {
    # [ doc = "Bit 0 - b224" ]
    pub fn set_b224(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b225" ]
    pub fn set_b225(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b226" ]
    pub fn set_b226(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b227" ]
    pub fn set_b227(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b228" ]
    pub fn set_b228(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b229" ]
    pub fn set_b229(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b230" ]
    pub fn set_b230(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b231" ]
    pub fn set_b231(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b232" ]
    pub fn set_b232(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b233" ]
    pub fn set_b233(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b234" ]
    pub fn set_b234(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b235" ]
    pub fn set_b235(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b236" ]
    pub fn set_b236(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b237" ]
    pub fn set_b237(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b238" ]
    pub fn set_b238(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b239" ]
    pub fn set_b239(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b240" ]
    pub fn set_b240(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b241" ]
    pub fn set_b241(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b242" ]
    pub fn set_b242(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b243" ]
    pub fn set_b243(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b244" ]
    pub fn set_b244(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b245" ]
    pub fn set_b245(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b246" ]
    pub fn set_b246(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b247" ]
    pub fn set_b247(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b248" ]
    pub fn set_b248(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b249" ]
    pub fn set_b249(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b250" ]
    pub fn set_b250(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b251" ]
    pub fn set_b251(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b252" ]
    pub fn set_b252(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b253" ]
    pub fn set_b253(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b254" ]
    pub fn set_b254(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b255" ]
    pub fn set_b255(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K0rr {
    bits: u32,
}

impl K0rr {
    # [ doc = "Bit 0 - b192" ]
    pub fn b192(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b193" ]
    pub fn b193(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b194" ]
    pub fn b194(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b195" ]
    pub fn b195(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b196" ]
    pub fn b196(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b197" ]
    pub fn b197(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b198" ]
    pub fn b198(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b199" ]
    pub fn b199(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b200" ]
    pub fn b200(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b201" ]
    pub fn b201(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b202" ]
    pub fn b202(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b203" ]
    pub fn b203(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b204" ]
    pub fn b204(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b205" ]
    pub fn b205(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b206" ]
    pub fn b206(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b207" ]
    pub fn b207(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b208" ]
    pub fn b208(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b209" ]
    pub fn b209(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b210" ]
    pub fn b210(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b211" ]
    pub fn b211(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b212" ]
    pub fn b212(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b213" ]
    pub fn b213(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b214" ]
    pub fn b214(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b215" ]
    pub fn b215(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b216" ]
    pub fn b216(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b217" ]
    pub fn b217(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b218" ]
    pub fn b218(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b219" ]
    pub fn b219(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b220" ]
    pub fn b220(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b221" ]
    pub fn b221(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b222" ]
    pub fn b222(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b223" ]
    pub fn b223(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K0rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K0rr { bits: 0u32 }
    }
}

impl K0rr {
    # [ doc = "Bit 0 - b192" ]
    pub fn set_b192(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b193" ]
    pub fn set_b193(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b194" ]
    pub fn set_b194(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b195" ]
    pub fn set_b195(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b196" ]
    pub fn set_b196(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b197" ]
    pub fn set_b197(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b198" ]
    pub fn set_b198(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b199" ]
    pub fn set_b199(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b200" ]
    pub fn set_b200(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b201" ]
    pub fn set_b201(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b202" ]
    pub fn set_b202(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b203" ]
    pub fn set_b203(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b204" ]
    pub fn set_b204(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b205" ]
    pub fn set_b205(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b206" ]
    pub fn set_b206(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b207" ]
    pub fn set_b207(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b208" ]
    pub fn set_b208(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b209" ]
    pub fn set_b209(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b210" ]
    pub fn set_b210(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b211" ]
    pub fn set_b211(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b212" ]
    pub fn set_b212(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b213" ]
    pub fn set_b213(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b214" ]
    pub fn set_b214(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b215" ]
    pub fn set_b215(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b216" ]
    pub fn set_b216(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b217" ]
    pub fn set_b217(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b218" ]
    pub fn set_b218(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b219" ]
    pub fn set_b219(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b220" ]
    pub fn set_b220(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b221" ]
    pub fn set_b221(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b222" ]
    pub fn set_b222(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b223" ]
    pub fn set_b223(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K1lr {
    bits: u32,
}

impl K1lr {
    # [ doc = "Bit 0 - b160" ]
    pub fn b160(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b161" ]
    pub fn b161(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b162" ]
    pub fn b162(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b163" ]
    pub fn b163(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b164" ]
    pub fn b164(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b165" ]
    pub fn b165(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b166" ]
    pub fn b166(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b167" ]
    pub fn b167(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b168" ]
    pub fn b168(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b169" ]
    pub fn b169(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b170" ]
    pub fn b170(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b171" ]
    pub fn b171(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b172" ]
    pub fn b172(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b173" ]
    pub fn b173(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b174" ]
    pub fn b174(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b175" ]
    pub fn b175(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b176" ]
    pub fn b176(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b177" ]
    pub fn b177(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b178" ]
    pub fn b178(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b179" ]
    pub fn b179(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b180" ]
    pub fn b180(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b181" ]
    pub fn b181(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b182" ]
    pub fn b182(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b183" ]
    pub fn b183(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b184" ]
    pub fn b184(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b185" ]
    pub fn b185(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b186" ]
    pub fn b186(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b187" ]
    pub fn b187(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b188" ]
    pub fn b188(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b189" ]
    pub fn b189(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b190" ]
    pub fn b190(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b191" ]
    pub fn b191(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K1lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K1lr { bits: 0u32 }
    }
}

impl K1lr {
    # [ doc = "Bit 0 - b160" ]
    pub fn set_b160(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b161" ]
    pub fn set_b161(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b162" ]
    pub fn set_b162(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b163" ]
    pub fn set_b163(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b164" ]
    pub fn set_b164(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b165" ]
    pub fn set_b165(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b166" ]
    pub fn set_b166(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b167" ]
    pub fn set_b167(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b168" ]
    pub fn set_b168(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b169" ]
    pub fn set_b169(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b170" ]
    pub fn set_b170(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b171" ]
    pub fn set_b171(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b172" ]
    pub fn set_b172(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b173" ]
    pub fn set_b173(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b174" ]
    pub fn set_b174(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b175" ]
    pub fn set_b175(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b176" ]
    pub fn set_b176(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b177" ]
    pub fn set_b177(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b178" ]
    pub fn set_b178(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b179" ]
    pub fn set_b179(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b180" ]
    pub fn set_b180(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b181" ]
    pub fn set_b181(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b182" ]
    pub fn set_b182(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b183" ]
    pub fn set_b183(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b184" ]
    pub fn set_b184(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b185" ]
    pub fn set_b185(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b186" ]
    pub fn set_b186(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b187" ]
    pub fn set_b187(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b188" ]
    pub fn set_b188(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b189" ]
    pub fn set_b189(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b190" ]
    pub fn set_b190(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b191" ]
    pub fn set_b191(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K1rr {
    bits: u32,
}

impl K1rr {
    # [ doc = "Bit 0 - b128" ]
    pub fn b128(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b129" ]
    pub fn b129(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b130" ]
    pub fn b130(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b131" ]
    pub fn b131(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b132" ]
    pub fn b132(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b133" ]
    pub fn b133(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b134" ]
    pub fn b134(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b135" ]
    pub fn b135(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b136" ]
    pub fn b136(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b137" ]
    pub fn b137(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b138" ]
    pub fn b138(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b139" ]
    pub fn b139(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b140" ]
    pub fn b140(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b141" ]
    pub fn b141(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b142" ]
    pub fn b142(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b143" ]
    pub fn b143(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b144" ]
    pub fn b144(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b145" ]
    pub fn b145(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b146" ]
    pub fn b146(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b147" ]
    pub fn b147(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b148" ]
    pub fn b148(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b149" ]
    pub fn b149(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b150" ]
    pub fn b150(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b151" ]
    pub fn b151(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b152" ]
    pub fn b152(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b153" ]
    pub fn b153(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b154" ]
    pub fn b154(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b155" ]
    pub fn b155(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b156" ]
    pub fn b156(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b157" ]
    pub fn b157(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b158" ]
    pub fn b158(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b159" ]
    pub fn b159(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K1rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K1rr { bits: 0u32 }
    }
}

impl K1rr {
    # [ doc = "Bit 0 - b128" ]
    pub fn set_b128(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b129" ]
    pub fn set_b129(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b130" ]
    pub fn set_b130(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b131" ]
    pub fn set_b131(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b132" ]
    pub fn set_b132(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b133" ]
    pub fn set_b133(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b134" ]
    pub fn set_b134(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b135" ]
    pub fn set_b135(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b136" ]
    pub fn set_b136(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b137" ]
    pub fn set_b137(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b138" ]
    pub fn set_b138(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b139" ]
    pub fn set_b139(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b140" ]
    pub fn set_b140(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b141" ]
    pub fn set_b141(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b142" ]
    pub fn set_b142(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b143" ]
    pub fn set_b143(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b144" ]
    pub fn set_b144(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b145" ]
    pub fn set_b145(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b146" ]
    pub fn set_b146(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b147" ]
    pub fn set_b147(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b148" ]
    pub fn set_b148(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b149" ]
    pub fn set_b149(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b150" ]
    pub fn set_b150(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b151" ]
    pub fn set_b151(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b152" ]
    pub fn set_b152(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b153" ]
    pub fn set_b153(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b154" ]
    pub fn set_b154(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b155" ]
    pub fn set_b155(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b156" ]
    pub fn set_b156(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b157" ]
    pub fn set_b157(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b158" ]
    pub fn set_b158(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b159" ]
    pub fn set_b159(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K2lr {
    bits: u32,
}

impl K2lr {
    # [ doc = "Bit 0 - b96" ]
    pub fn b96(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b97" ]
    pub fn b97(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b98" ]
    pub fn b98(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b99" ]
    pub fn b99(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b100" ]
    pub fn b100(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b101" ]
    pub fn b101(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b102" ]
    pub fn b102(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b103" ]
    pub fn b103(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b104" ]
    pub fn b104(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b105" ]
    pub fn b105(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b106" ]
    pub fn b106(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b107" ]
    pub fn b107(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b108" ]
    pub fn b108(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b109" ]
    pub fn b109(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b110" ]
    pub fn b110(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b111" ]
    pub fn b111(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b112" ]
    pub fn b112(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b113" ]
    pub fn b113(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b114" ]
    pub fn b114(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b115" ]
    pub fn b115(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b116" ]
    pub fn b116(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b117" ]
    pub fn b117(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b118" ]
    pub fn b118(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b119" ]
    pub fn b119(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b120" ]
    pub fn b120(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b121" ]
    pub fn b121(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b122" ]
    pub fn b122(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b123" ]
    pub fn b123(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b124" ]
    pub fn b124(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b125" ]
    pub fn b125(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b126" ]
    pub fn b126(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b127" ]
    pub fn b127(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K2lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K2lr { bits: 0u32 }
    }
}

impl K2lr {
    # [ doc = "Bit 0 - b96" ]
    pub fn set_b96(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b97" ]
    pub fn set_b97(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b98" ]
    pub fn set_b98(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b99" ]
    pub fn set_b99(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b100" ]
    pub fn set_b100(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b101" ]
    pub fn set_b101(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b102" ]
    pub fn set_b102(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b103" ]
    pub fn set_b103(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b104" ]
    pub fn set_b104(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b105" ]
    pub fn set_b105(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b106" ]
    pub fn set_b106(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b107" ]
    pub fn set_b107(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b108" ]
    pub fn set_b108(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b109" ]
    pub fn set_b109(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b110" ]
    pub fn set_b110(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b111" ]
    pub fn set_b111(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b112" ]
    pub fn set_b112(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b113" ]
    pub fn set_b113(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b114" ]
    pub fn set_b114(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b115" ]
    pub fn set_b115(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b116" ]
    pub fn set_b116(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b117" ]
    pub fn set_b117(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b118" ]
    pub fn set_b118(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b119" ]
    pub fn set_b119(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b120" ]
    pub fn set_b120(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b121" ]
    pub fn set_b121(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b122" ]
    pub fn set_b122(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b123" ]
    pub fn set_b123(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b124" ]
    pub fn set_b124(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b125" ]
    pub fn set_b125(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b126" ]
    pub fn set_b126(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b127" ]
    pub fn set_b127(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K2rr {
    bits: u32,
}

impl K2rr {
    # [ doc = "Bit 0 - b64" ]
    pub fn b64(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b65" ]
    pub fn b65(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b66" ]
    pub fn b66(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b67" ]
    pub fn b67(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b68" ]
    pub fn b68(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b69" ]
    pub fn b69(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b70" ]
    pub fn b70(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b71" ]
    pub fn b71(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b72" ]
    pub fn b72(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b73" ]
    pub fn b73(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b74" ]
    pub fn b74(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b75" ]
    pub fn b75(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b76" ]
    pub fn b76(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b77" ]
    pub fn b77(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b78" ]
    pub fn b78(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b79" ]
    pub fn b79(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b80" ]
    pub fn b80(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b81" ]
    pub fn b81(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b82" ]
    pub fn b82(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b83" ]
    pub fn b83(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b84" ]
    pub fn b84(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b85" ]
    pub fn b85(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b86" ]
    pub fn b86(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b87" ]
    pub fn b87(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b88" ]
    pub fn b88(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b89" ]
    pub fn b89(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b90" ]
    pub fn b90(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b91" ]
    pub fn b91(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b92" ]
    pub fn b92(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b93" ]
    pub fn b93(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b94" ]
    pub fn b94(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b95" ]
    pub fn b95(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K2rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K2rr { bits: 0u32 }
    }
}

impl K2rr {
    # [ doc = "Bit 0 - b64" ]
    pub fn set_b64(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b65" ]
    pub fn set_b65(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b66" ]
    pub fn set_b66(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b67" ]
    pub fn set_b67(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b68" ]
    pub fn set_b68(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b69" ]
    pub fn set_b69(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b70" ]
    pub fn set_b70(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b71" ]
    pub fn set_b71(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b72" ]
    pub fn set_b72(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b73" ]
    pub fn set_b73(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b74" ]
    pub fn set_b74(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b75" ]
    pub fn set_b75(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b76" ]
    pub fn set_b76(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b77" ]
    pub fn set_b77(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b78" ]
    pub fn set_b78(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b79" ]
    pub fn set_b79(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b80" ]
    pub fn set_b80(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b81" ]
    pub fn set_b81(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b82" ]
    pub fn set_b82(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b83" ]
    pub fn set_b83(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b84" ]
    pub fn set_b84(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b85" ]
    pub fn set_b85(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b86" ]
    pub fn set_b86(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b87" ]
    pub fn set_b87(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b88" ]
    pub fn set_b88(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b89" ]
    pub fn set_b89(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b90" ]
    pub fn set_b90(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b91" ]
    pub fn set_b91(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b92" ]
    pub fn set_b92(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b93" ]
    pub fn set_b93(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b94" ]
    pub fn set_b94(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b95" ]
    pub fn set_b95(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K3lr {
    bits: u32,
}

impl K3lr {
    # [ doc = "Bit 0 - b32" ]
    pub fn b32(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b33" ]
    pub fn b33(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b34" ]
    pub fn b34(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b35" ]
    pub fn b35(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b36" ]
    pub fn b36(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b37" ]
    pub fn b37(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b38" ]
    pub fn b38(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b39" ]
    pub fn b39(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b40" ]
    pub fn b40(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b41" ]
    pub fn b41(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b42" ]
    pub fn b42(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b43" ]
    pub fn b43(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b44" ]
    pub fn b44(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b45" ]
    pub fn b45(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b46" ]
    pub fn b46(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b47" ]
    pub fn b47(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b48" ]
    pub fn b48(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b49" ]
    pub fn b49(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b50" ]
    pub fn b50(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b51" ]
    pub fn b51(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b52" ]
    pub fn b52(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b53" ]
    pub fn b53(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b54" ]
    pub fn b54(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b55" ]
    pub fn b55(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b56" ]
    pub fn b56(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b57" ]
    pub fn b57(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b58" ]
    pub fn b58(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b59" ]
    pub fn b59(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b60" ]
    pub fn b60(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b61" ]
    pub fn b61(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b62" ]
    pub fn b62(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b63" ]
    pub fn b63(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K3lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K3lr { bits: 0u32 }
    }
}

impl K3lr {
    # [ doc = "Bit 0 - b32" ]
    pub fn set_b32(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b33" ]
    pub fn set_b33(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b34" ]
    pub fn set_b34(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b35" ]
    pub fn set_b35(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b36" ]
    pub fn set_b36(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b37" ]
    pub fn set_b37(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b38" ]
    pub fn set_b38(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b39" ]
    pub fn set_b39(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b40" ]
    pub fn set_b40(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b41" ]
    pub fn set_b41(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b42" ]
    pub fn set_b42(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b43" ]
    pub fn set_b43(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b44" ]
    pub fn set_b44(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b45" ]
    pub fn set_b45(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b46" ]
    pub fn set_b46(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b47" ]
    pub fn set_b47(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b48" ]
    pub fn set_b48(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b49" ]
    pub fn set_b49(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b50" ]
    pub fn set_b50(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b51" ]
    pub fn set_b51(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b52" ]
    pub fn set_b52(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b53" ]
    pub fn set_b53(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b54" ]
    pub fn set_b54(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b55" ]
    pub fn set_b55(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b56" ]
    pub fn set_b56(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b57" ]
    pub fn set_b57(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b58" ]
    pub fn set_b58(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b59" ]
    pub fn set_b59(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b60" ]
    pub fn set_b60(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b61" ]
    pub fn set_b61(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b62" ]
    pub fn set_b62(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b63" ]
    pub fn set_b63(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct K3rr {
    bits: u32,
}

impl K3rr {
    # [ doc = "Bit 0 - b0" ]
    pub fn b0(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - b1" ]
    pub fn b1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - b2" ]
    pub fn b2(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - b3" ]
    pub fn b3(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - b4" ]
    pub fn b4(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - b5" ]
    pub fn b5(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - b6" ]
    pub fn b6(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - b7" ]
    pub fn b7(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - b8" ]
    pub fn b8(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - b9" ]
    pub fn b9(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - b10" ]
    pub fn b10(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - b11" ]
    pub fn b11(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - b12" ]
    pub fn b12(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - b13" ]
    pub fn b13(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - b14" ]
    pub fn b14(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - b15" ]
    pub fn b15(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - b16" ]
    pub fn b16(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - b17" ]
    pub fn b17(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - b18" ]
    pub fn b18(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - b19" ]
    pub fn b19(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - b20" ]
    pub fn b20(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - b21" ]
    pub fn b21(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - b22" ]
    pub fn b22(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - b23" ]
    pub fn b23(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - b24" ]
    pub fn b24(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - b25" ]
    pub fn b25(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - b26" ]
    pub fn b26(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - b27" ]
    pub fn b27(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - b28" ]
    pub fn b28(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - b29" ]
    pub fn b29(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - b30" ]
    pub fn b30(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - b31" ]
    pub fn b31(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for K3rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        K3rr { bits: 0u32 }
    }
}

impl K3rr {
    # [ doc = "Bit 0 - b0" ]
    pub fn set_b0(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - b1" ]
    pub fn set_b1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - b2" ]
    pub fn set_b2(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - b3" ]
    pub fn set_b3(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - b4" ]
    pub fn set_b4(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - b5" ]
    pub fn set_b5(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - b6" ]
    pub fn set_b6(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - b7" ]
    pub fn set_b7(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - b8" ]
    pub fn set_b8(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - b9" ]
    pub fn set_b9(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - b10" ]
    pub fn set_b10(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - b11" ]
    pub fn set_b11(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - b12" ]
    pub fn set_b12(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - b13" ]
    pub fn set_b13(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - b14" ]
    pub fn set_b14(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - b15" ]
    pub fn set_b15(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - b16" ]
    pub fn set_b16(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - b17" ]
    pub fn set_b17(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - b18" ]
    pub fn set_b18(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - b19" ]
    pub fn set_b19(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - b20" ]
    pub fn set_b20(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - b21" ]
    pub fn set_b21(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - b22" ]
    pub fn set_b22(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - b23" ]
    pub fn set_b23(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - b24" ]
    pub fn set_b24(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - b25" ]
    pub fn set_b25(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - b26" ]
    pub fn set_b26(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - b27" ]
    pub fn set_b27(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - b28" ]
    pub fn set_b28(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - b29" ]
    pub fn set_b29(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - b30" ]
    pub fn set_b30(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - b31" ]
    pub fn set_b31(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iv0lr {
    bits: u32,
}

impl Iv0lr {
    # [ doc = "Bit 0 - IV31" ]
    pub fn iv31(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - IV30" ]
    pub fn iv30(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - IV29" ]
    pub fn iv29(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - IV28" ]
    pub fn iv28(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - IV27" ]
    pub fn iv27(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - IV26" ]
    pub fn iv26(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - IV25" ]
    pub fn iv25(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - IV24" ]
    pub fn iv24(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - IV23" ]
    pub fn iv23(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - IV22" ]
    pub fn iv22(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - IV21" ]
    pub fn iv21(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - IV20" ]
    pub fn iv20(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - IV19" ]
    pub fn iv19(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - IV18" ]
    pub fn iv18(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - IV17" ]
    pub fn iv17(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - IV16" ]
    pub fn iv16(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - IV15" ]
    pub fn iv15(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - IV14" ]
    pub fn iv14(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - IV13" ]
    pub fn iv13(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - IV12" ]
    pub fn iv12(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - IV11" ]
    pub fn iv11(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - IV10" ]
    pub fn iv10(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - IV9" ]
    pub fn iv9(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - IV8" ]
    pub fn iv8(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - IV7" ]
    pub fn iv7(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - IV6" ]
    pub fn iv6(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - IV5" ]
    pub fn iv5(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - IV4" ]
    pub fn iv4(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - IV3" ]
    pub fn iv3(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - IV2" ]
    pub fn iv2(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - IV1" ]
    pub fn iv1(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - IV0" ]
    pub fn iv0(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Iv0lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iv0lr { bits: 0u32 }
    }
}

impl Iv0lr {
    # [ doc = "Bit 0 - IV31" ]
    pub fn set_iv31(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - IV30" ]
    pub fn set_iv30(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - IV29" ]
    pub fn set_iv29(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - IV28" ]
    pub fn set_iv28(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - IV27" ]
    pub fn set_iv27(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - IV26" ]
    pub fn set_iv26(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - IV25" ]
    pub fn set_iv25(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - IV24" ]
    pub fn set_iv24(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - IV23" ]
    pub fn set_iv23(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - IV22" ]
    pub fn set_iv22(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - IV21" ]
    pub fn set_iv21(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - IV20" ]
    pub fn set_iv20(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - IV19" ]
    pub fn set_iv19(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - IV18" ]
    pub fn set_iv18(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - IV17" ]
    pub fn set_iv17(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - IV16" ]
    pub fn set_iv16(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - IV15" ]
    pub fn set_iv15(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - IV14" ]
    pub fn set_iv14(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - IV13" ]
    pub fn set_iv13(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - IV12" ]
    pub fn set_iv12(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - IV11" ]
    pub fn set_iv11(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - IV10" ]
    pub fn set_iv10(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - IV9" ]
    pub fn set_iv9(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - IV8" ]
    pub fn set_iv8(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - IV7" ]
    pub fn set_iv7(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - IV6" ]
    pub fn set_iv6(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - IV5" ]
    pub fn set_iv5(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - IV4" ]
    pub fn set_iv4(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - IV3" ]
    pub fn set_iv3(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - IV2" ]
    pub fn set_iv2(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - IV1" ]
    pub fn set_iv1(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - IV0" ]
    pub fn set_iv0(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iv0rr {
    bits: u32,
}

impl Iv0rr {
    # [ doc = "Bit 0 - IV63" ]
    pub fn iv63(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - IV62" ]
    pub fn iv62(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - IV61" ]
    pub fn iv61(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - IV60" ]
    pub fn iv60(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - IV59" ]
    pub fn iv59(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - IV58" ]
    pub fn iv58(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - IV57" ]
    pub fn iv57(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - IV56" ]
    pub fn iv56(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - IV55" ]
    pub fn iv55(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - IV54" ]
    pub fn iv54(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - IV53" ]
    pub fn iv53(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - IV52" ]
    pub fn iv52(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - IV51" ]
    pub fn iv51(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - IV50" ]
    pub fn iv50(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - IV49" ]
    pub fn iv49(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - IV48" ]
    pub fn iv48(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - IV47" ]
    pub fn iv47(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - IV46" ]
    pub fn iv46(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - IV45" ]
    pub fn iv45(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - IV44" ]
    pub fn iv44(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - IV43" ]
    pub fn iv43(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - IV42" ]
    pub fn iv42(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - IV41" ]
    pub fn iv41(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - IV40" ]
    pub fn iv40(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - IV39" ]
    pub fn iv39(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - IV38" ]
    pub fn iv38(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - IV37" ]
    pub fn iv37(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - IV36" ]
    pub fn iv36(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - IV35" ]
    pub fn iv35(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - IV34" ]
    pub fn iv34(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - IV33" ]
    pub fn iv33(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - IV32" ]
    pub fn iv32(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Iv0rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iv0rr { bits: 0u32 }
    }
}

impl Iv0rr {
    # [ doc = "Bit 0 - IV63" ]
    pub fn set_iv63(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - IV62" ]
    pub fn set_iv62(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - IV61" ]
    pub fn set_iv61(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - IV60" ]
    pub fn set_iv60(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - IV59" ]
    pub fn set_iv59(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - IV58" ]
    pub fn set_iv58(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - IV57" ]
    pub fn set_iv57(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - IV56" ]
    pub fn set_iv56(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - IV55" ]
    pub fn set_iv55(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - IV54" ]
    pub fn set_iv54(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - IV53" ]
    pub fn set_iv53(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - IV52" ]
    pub fn set_iv52(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - IV51" ]
    pub fn set_iv51(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - IV50" ]
    pub fn set_iv50(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - IV49" ]
    pub fn set_iv49(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - IV48" ]
    pub fn set_iv48(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - IV47" ]
    pub fn set_iv47(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - IV46" ]
    pub fn set_iv46(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - IV45" ]
    pub fn set_iv45(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - IV44" ]
    pub fn set_iv44(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - IV43" ]
    pub fn set_iv43(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - IV42" ]
    pub fn set_iv42(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - IV41" ]
    pub fn set_iv41(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - IV40" ]
    pub fn set_iv40(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - IV39" ]
    pub fn set_iv39(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - IV38" ]
    pub fn set_iv38(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - IV37" ]
    pub fn set_iv37(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - IV36" ]
    pub fn set_iv36(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - IV35" ]
    pub fn set_iv35(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - IV34" ]
    pub fn set_iv34(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - IV33" ]
    pub fn set_iv33(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - IV32" ]
    pub fn set_iv32(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iv1lr {
    bits: u32,
}

impl Iv1lr {
    # [ doc = "Bit 0 - IV95" ]
    pub fn iv95(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - IV94" ]
    pub fn iv94(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - IV93" ]
    pub fn iv93(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - IV92" ]
    pub fn iv92(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - IV91" ]
    pub fn iv91(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - IV90" ]
    pub fn iv90(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - IV89" ]
    pub fn iv89(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - IV88" ]
    pub fn iv88(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - IV87" ]
    pub fn iv87(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - IV86" ]
    pub fn iv86(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - IV85" ]
    pub fn iv85(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - IV84" ]
    pub fn iv84(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - IV83" ]
    pub fn iv83(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - IV82" ]
    pub fn iv82(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - IV81" ]
    pub fn iv81(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - IV80" ]
    pub fn iv80(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - IV79" ]
    pub fn iv79(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - IV78" ]
    pub fn iv78(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - IV77" ]
    pub fn iv77(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - IV76" ]
    pub fn iv76(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - IV75" ]
    pub fn iv75(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - IV74" ]
    pub fn iv74(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - IV73" ]
    pub fn iv73(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - IV72" ]
    pub fn iv72(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - IV71" ]
    pub fn iv71(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - IV70" ]
    pub fn iv70(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - IV69" ]
    pub fn iv69(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - IV68" ]
    pub fn iv68(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - IV67" ]
    pub fn iv67(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - IV66" ]
    pub fn iv66(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - IV65" ]
    pub fn iv65(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - IV64" ]
    pub fn iv64(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Iv1lr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iv1lr { bits: 0u32 }
    }
}

impl Iv1lr {
    # [ doc = "Bit 0 - IV95" ]
    pub fn set_iv95(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - IV94" ]
    pub fn set_iv94(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - IV93" ]
    pub fn set_iv93(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - IV92" ]
    pub fn set_iv92(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - IV91" ]
    pub fn set_iv91(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - IV90" ]
    pub fn set_iv90(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - IV89" ]
    pub fn set_iv89(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - IV88" ]
    pub fn set_iv88(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - IV87" ]
    pub fn set_iv87(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - IV86" ]
    pub fn set_iv86(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - IV85" ]
    pub fn set_iv85(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - IV84" ]
    pub fn set_iv84(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - IV83" ]
    pub fn set_iv83(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - IV82" ]
    pub fn set_iv82(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - IV81" ]
    pub fn set_iv81(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - IV80" ]
    pub fn set_iv80(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - IV79" ]
    pub fn set_iv79(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - IV78" ]
    pub fn set_iv78(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - IV77" ]
    pub fn set_iv77(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - IV76" ]
    pub fn set_iv76(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - IV75" ]
    pub fn set_iv75(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - IV74" ]
    pub fn set_iv74(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - IV73" ]
    pub fn set_iv73(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - IV72" ]
    pub fn set_iv72(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - IV71" ]
    pub fn set_iv71(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - IV70" ]
    pub fn set_iv70(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - IV69" ]
    pub fn set_iv69(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - IV68" ]
    pub fn set_iv68(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - IV67" ]
    pub fn set_iv67(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - IV66" ]
    pub fn set_iv66(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - IV65" ]
    pub fn set_iv65(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - IV64" ]
    pub fn set_iv64(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iv1rr {
    bits: u32,
}

impl Iv1rr {
    # [ doc = "Bit 0 - IV127" ]
    pub fn iv127(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - IV126" ]
    pub fn iv126(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - IV125" ]
    pub fn iv125(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - IV124" ]
    pub fn iv124(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - IV123" ]
    pub fn iv123(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - IV122" ]
    pub fn iv122(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - IV121" ]
    pub fn iv121(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - IV120" ]
    pub fn iv120(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - IV119" ]
    pub fn iv119(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 9 - IV118" ]
    pub fn iv118(&self) -> bool {
        self.bits.get_bit(9u8)
    }
    # [ doc = "Bit 10 - IV117" ]
    pub fn iv117(&self) -> bool {
        self.bits.get_bit(10u8)
    }
    # [ doc = "Bit 11 - IV116" ]
    pub fn iv116(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - IV115" ]
    pub fn iv115(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 13 - IV114" ]
    pub fn iv114(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 14 - IV113" ]
    pub fn iv113(&self) -> bool {
        self.bits.get_bit(14u8)
    }
    # [ doc = "Bit 15 - IV112" ]
    pub fn iv112(&self) -> bool {
        self.bits.get_bit(15u8)
    }
    # [ doc = "Bit 16 - IV111" ]
    pub fn iv111(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - IV110" ]
    pub fn iv110(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - IV109" ]
    pub fn iv109(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 19 - IV108" ]
    pub fn iv108(&self) -> bool {
        self.bits.get_bit(19u8)
    }
    # [ doc = "Bit 20 - IV107" ]
    pub fn iv107(&self) -> bool {
        self.bits.get_bit(20u8)
    }
    # [ doc = "Bit 21 - IV106" ]
    pub fn iv106(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - IV105" ]
    pub fn iv105(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - IV104" ]
    pub fn iv104(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 24 - IV103" ]
    pub fn iv103(&self) -> bool {
        self.bits.get_bit(24u8)
    }
    # [ doc = "Bit 25 - IV102" ]
    pub fn iv102(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - IV101" ]
    pub fn iv101(&self) -> bool {
        self.bits.get_bit(26u8)
    }
    # [ doc = "Bit 27 - IV100" ]
    pub fn iv100(&self) -> bool {
        self.bits.get_bit(27u8)
    }
    # [ doc = "Bit 28 - IV99" ]
    pub fn iv99(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bit 29 - IV98" ]
    pub fn iv98(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 30 - IV97" ]
    pub fn iv97(&self) -> bool {
        self.bits.get_bit(30u8)
    }
    # [ doc = "Bit 31 - IV96" ]
    pub fn iv96(&self) -> bool {
        self.bits.get_bit(31u8)
    }
}

impl Default for Iv1rr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iv1rr { bits: 0u32 }
    }
}

impl Iv1rr {
    # [ doc = "Bit 0 - IV127" ]
    pub fn set_iv127(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - IV126" ]
    pub fn set_iv126(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - IV125" ]
    pub fn set_iv125(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - IV124" ]
    pub fn set_iv124(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - IV123" ]
    pub fn set_iv123(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - IV122" ]
    pub fn set_iv122(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - IV121" ]
    pub fn set_iv121(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - IV120" ]
    pub fn set_iv120(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - IV119" ]
    pub fn set_iv119(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 9 - IV118" ]
    pub fn set_iv118(&mut self, value: bool) {
        self.bits.set_bit(9u8, value);
    }
    # [ doc = "Bit 10 - IV117" ]
    pub fn set_iv117(&mut self, value: bool) {
        self.bits.set_bit(10u8, value);
    }
    # [ doc = "Bit 11 - IV116" ]
    pub fn set_iv116(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - IV115" ]
    pub fn set_iv115(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 13 - IV114" ]
    pub fn set_iv114(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 14 - IV113" ]
    pub fn set_iv113(&mut self, value: bool) {
        self.bits.set_bit(14u8, value);
    }
    # [ doc = "Bit 15 - IV112" ]
    pub fn set_iv112(&mut self, value: bool) {
        self.bits.set_bit(15u8, value);
    }
    # [ doc = "Bit 16 - IV111" ]
    pub fn set_iv111(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - IV110" ]
    pub fn set_iv110(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - IV109" ]
    pub fn set_iv109(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 19 - IV108" ]
    pub fn set_iv108(&mut self, value: bool) {
        self.bits.set_bit(19u8, value);
    }
    # [ doc = "Bit 20 - IV107" ]
    pub fn set_iv107(&mut self, value: bool) {
        self.bits.set_bit(20u8, value);
    }
    # [ doc = "Bit 21 - IV106" ]
    pub fn set_iv106(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - IV105" ]
    pub fn set_iv105(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - IV104" ]
    pub fn set_iv104(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 24 - IV103" ]
    pub fn set_iv103(&mut self, value: bool) {
        self.bits.set_bit(24u8, value);
    }
    # [ doc = "Bit 25 - IV102" ]
    pub fn set_iv102(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - IV101" ]
    pub fn set_iv101(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
    # [ doc = "Bit 27 - IV100" ]
    pub fn set_iv100(&mut self, value: bool) {
        self.bits.set_bit(27u8, value);
    }
    # [ doc = "Bit 28 - IV99" ]
    pub fn set_iv99(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bit 29 - IV98" ]
    pub fn set_iv98(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 30 - IV97" ]
    pub fn set_iv97(&mut self, value: bool) {
        self.bits.set_bit(30u8, value);
    }
    # [ doc = "Bit 31 - IV96" ]
    pub fn set_iv96(&mut self, value: bool) {
        self.bits.set_bit(31u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm0r {
    bits: u32,
}

impl Csgcmccm0r {
    # [ doc = "Bits 0:31 - CSGCMCCM0R" ]
    pub fn csgcmccm0r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm0r { bits: 0u32 }
    }
}

impl Csgcmccm0r {
    # [ doc = "Bits 0:31 - CSGCMCCM0R" ]
    pub fn set_csgcmccm0r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm1r {
    bits: u32,
}

impl Csgcmccm1r {
    # [ doc = "Bits 0:31 - CSGCMCCM1R" ]
    pub fn csgcmccm1r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm1r { bits: 0u32 }
    }
}

impl Csgcmccm1r {
    # [ doc = "Bits 0:31 - CSGCMCCM1R" ]
    pub fn set_csgcmccm1r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm2r {
    bits: u32,
}

impl Csgcmccm2r {
    # [ doc = "Bits 0:31 - CSGCMCCM2R" ]
    pub fn csgcmccm2r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm2r { bits: 0u32 }
    }
}

impl Csgcmccm2r {
    # [ doc = "Bits 0:31 - CSGCMCCM2R" ]
    pub fn set_csgcmccm2r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm3r {
    bits: u32,
}

impl Csgcmccm3r {
    # [ doc = "Bits 0:31 - CSGCMCCM3R" ]
    pub fn csgcmccm3r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm3r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm3r { bits: 0u32 }
    }
}

impl Csgcmccm3r {
    # [ doc = "Bits 0:31 - CSGCMCCM3R" ]
    pub fn set_csgcmccm3r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm4r {
    bits: u32,
}

impl Csgcmccm4r {
    # [ doc = "Bits 0:31 - CSGCMCCM4R" ]
    pub fn csgcmccm4r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm4r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm4r { bits: 0u32 }
    }
}

impl Csgcmccm4r {
    # [ doc = "Bits 0:31 - CSGCMCCM4R" ]
    pub fn set_csgcmccm4r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm5r {
    bits: u32,
}

impl Csgcmccm5r {
    # [ doc = "Bits 0:31 - CSGCMCCM5R" ]
    pub fn csgcmccm5r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm5r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm5r { bits: 0u32 }
    }
}

impl Csgcmccm5r {
    # [ doc = "Bits 0:31 - CSGCMCCM5R" ]
    pub fn set_csgcmccm5r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm6r {
    bits: u32,
}

impl Csgcmccm6r {
    # [ doc = "Bits 0:31 - CSGCMCCM6R" ]
    pub fn csgcmccm6r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm6r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm6r { bits: 0u32 }
    }
}

impl Csgcmccm6r {
    # [ doc = "Bits 0:31 - CSGCMCCM6R" ]
    pub fn set_csgcmccm6r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcmccm7r {
    bits: u32,
}

impl Csgcmccm7r {
    # [ doc = "Bits 0:31 - CSGCMCCM7R" ]
    pub fn csgcmccm7r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcmccm7r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcmccm7r { bits: 0u32 }
    }
}

impl Csgcmccm7r {
    # [ doc = "Bits 0:31 - CSGCMCCM7R" ]
    pub fn set_csgcmccm7r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm0r {
    bits: u32,
}

impl Csgcm0r {
    # [ doc = "Bits 0:31 - CSGCM0R" ]
    pub fn csgcm0r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm0r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm0r { bits: 0u32 }
    }
}

impl Csgcm0r {
    # [ doc = "Bits 0:31 - CSGCM0R" ]
    pub fn set_csgcm0r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm1r {
    bits: u32,
}

impl Csgcm1r {
    # [ doc = "Bits 0:31 - CSGCM1R" ]
    pub fn csgcm1r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm1r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm1r { bits: 0u32 }
    }
}

impl Csgcm1r {
    # [ doc = "Bits 0:31 - CSGCM1R" ]
    pub fn set_csgcm1r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm2r {
    bits: u32,
}

impl Csgcm2r {
    # [ doc = "Bits 0:31 - CSGCM2R" ]
    pub fn csgcm2r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm2r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm2r { bits: 0u32 }
    }
}

impl Csgcm2r {
    # [ doc = "Bits 0:31 - CSGCM2R" ]
    pub fn set_csgcm2r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm3r {
    bits: u32,
}

impl Csgcm3r {
    # [ doc = "Bits 0:31 - CSGCM3R" ]
    pub fn csgcm3r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm3r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm3r { bits: 0u32 }
    }
}

impl Csgcm3r {
    # [ doc = "Bits 0:31 - CSGCM3R" ]
    pub fn set_csgcm3r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm4r {
    bits: u32,
}

impl Csgcm4r {
    # [ doc = "Bits 0:31 - CSGCM4R" ]
    pub fn csgcm4r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm4r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm4r { bits: 0u32 }
    }
}

impl Csgcm4r {
    # [ doc = "Bits 0:31 - CSGCM4R" ]
    pub fn set_csgcm4r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm5r {
    bits: u32,
}

impl Csgcm5r {
    # [ doc = "Bits 0:31 - CSGCM5R" ]
    pub fn csgcm5r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm5r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm5r { bits: 0u32 }
    }
}

impl Csgcm5r {
    # [ doc = "Bits 0:31 - CSGCM5R" ]
    pub fn set_csgcm5r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm6r {
    bits: u32,
}

impl Csgcm6r {
    # [ doc = "Bits 0:31 - CSGCM6R" ]
    pub fn csgcm6r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm6r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm6r { bits: 0u32 }
    }
}

impl Csgcm6r {
    # [ doc = "Bits 0:31 - CSGCM6R" ]
    pub fn set_csgcm6r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Csgcm7r {
    bits: u32,
}

impl Csgcm7r {
    # [ doc = "Bits 0:31 - CSGCM7R" ]
    pub fn csgcm7r(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Csgcm7r {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Csgcm7r { bits: 0u32 }
    }
}

impl Csgcm7r {
    # [ doc = "Bits 0:31 - CSGCM7R" ]
    pub fn set_csgcm7r(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}
