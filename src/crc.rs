// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Cryptographic processor" ]
# [ repr ( C ) ]
pub struct Crc {
    # [ doc = "0x00 - Data register" ]
    pub dr: volatile::ReadWrite<Dr>,
    # [ doc = "0x04 - Independent Data register" ]
    pub idr: volatile::ReadWrite<Idr>,
    # [ doc = "0x08 - Control register" ]
    pub cr: volatile::WriteOnly<Cr>,
    # [ doc = "0x0c - Initial CRC value" ]
    pub init: volatile::ReadWrite<Init>,
    # [ doc = "0x10 - CRC polynomial" ]
    pub pol: volatile::ReadWrite<Pol>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dr {
    bits: u32,
}

impl Dr {
    # [ doc = "Bits 0:31 - Data Register" ]
    pub fn dr(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Dr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dr { bits: 4294967295u32 }
    }
}

impl Dr {
    # [ doc = "Bits 0:31 - Data Register" ]
    pub fn set_dr(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Idr {
    bits: u32,
}

impl Idr {
    # [ doc = "Bits 0:7 - Independent Data register" ]
    pub fn idr(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Idr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Idr { bits: 0u32 }
    }
}

impl Idr {
    # [ doc = "Bits 0:7 - Independent Data register" ]
    pub fn set_idr(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr {
    bits: u32,
}

impl Cr {
    # [ doc = "Bit 0 - Control regidter" ]
    pub fn cr(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Cr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr { bits: 0u32 }
    }
}

impl Cr {
    # [ doc = "Bit 0 - Control regidter" ]
    pub fn set_cr(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Init {
    bits: u32,
}

impl Init {
    # [ doc = "Bits 0:31 - Programmable initial CRC value" ]
    pub fn crc_init(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Init {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Init { bits: 0u32 }
    }
}

impl Init {
    # [ doc = "Bits 0:31 - Programmable initial CRC value" ]
    pub fn set_crc_init(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Pol {
    bits: u32,
}

impl Pol {
    # [ doc = "Bits 0:31 - Programmable polynomial" ]
    pub fn pol(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Pol {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Pol { bits: 0u32 }
    }
}

impl Pol {
    # [ doc = "Bits 0:31 - Programmable polynomial" ]
    pub fn set_pol(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}
