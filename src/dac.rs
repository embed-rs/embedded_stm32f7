// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Digital-to-analog converter" ]
# [ repr ( C ) ]
pub struct Dac {
    # [ doc = "0x00 - control register" ]
    pub cr: volatile::ReadWrite<Cr>,
    # [ doc = "0x04 - software trigger register" ]
    pub swtrigr: volatile::WriteOnly<Swtrigr>,
    # [ doc = "0x08 - channel1 12-bit right-aligned data holding register" ]
    pub dhr12r1: volatile::ReadWrite<Dhr12r1>,
    # [ doc = "0x0c - channel1 12-bit left aligned data holding register" ]
    pub dhr12l1: volatile::ReadWrite<Dhr12l1>,
    # [ doc = "0x10 - channel1 8-bit right aligned data holding register" ]
    pub dhr8r1: volatile::ReadWrite<Dhr8r1>,
    # [ doc = "0x14 - channel2 12-bit right aligned data holding register" ]
    pub dhr12r2: volatile::ReadWrite<Dhr12r2>,
    # [ doc = "0x18 - channel2 12-bit left aligned data holding register" ]
    pub dhr12l2: volatile::ReadWrite<Dhr12l2>,
    # [ doc = "0x1c - channel2 8-bit right-aligned data holding register" ]
    pub dhr8r2: volatile::ReadWrite<Dhr8r2>,
    # [ doc = "0x20 - Dual DAC 12-bit right-aligned data holding register" ]
    pub dhr12rd: volatile::ReadWrite<Dhr12rd>,
    # [ doc = "0x24 - DUAL DAC 12-bit left aligned data holding register" ]
    pub dhr12ld: volatile::ReadWrite<Dhr12ld>,
    # [ doc = "0x28 - DUAL DAC 8-bit right aligned data holding register" ]
    pub dhr8rd: volatile::ReadWrite<Dhr8rd>,
    # [ doc = "0x2c - channel1 data output register" ]
    pub dor1: volatile::ReadOnly<Dor1>,
    # [ doc = "0x30 - channel2 data output register" ]
    pub dor2: volatile::ReadOnly<Dor2>,
    # [ doc = "0x34 - status register" ]
    pub sr: volatile::ReadWrite<Sr>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr {
    bits: u32,
}

impl Cr {
    # [ doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable" ]
    pub fn dmaudrie2(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 28 - DAC channel2 DMA enable" ]
    pub fn dmaen2(&self) -> bool {
        self.bits.get_bit(28u8)
    }
    # [ doc = "Bits 24:27 - DAC channel2 mask/amplitude selector" ]
    pub fn mamp2(&self) -> u8 {
        self.bits.get_range(24u8..28u8) as u8
    }
    # [ doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable" ]
    pub fn wave2(&self) -> u8 {
        self.bits.get_range(22u8..24u8) as u8
    }
    # [ doc = "Bits 19:21 - DAC channel2 trigger selection" ]
    pub fn tsel2(&self) -> u8 {
        self.bits.get_range(19u8..22u8) as u8
    }
    # [ doc = "Bit 18 - DAC channel2 trigger enable" ]
    pub fn ten2(&self) -> bool {
        self.bits.get_bit(18u8)
    }
    # [ doc = "Bit 17 - DAC channel2 output buffer disable" ]
    pub fn boff2(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 16 - DAC channel2 enable" ]
    pub fn en2(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable" ]
    pub fn dmaudrie1(&self) -> bool {
        self.bits.get_bit(13u8)
    }
    # [ doc = "Bit 12 - DAC channel1 DMA enable" ]
    pub fn dmaen1(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bits 8:11 - DAC channel1 mask/amplitude selector" ]
    pub fn mamp1(&self) -> u8 {
        self.bits.get_range(8u8..12u8) as u8
    }
    # [ doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable" ]
    pub fn wave1(&self) -> u8 {
        self.bits.get_range(6u8..8u8) as u8
    }
    # [ doc = "Bits 3:5 - DAC channel1 trigger selection" ]
    pub fn tsel1(&self) -> u8 {
        self.bits.get_range(3u8..6u8) as u8
    }
    # [ doc = "Bit 2 - DAC channel1 trigger enable" ]
    pub fn ten1(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - DAC channel1 output buffer disable" ]
    pub fn boff1(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - DAC channel1 enable" ]
    pub fn en1(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Cr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr { bits: 0u32 }
    }
}

impl Cr {
    # [ doc = "Bit 29 - DAC channel2 DMA underrun interrupt enable" ]
    pub fn set_dmaudrie2(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 28 - DAC channel2 DMA enable" ]
    pub fn set_dmaen2(&mut self, value: bool) {
        self.bits.set_bit(28u8, value);
    }
    # [ doc = "Bits 24:27 - DAC channel2 mask/amplitude selector" ]
    pub fn set_mamp2(&mut self, value: u8) {
        self.bits.set_range(24u8..28u8, value as u32);
    }
    # [ doc = "Bits 22:23 - DAC channel2 noise/triangle wave generation enable" ]
    pub fn set_wave2(&mut self, value: u8) {
        self.bits.set_range(22u8..24u8, value as u32);
    }
    # [ doc = "Bits 19:21 - DAC channel2 trigger selection" ]
    pub fn set_tsel2(&mut self, value: u8) {
        self.bits.set_range(19u8..22u8, value as u32);
    }
    # [ doc = "Bit 18 - DAC channel2 trigger enable" ]
    pub fn set_ten2(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
    # [ doc = "Bit 17 - DAC channel2 output buffer disable" ]
    pub fn set_boff2(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 16 - DAC channel2 enable" ]
    pub fn set_en2(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 13 - DAC channel1 DMA Underrun Interrupt enable" ]
    pub fn set_dmaudrie1(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
    # [ doc = "Bit 12 - DAC channel1 DMA enable" ]
    pub fn set_dmaen1(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bits 8:11 - DAC channel1 mask/amplitude selector" ]
    pub fn set_mamp1(&mut self, value: u8) {
        self.bits.set_range(8u8..12u8, value as u32);
    }
    # [ doc = "Bits 6:7 - DAC channel1 noise/triangle wave generation enable" ]
    pub fn set_wave1(&mut self, value: u8) {
        self.bits.set_range(6u8..8u8, value as u32);
    }
    # [ doc = "Bits 3:5 - DAC channel1 trigger selection" ]
    pub fn set_tsel1(&mut self, value: u8) {
        self.bits.set_range(3u8..6u8, value as u32);
    }
    # [ doc = "Bit 2 - DAC channel1 trigger enable" ]
    pub fn set_ten1(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - DAC channel1 output buffer disable" ]
    pub fn set_boff1(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - DAC channel1 enable" ]
    pub fn set_en1(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Swtrigr {
    bits: u32,
}

impl Swtrigr {
    # [ doc = "Bit 1 - DAC channel2 software trigger" ]
    pub fn swtrig2(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - DAC channel1 software trigger" ]
    pub fn swtrig1(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Swtrigr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Swtrigr { bits: 0u32 }
    }
}

impl Swtrigr {
    # [ doc = "Bit 1 - DAC channel2 software trigger" ]
    pub fn set_swtrig2(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - DAC channel1 software trigger" ]
    pub fn set_swtrig1(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12r1 {
    bits: u32,
}

impl Dhr12r1 {
    # [ doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data" ]
    pub fn dacc1dhr(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Dhr12r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12r1 { bits: 0u32 }
    }
}

impl Dhr12r1 {
    # [ doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12l1 {
    bits: u32,
}

impl Dhr12l1 {
    # [ doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data" ]
    pub fn dacc1dhr(&self) -> u16 {
        self.bits.get_range(4u8..16u8) as u16
    }
}

impl Default for Dhr12l1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12l1 { bits: 0u32 }
    }
}

impl Dhr12l1 {
    # [ doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u16) {
        self.bits.set_range(4u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr8r1 {
    bits: u32,
}

impl Dhr8r1 {
    # [ doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data" ]
    pub fn dacc1dhr(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Dhr8r1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr8r1 { bits: 0u32 }
    }
}

impl Dhr8r1 {
    # [ doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12r2 {
    bits: u32,
}

impl Dhr12r2 {
    # [ doc = "Bits 0:11 - DAC channel2 12-bit right-aligned data" ]
    pub fn dacc2dhr(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Dhr12r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12r2 { bits: 0u32 }
    }
}

impl Dhr12r2 {
    # [ doc = "Bits 0:11 - DAC channel2 12-bit right-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12l2 {
    bits: u32,
}

impl Dhr12l2 {
    # [ doc = "Bits 4:15 - DAC channel2 12-bit left-aligned data" ]
    pub fn dacc2dhr(&self) -> u16 {
        self.bits.get_range(4u8..16u8) as u16
    }
}

impl Default for Dhr12l2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12l2 { bits: 0u32 }
    }
}

impl Dhr12l2 {
    # [ doc = "Bits 4:15 - DAC channel2 12-bit left-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u16) {
        self.bits.set_range(4u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr8r2 {
    bits: u32,
}

impl Dhr8r2 {
    # [ doc = "Bits 0:7 - DAC channel2 8-bit right-aligned data" ]
    pub fn dacc2dhr(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Dhr8r2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr8r2 { bits: 0u32 }
    }
}

impl Dhr8r2 {
    # [ doc = "Bits 0:7 - DAC channel2 8-bit right-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12rd {
    bits: u32,
}

impl Dhr12rd {
    # [ doc = "Bits 16:27 - DAC channel2 12-bit right-aligned data" ]
    pub fn dacc2dhr(&self) -> u16 {
        self.bits.get_range(16u8..28u8) as u16
    }
    # [ doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data" ]
    pub fn dacc1dhr(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Dhr12rd {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12rd { bits: 0u32 }
    }
}

impl Dhr12rd {
    # [ doc = "Bits 16:27 - DAC channel2 12-bit right-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u16) {
        self.bits.set_range(16u8..28u8, value as u32);
    }
    # [ doc = "Bits 0:11 - DAC channel1 12-bit right-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr12ld {
    bits: u32,
}

impl Dhr12ld {
    # [ doc = "Bits 20:31 - DAC channel2 12-bit left-aligned data" ]
    pub fn dacc2dhr(&self) -> u16 {
        self.bits.get_range(20u8..32u8) as u16
    }
    # [ doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data" ]
    pub fn dacc1dhr(&self) -> u16 {
        self.bits.get_range(4u8..16u8) as u16
    }
}

impl Default for Dhr12ld {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr12ld { bits: 0u32 }
    }
}

impl Dhr12ld {
    # [ doc = "Bits 20:31 - DAC channel2 12-bit left-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u16) {
        self.bits.set_range(20u8..32u8, value as u32);
    }
    # [ doc = "Bits 4:15 - DAC channel1 12-bit left-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u16) {
        self.bits.set_range(4u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dhr8rd {
    bits: u32,
}

impl Dhr8rd {
    # [ doc = "Bits 8:15 - DAC channel2 8-bit right-aligned data" ]
    pub fn dacc2dhr(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data" ]
    pub fn dacc1dhr(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
}

impl Default for Dhr8rd {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dhr8rd { bits: 0u32 }
    }
}

impl Dhr8rd {
    # [ doc = "Bits 8:15 - DAC channel2 8-bit right-aligned data" ]
    pub fn set_dacc2dhr(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 0:7 - DAC channel1 8-bit right-aligned data" ]
    pub fn set_dacc1dhr(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dor1 {
    bits: u32,
}

impl Dor1 {
    # [ doc = "Bits 0:11 - DAC channel1 data output" ]
    pub fn dacc1dor(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Dor1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dor1 { bits: 0u32 }
    }
}

impl Dor1 {
    # [ doc = "Bits 0:11 - DAC channel1 data output" ]
    pub fn set_dacc1dor(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dor2 {
    bits: u32,
}

impl Dor2 {
    # [ doc = "Bits 0:11 - DAC channel2 data output" ]
    pub fn dacc2dor(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
}

impl Default for Dor2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dor2 { bits: 0u32 }
    }
}

impl Dor2 {
    # [ doc = "Bits 0:11 - DAC channel2 data output" ]
    pub fn set_dacc2dor(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Sr {
    bits: u32,
}

impl Sr {
    # [ doc = "Bit 29 - DAC channel2 DMA underrun flag" ]
    pub fn dmaudr2(&self) -> bool {
        self.bits.get_bit(29u8)
    }
    # [ doc = "Bit 13 - DAC channel1 DMA underrun flag" ]
    pub fn dmaudr1(&self) -> bool {
        self.bits.get_bit(13u8)
    }
}

impl Default for Sr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Sr { bits: 0u32 }
    }
}

impl Sr {
    # [ doc = "Bit 29 - DAC channel2 DMA underrun flag" ]
    pub fn set_dmaudr2(&mut self, value: bool) {
        self.bits.set_bit(29u8, value);
    }
    # [ doc = "Bit 13 - DAC channel1 DMA underrun flag" ]
    pub fn set_dmaudr1(&mut self, value: bool) {
        self.bits.set_bit(13u8, value);
    }
}
