// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Nested Vectored Interrupt Controller" ]
# [ repr ( C ) ]
pub struct Nvic {
    _reserved0: [u8; 4usize],
    # [ doc = "0x04 - Interrupt Controller Type Register" ]
    pub ictr: volatile::ReadOnly<Ictr>,
    _reserved1: [u8; 248usize],
    # [ doc = "0x100 - Interrupt Set-Enable Register" ]
    pub iser0: volatile::ReadWrite<Iser0>,
    # [ doc = "0x104 - Interrupt Set-Enable Register" ]
    pub iser1: volatile::ReadWrite<Iser1>,
    # [ doc = "0x108 - Interrupt Set-Enable Register" ]
    pub iser2: volatile::ReadWrite<Iser2>,
    _reserved2: [u8; 116usize],
    # [ doc = "0x180 - Interrupt Clear-Enable Register" ]
    pub icer0: volatile::ReadWrite<Icer0>,
    # [ doc = "0x184 - Interrupt Clear-Enable Register" ]
    pub icer1: volatile::ReadWrite<Icer1>,
    # [ doc = "0x188 - Interrupt Clear-Enable Register" ]
    pub icer2: volatile::ReadWrite<Icer2>,
    _reserved3: [u8; 116usize],
    # [ doc = "0x200 - Interrupt Set-Pending Register" ]
    pub ispr0: volatile::ReadWrite<Ispr0>,
    # [ doc = "0x204 - Interrupt Set-Pending Register" ]
    pub ispr1: volatile::ReadWrite<Ispr1>,
    # [ doc = "0x208 - Interrupt Set-Pending Register" ]
    pub ispr2: volatile::ReadWrite<Ispr2>,
    _reserved4: [u8; 116usize],
    # [ doc = "0x280 - Interrupt Clear-Pending Register" ]
    pub icpr0: volatile::ReadWrite<Icpr0>,
    # [ doc = "0x284 - Interrupt Clear-Pending Register" ]
    pub icpr1: volatile::ReadWrite<Icpr1>,
    # [ doc = "0x288 - Interrupt Clear-Pending Register" ]
    pub icpr2: volatile::ReadWrite<Icpr2>,
    _reserved5: [u8; 116usize],
    # [ doc = "0x300 - Interrupt Active Bit Register" ]
    pub iabr0: volatile::ReadOnly<Iabr0>,
    # [ doc = "0x304 - Interrupt Active Bit Register" ]
    pub iabr1: volatile::ReadOnly<Iabr1>,
    # [ doc = "0x308 - Interrupt Active Bit Register" ]
    pub iabr2: volatile::ReadOnly<Iabr2>,
    _reserved6: [u8; 244usize],
    # [ doc = "0x400 - Interrupt Priority Register" ]
    pub ipr0: volatile::ReadWrite<Ipr0>,
    # [ doc = "0x404 - Interrupt Priority Register" ]
    pub ipr1: volatile::ReadWrite<Ipr1>,
    # [ doc = "0x408 - Interrupt Priority Register" ]
    pub ipr2: volatile::ReadWrite<Ipr2>,
    # [ doc = "0x40c - Interrupt Priority Register" ]
    pub ipr3: volatile::ReadWrite<Ipr3>,
    # [ doc = "0x410 - Interrupt Priority Register" ]
    pub ipr4: volatile::ReadWrite<Ipr4>,
    # [ doc = "0x414 - Interrupt Priority Register" ]
    pub ipr5: volatile::ReadWrite<Ipr5>,
    # [ doc = "0x418 - Interrupt Priority Register" ]
    pub ipr6: volatile::ReadWrite<Ipr6>,
    # [ doc = "0x41c - Interrupt Priority Register" ]
    pub ipr7: volatile::ReadWrite<Ipr7>,
    # [ doc = "0x420 - Interrupt Priority Register" ]
    pub ipr8: volatile::ReadWrite<Ipr8>,
    # [ doc = "0x424 - Interrupt Priority Register" ]
    pub ipr9: volatile::ReadWrite<Ipr9>,
    # [ doc = "0x428 - Interrupt Priority Register" ]
    pub ipr10: volatile::ReadWrite<Ipr10>,
    # [ doc = "0x42c - Interrupt Priority Register" ]
    pub ipr11: volatile::ReadWrite<Ipr11>,
    # [ doc = "0x430 - Interrupt Priority Register" ]
    pub ipr12: volatile::ReadWrite<Ipr12>,
    # [ doc = "0x434 - Interrupt Priority Register" ]
    pub ipr13: volatile::ReadWrite<Ipr13>,
    # [ doc = "0x438 - Interrupt Priority Register" ]
    pub ipr14: volatile::ReadWrite<Ipr14>,
    # [ doc = "0x43c - Interrupt Priority Register" ]
    pub ipr15: volatile::ReadWrite<Ipr15>,
    # [ doc = "0x440 - Interrupt Priority Register" ]
    pub ipr16: volatile::ReadWrite<Ipr16>,
    # [ doc = "0x444 - Interrupt Priority Register" ]
    pub ipr17: volatile::ReadWrite<Ipr17>,
    # [ doc = "0x448 - Interrupt Priority Register" ]
    pub ipr18: volatile::ReadWrite<Ipr18>,
    # [ doc = "0x44c - Interrupt Priority Register" ]
    pub ipr19: volatile::ReadWrite<Ipr19>,
    # [ doc = "0x450 - Interrupt Priority Register" ]
    pub ipr20: volatile::ReadWrite<Ipr20>,
    _reserved7: [u8; 2732usize],
    # [ doc = "0xf00 - Software Triggered Interrupt Register" ]
    pub stir: volatile::WriteOnly<Stir>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ictr {
    bits: u32,
}

impl Ictr {
    # [ doc = "Bits 0:3 - Total number of interrupt lines in groups" ]
    pub fn intlinesnum(&self) -> u8 {
        self.bits.get_range(0u8..4u8) as u8
    }
}

impl Default for Ictr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ictr { bits: 0u32 }
    }
}

impl Ictr {
    # [ doc = "Bits 0:3 - Total number of interrupt lines in groups" ]
    pub fn set_intlinesnum(&mut self, value: u8) {
        self.bits.set_range(0u8..4u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iser0 {
    bits: u32,
}

impl Iser0 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn setena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iser0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iser0 { bits: 0u32 }
    }
}

impl Iser0 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn set_setena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iser1 {
    bits: u32,
}

impl Iser1 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn setena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iser1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iser1 { bits: 0u32 }
    }
}

impl Iser1 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn set_setena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iser2 {
    bits: u32,
}

impl Iser2 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn setena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iser2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iser2 { bits: 0u32 }
    }
}

impl Iser2 {
    # [ doc = "Bits 0:31 - SETENA" ]
    pub fn set_setena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icer0 {
    bits: u32,
}

impl Icer0 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn clrena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icer0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icer0 { bits: 0u32 }
    }
}

impl Icer0 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn set_clrena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icer1 {
    bits: u32,
}

impl Icer1 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn clrena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icer1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icer1 { bits: 0u32 }
    }
}

impl Icer1 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn set_clrena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icer2 {
    bits: u32,
}

impl Icer2 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn clrena(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icer2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icer2 { bits: 0u32 }
    }
}

impl Icer2 {
    # [ doc = "Bits 0:31 - CLRENA" ]
    pub fn set_clrena(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ispr0 {
    bits: u32,
}

impl Ispr0 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn setpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Ispr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ispr0 { bits: 0u32 }
    }
}

impl Ispr0 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn set_setpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ispr1 {
    bits: u32,
}

impl Ispr1 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn setpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Ispr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ispr1 { bits: 0u32 }
    }
}

impl Ispr1 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn set_setpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ispr2 {
    bits: u32,
}

impl Ispr2 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn setpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Ispr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ispr2 { bits: 0u32 }
    }
}

impl Ispr2 {
    # [ doc = "Bits 0:31 - SETPEND" ]
    pub fn set_setpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icpr0 {
    bits: u32,
}

impl Icpr0 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn clrpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icpr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icpr0 { bits: 0u32 }
    }
}

impl Icpr0 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn set_clrpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icpr1 {
    bits: u32,
}

impl Icpr1 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn clrpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icpr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icpr1 { bits: 0u32 }
    }
}

impl Icpr1 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn set_clrpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Icpr2 {
    bits: u32,
}

impl Icpr2 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn clrpend(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Icpr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Icpr2 { bits: 0u32 }
    }
}

impl Icpr2 {
    # [ doc = "Bits 0:31 - CLRPEND" ]
    pub fn set_clrpend(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iabr0 {
    bits: u32,
}

impl Iabr0 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn active(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iabr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iabr0 { bits: 0u32 }
    }
}

impl Iabr0 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn set_active(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iabr1 {
    bits: u32,
}

impl Iabr1 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn active(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iabr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iabr1 { bits: 0u32 }
    }
}

impl Iabr1 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn set_active(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Iabr2 {
    bits: u32,
}

impl Iabr2 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn active(&self) -> u32 {
        self.bits.get_range(0u8..32u8) as u32
    }
}

impl Default for Iabr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Iabr2 { bits: 0u32 }
    }
}

impl Iabr2 {
    # [ doc = "Bits 0:31 - ACTIVE" ]
    pub fn set_active(&mut self, value: u32) {
        self.bits.set_range(0u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr0 {
    bits: u32,
}

impl Ipr0 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr0 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr0 { bits: 0u32 }
    }
}

impl Ipr0 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr1 {
    bits: u32,
}

impl Ipr1 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr1 { bits: 0u32 }
    }
}

impl Ipr1 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr2 {
    bits: u32,
}

impl Ipr2 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr2 { bits: 0u32 }
    }
}

impl Ipr2 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr3 {
    bits: u32,
}

impl Ipr3 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr3 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr3 { bits: 0u32 }
    }
}

impl Ipr3 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr4 {
    bits: u32,
}

impl Ipr4 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr4 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr4 { bits: 0u32 }
    }
}

impl Ipr4 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr5 {
    bits: u32,
}

impl Ipr5 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr5 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr5 { bits: 0u32 }
    }
}

impl Ipr5 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr6 {
    bits: u32,
}

impl Ipr6 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr6 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr6 { bits: 0u32 }
    }
}

impl Ipr6 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr7 {
    bits: u32,
}

impl Ipr7 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr7 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr7 { bits: 0u32 }
    }
}

impl Ipr7 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr8 {
    bits: u32,
}

impl Ipr8 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr8 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr8 { bits: 0u32 }
    }
}

impl Ipr8 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr9 {
    bits: u32,
}

impl Ipr9 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr9 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr9 { bits: 0u32 }
    }
}

impl Ipr9 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr10 {
    bits: u32,
}

impl Ipr10 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr10 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr10 { bits: 0u32 }
    }
}

impl Ipr10 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr11 {
    bits: u32,
}

impl Ipr11 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr11 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr11 { bits: 0u32 }
    }
}

impl Ipr11 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr12 {
    bits: u32,
}

impl Ipr12 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr12 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr12 { bits: 0u32 }
    }
}

impl Ipr12 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr13 {
    bits: u32,
}

impl Ipr13 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr13 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr13 { bits: 0u32 }
    }
}

impl Ipr13 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr14 {
    bits: u32,
}

impl Ipr14 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr14 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr14 { bits: 0u32 }
    }
}

impl Ipr14 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr15 {
    bits: u32,
}

impl Ipr15 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr15 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr15 { bits: 0u32 }
    }
}

impl Ipr15 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr16 {
    bits: u32,
}

impl Ipr16 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr16 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr16 { bits: 0u32 }
    }
}

impl Ipr16 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr17 {
    bits: u32,
}

impl Ipr17 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr17 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr17 { bits: 0u32 }
    }
}

impl Ipr17 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr18 {
    bits: u32,
}

impl Ipr18 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr18 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr18 { bits: 0u32 }
    }
}

impl Ipr18 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr19 {
    bits: u32,
}

impl Ipr19 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr19 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr19 { bits: 0u32 }
    }
}

impl Ipr19 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Ipr20 {
    bits: u32,
}

impl Ipr20 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn ipr_n0(&self) -> u8 {
        self.bits.get_range(0u8..8u8) as u8
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn ipr_n1(&self) -> u8 {
        self.bits.get_range(8u8..16u8) as u8
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn ipr_n2(&self) -> u8 {
        self.bits.get_range(16u8..24u8) as u8
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn ipr_n3(&self) -> u8 {
        self.bits.get_range(24u8..32u8) as u8
    }
}

impl Default for Ipr20 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Ipr20 { bits: 0u32 }
    }
}

impl Ipr20 {
    # [ doc = "Bits 0:7 - IPR_N0" ]
    pub fn set_ipr_n0(&mut self, value: u8) {
        self.bits.set_range(0u8..8u8, value as u32);
    }
    # [ doc = "Bits 8:15 - IPR_N1" ]
    pub fn set_ipr_n1(&mut self, value: u8) {
        self.bits.set_range(8u8..16u8, value as u32);
    }
    # [ doc = "Bits 16:23 - IPR_N2" ]
    pub fn set_ipr_n2(&mut self, value: u8) {
        self.bits.set_range(16u8..24u8, value as u32);
    }
    # [ doc = "Bits 24:31 - IPR_N3" ]
    pub fn set_ipr_n3(&mut self, value: u8) {
        self.bits.set_range(24u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct Stir {
    bits: u32,
}

impl Stir {
    # [ doc = "Bits 0:8 - interrupt to be triggered" ]
    pub fn intid(&self) -> u16 {
        self.bits.get_range(0u8..9u8) as u16
    }
}

impl Default for Stir {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Stir { bits: 0u32 }
    }
}

impl Stir {
    # [ doc = "Bits 0:8 - interrupt to be triggered" ]
    pub fn set_intid(&mut self, value: u16) {
        self.bits.set_range(0u8..9u8, value as u32);
    }
}
