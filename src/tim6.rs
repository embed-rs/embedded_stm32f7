// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Basic timers" ]
# [ repr ( C ) ]
pub struct Tim6 {
    # [ doc = "0x00 - control register 1" ]
    pub cr1: volatile::ReadWrite<Cr1>,
    # [ doc = "0x04 - control register 2" ]
    pub cr2: volatile::ReadWrite<Cr2>,
    _reserved0: [u8; 4usize],
    # [ doc = "0x0c - DMA/Interrupt enable register" ]
    pub dier: volatile::ReadWrite<Dier>,
    # [ doc = "0x10 - status register" ]
    pub sr: volatile::ReadWrite<Sr>,
    # [ doc = "0x14 - event generation register" ]
    pub egr: volatile::WriteOnly<Egr>,
    _reserved1: [u8; 12usize],
    # [ doc = "0x24 - counter" ]
    pub cnt: volatile::ReadWrite<Cnt>,
    # [ doc = "0x28 - prescaler" ]
    pub psc: volatile::ReadWrite<Psc>,
    # [ doc = "0x2c - auto-reload register" ]
    pub arr: volatile::ReadWrite<Arr>,
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr1 {
    bits: u32,
}

impl Cr1 {
    # [ doc = "Bit 7 - Auto-reload preload enable" ]
    pub fn arpe(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 3 - One-pulse mode" ]
    pub fn opm(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 2 - Update request source" ]
    pub fn urs(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 1 - Update disable" ]
    pub fn udis(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 0 - Counter enable" ]
    pub fn cen(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Cr1 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr1 { bits: 0u32 }
    }
}

impl Cr1 {
    # [ doc = "Bit 7 - Auto-reload preload enable" ]
    pub fn set_arpe(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 3 - One-pulse mode" ]
    pub fn set_opm(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 2 - Update request source" ]
    pub fn set_urs(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 1 - Update disable" ]
    pub fn set_udis(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 0 - Counter enable" ]
    pub fn set_cen(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cr2 {
    bits: u32,
}

impl Cr2 {
    # [ doc = "Bits 4:6 - Master mode selection" ]
    pub fn mms(&self) -> u8 {
        self.bits.get_range(4u8..7u8) as u8
    }
}

impl Default for Cr2 {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cr2 { bits: 0u32 }
    }
}

impl Cr2 {
    # [ doc = "Bits 4:6 - Master mode selection" ]
    pub fn set_mms(&mut self, value: u8) {
        self.bits.set_range(4u8..7u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Dier {
    bits: u32,
}

impl Dier {
    # [ doc = "Bit 8 - Update DMA request enable" ]
    pub fn ude(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 0 - Update interrupt enable" ]
    pub fn uie(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Dier {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Dier { bits: 0u32 }
    }
}

impl Dier {
    # [ doc = "Bit 8 - Update DMA request enable" ]
    pub fn set_ude(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 0 - Update interrupt enable" ]
    pub fn set_uie(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Sr {
    bits: u32,
}

impl Sr {
    # [ doc = "Bit 0 - Update interrupt flag" ]
    pub fn uif(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Sr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Sr { bits: 0u32 }
    }
}

impl Sr {
    # [ doc = "Bit 0 - Update interrupt flag" ]
    pub fn set_uif(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Egr {
    bits: u32,
}

impl Egr {
    # [ doc = "Bit 0 - Update generation" ]
    pub fn ug(&self) -> bool {
        self.bits.get_bit(0u8)
    }
}

impl Default for Egr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Egr { bits: 0u32 }
    }
}

impl Egr {
    # [ doc = "Bit 0 - Update generation" ]
    pub fn set_ug(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Cnt {
    bits: u32,
}

impl Cnt {
    # [ doc = "Bits 0:15 - Low counter value" ]
    pub fn cnt(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for Cnt {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Cnt { bits: 0u32 }
    }
}

impl Cnt {
    # [ doc = "Bits 0:15 - Low counter value" ]
    pub fn set_cnt(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Psc {
    bits: u32,
}

impl Psc {
    # [ doc = "Bits 0:15 - Prescaler value" ]
    pub fn psc(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for Psc {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Psc { bits: 0u32 }
    }
}

impl Psc {
    # [ doc = "Bits 0:15 - Prescaler value" ]
    pub fn set_psc(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy , PartialEq , Eq ) ]
# [ repr ( C ) ]
pub struct Arr {
    bits: u32,
}

impl Arr {
    # [ doc = "Bits 0:15 - Low Auto-reload value" ]
    pub fn arr(&self) -> u16 {
        self.bits.get_range(0u8..16u8) as u16
    }
}

impl Default for Arr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        Arr { bits: 0u32 }
    }
}

impl Arr {
    # [ doc = "Bits 0:15 - Low Auto-reload value" ]
    pub fn set_arr(&mut self, value: u16) {
        self.bits.set_range(0u8..16u8, value as u32);
    }
}
