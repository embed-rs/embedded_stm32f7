// autogenerated

use volatile;
use bit_field::BitField;

# [ doc = "Debug support" ]
# [ repr ( C ) ]
pub struct Dbg {
    # [ doc = "0x00 - IDCODE" ]
    pub dbgmcu_idcode: volatile::ReadOnly<DbgmcuIdcode>,
    # [ doc = "0x04 - Control Register" ]
    pub dbgmcu_cr: volatile::ReadWrite<DbgmcuCr>,
    # [ doc = "0x08 - Debug MCU APB1 Freeze registe" ]
    pub dbgmcu_apb1_fz: volatile::ReadWrite<DbgmcuApb1Fz>,
    # [ doc = "0x0c - Debug MCU APB2 Freeze registe" ]
    pub dbgmcu_apb2_fz: volatile::ReadWrite<DbgmcuApb2Fz>,
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct DbgmcuIdcode {
    bits: u32,
}

impl DbgmcuIdcode {
    # [ doc = "Bits 0:11 - DEV_ID" ]
    pub fn dev_id(&self) -> u16 {
        self.bits.get_range(0u8..12u8) as u16
    }
    # [ doc = "Bits 16:31 - REV_ID" ]
    pub fn rev_id(&self) -> u16 {
        self.bits.get_range(16u8..32u8) as u16
    }
}

impl Default for DbgmcuIdcode {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        DbgmcuIdcode { bits: 268461073u32 }
    }
}

impl DbgmcuIdcode {
    # [ doc = "Bits 0:11 - DEV_ID" ]
    pub fn set_dev_id(&mut self, value: u16) {
        self.bits.set_range(0u8..12u8, value as u32);
    }
    # [ doc = "Bits 16:31 - REV_ID" ]
    pub fn set_rev_id(&mut self, value: u16) {
        self.bits.set_range(16u8..32u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct DbgmcuCr {
    bits: u32,
}

impl DbgmcuCr {
    # [ doc = "Bit 0 - DBG_SLEEP" ]
    pub fn dbg_sleep(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - DBG_STOP" ]
    pub fn dbg_stop(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - DBG_STANDBY" ]
    pub fn dbg_standby(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 5 - TRACE_IOEN" ]
    pub fn trace_ioen(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bits 6:7 - TRACE_MODE" ]
    pub fn trace_mode(&self) -> u8 {
        self.bits.get_range(6u8..8u8) as u8
    }
}

impl Default for DbgmcuCr {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        DbgmcuCr { bits: 0u32 }
    }
}

impl DbgmcuCr {
    # [ doc = "Bit 0 - DBG_SLEEP" ]
    pub fn set_dbg_sleep(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - DBG_STOP" ]
    pub fn set_dbg_stop(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - DBG_STANDBY" ]
    pub fn set_dbg_standby(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 5 - TRACE_IOEN" ]
    pub fn set_trace_ioen(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bits 6:7 - TRACE_MODE" ]
    pub fn set_trace_mode(&mut self, value: u8) {
        self.bits.set_range(6u8..8u8, value as u32);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct DbgmcuApb1Fz {
    bits: u32,
}

impl DbgmcuApb1Fz {
    # [ doc = "Bit 0 - DBG_TIM2_STOP" ]
    pub fn dbg_tim2_stop(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - DBG_TIM3 _STOP" ]
    pub fn dbg_tim3_stop(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 2 - DBG_TIM4_STOP" ]
    pub fn dbg_tim4_stop(&self) -> bool {
        self.bits.get_bit(2u8)
    }
    # [ doc = "Bit 3 - DBG_TIM5_STOP" ]
    pub fn dbg_tim5_stop(&self) -> bool {
        self.bits.get_bit(3u8)
    }
    # [ doc = "Bit 4 - DBG_TIM6_STOP" ]
    pub fn dbg_tim6_stop(&self) -> bool {
        self.bits.get_bit(4u8)
    }
    # [ doc = "Bit 5 - DBG_TIM7_STOP" ]
    pub fn dbg_tim7_stop(&self) -> bool {
        self.bits.get_bit(5u8)
    }
    # [ doc = "Bit 6 - DBG_TIM12_STOP" ]
    pub fn dbg_tim12_stop(&self) -> bool {
        self.bits.get_bit(6u8)
    }
    # [ doc = "Bit 7 - DBG_TIM13_STOP" ]
    pub fn dbg_tim13_stop(&self) -> bool {
        self.bits.get_bit(7u8)
    }
    # [ doc = "Bit 8 - DBG_TIM14_STOP" ]
    pub fn dbg_tim14_stop(&self) -> bool {
        self.bits.get_bit(8u8)
    }
    # [ doc = "Bit 11 - DBG_WWDG_STOP" ]
    pub fn dbg_wwdg_stop(&self) -> bool {
        self.bits.get_bit(11u8)
    }
    # [ doc = "Bit 12 - DBG_IWDEG_STOP" ]
    pub fn dbg_iwdeg_stop(&self) -> bool {
        self.bits.get_bit(12u8)
    }
    # [ doc = "Bit 21 - DBG_J2C1_SMBUS_TIMEOUT" ]
    pub fn dbg_j2c1_smbus_timeout(&self) -> bool {
        self.bits.get_bit(21u8)
    }
    # [ doc = "Bit 22 - DBG_J2C2_SMBUS_TIMEOUT" ]
    pub fn dbg_j2c2_smbus_timeout(&self) -> bool {
        self.bits.get_bit(22u8)
    }
    # [ doc = "Bit 23 - DBG_J2C3SMBUS_TIMEOUT" ]
    pub fn dbg_j2c3smbus_timeout(&self) -> bool {
        self.bits.get_bit(23u8)
    }
    # [ doc = "Bit 25 - DBG_CAN1_STOP" ]
    pub fn dbg_can1_stop(&self) -> bool {
        self.bits.get_bit(25u8)
    }
    # [ doc = "Bit 26 - DBG_CAN2_STOP" ]
    pub fn dbg_can2_stop(&self) -> bool {
        self.bits.get_bit(26u8)
    }
}

impl Default for DbgmcuApb1Fz {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        DbgmcuApb1Fz { bits: 0u32 }
    }
}

impl DbgmcuApb1Fz {
    # [ doc = "Bit 0 - DBG_TIM2_STOP" ]
    pub fn set_dbg_tim2_stop(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - DBG_TIM3 _STOP" ]
    pub fn set_dbg_tim3_stop(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 2 - DBG_TIM4_STOP" ]
    pub fn set_dbg_tim4_stop(&mut self, value: bool) {
        self.bits.set_bit(2u8, value);
    }
    # [ doc = "Bit 3 - DBG_TIM5_STOP" ]
    pub fn set_dbg_tim5_stop(&mut self, value: bool) {
        self.bits.set_bit(3u8, value);
    }
    # [ doc = "Bit 4 - DBG_TIM6_STOP" ]
    pub fn set_dbg_tim6_stop(&mut self, value: bool) {
        self.bits.set_bit(4u8, value);
    }
    # [ doc = "Bit 5 - DBG_TIM7_STOP" ]
    pub fn set_dbg_tim7_stop(&mut self, value: bool) {
        self.bits.set_bit(5u8, value);
    }
    # [ doc = "Bit 6 - DBG_TIM12_STOP" ]
    pub fn set_dbg_tim12_stop(&mut self, value: bool) {
        self.bits.set_bit(6u8, value);
    }
    # [ doc = "Bit 7 - DBG_TIM13_STOP" ]
    pub fn set_dbg_tim13_stop(&mut self, value: bool) {
        self.bits.set_bit(7u8, value);
    }
    # [ doc = "Bit 8 - DBG_TIM14_STOP" ]
    pub fn set_dbg_tim14_stop(&mut self, value: bool) {
        self.bits.set_bit(8u8, value);
    }
    # [ doc = "Bit 11 - DBG_WWDG_STOP" ]
    pub fn set_dbg_wwdg_stop(&mut self, value: bool) {
        self.bits.set_bit(11u8, value);
    }
    # [ doc = "Bit 12 - DBG_IWDEG_STOP" ]
    pub fn set_dbg_iwdeg_stop(&mut self, value: bool) {
        self.bits.set_bit(12u8, value);
    }
    # [ doc = "Bit 21 - DBG_J2C1_SMBUS_TIMEOUT" ]
    pub fn set_dbg_j2c1_smbus_timeout(&mut self, value: bool) {
        self.bits.set_bit(21u8, value);
    }
    # [ doc = "Bit 22 - DBG_J2C2_SMBUS_TIMEOUT" ]
    pub fn set_dbg_j2c2_smbus_timeout(&mut self, value: bool) {
        self.bits.set_bit(22u8, value);
    }
    # [ doc = "Bit 23 - DBG_J2C3SMBUS_TIMEOUT" ]
    pub fn set_dbg_j2c3smbus_timeout(&mut self, value: bool) {
        self.bits.set_bit(23u8, value);
    }
    # [ doc = "Bit 25 - DBG_CAN1_STOP" ]
    pub fn set_dbg_can1_stop(&mut self, value: bool) {
        self.bits.set_bit(25u8, value);
    }
    # [ doc = "Bit 26 - DBG_CAN2_STOP" ]
    pub fn set_dbg_can2_stop(&mut self, value: bool) {
        self.bits.set_bit(26u8, value);
    }
}

# [ derive ( Debug , Clone , Copy ) ]
# [ repr ( C ) ]
pub struct DbgmcuApb2Fz {
    bits: u32,
}

impl DbgmcuApb2Fz {
    # [ doc = "Bit 0 - TIM1 counter stopped when core is halted" ]
    pub fn dbg_tim1_stop(&self) -> bool {
        self.bits.get_bit(0u8)
    }
    # [ doc = "Bit 1 - TIM8 counter stopped when core is halted" ]
    pub fn dbg_tim8_stop(&self) -> bool {
        self.bits.get_bit(1u8)
    }
    # [ doc = "Bit 16 - TIM9 counter stopped when core is halted" ]
    pub fn dbg_tim9_stop(&self) -> bool {
        self.bits.get_bit(16u8)
    }
    # [ doc = "Bit 17 - TIM10 counter stopped when core is halted" ]
    pub fn dbg_tim10_stop(&self) -> bool {
        self.bits.get_bit(17u8)
    }
    # [ doc = "Bit 18 - TIM11 counter stopped when core is halted" ]
    pub fn dbg_tim11_stop(&self) -> bool {
        self.bits.get_bit(18u8)
    }
}

impl Default for DbgmcuApb2Fz {
    # [ doc = r" Reset value" ]
    fn default() -> Self {
        DbgmcuApb2Fz { bits: 0u32 }
    }
}

impl DbgmcuApb2Fz {
    # [ doc = "Bit 0 - TIM1 counter stopped when core is halted" ]
    pub fn set_dbg_tim1_stop(&mut self, value: bool) {
        self.bits.set_bit(0u8, value);
    }
    # [ doc = "Bit 1 - TIM8 counter stopped when core is halted" ]
    pub fn set_dbg_tim8_stop(&mut self, value: bool) {
        self.bits.set_bit(1u8, value);
    }
    # [ doc = "Bit 16 - TIM9 counter stopped when core is halted" ]
    pub fn set_dbg_tim9_stop(&mut self, value: bool) {
        self.bits.set_bit(16u8, value);
    }
    # [ doc = "Bit 17 - TIM10 counter stopped when core is halted" ]
    pub fn set_dbg_tim10_stop(&mut self, value: bool) {
        self.bits.set_bit(17u8, value);
    }
    # [ doc = "Bit 18 - TIM11 counter stopped when core is halted" ]
    pub fn set_dbg_tim11_stop(&mut self, value: bool) {
        self.bits.set_bit(18u8, value);
    }
}
